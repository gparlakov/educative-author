{"components":[{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"\nIn everyday work, we often need to deal with Promises ([MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)). Jasmine allows for a straightforward way of testing these using `async` and `await` ([MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function))\n\n## The ArticleDelete class\n\nWhat follows is a very simplified example of a class that handles deleting articles in a browser application. It will accept some input and make a request to a server API if conditions are met.\n\n> For this lesson, the ArticleAPI methods are considered returning `Promise`-s. So the `delete` method returns a `Promise`.\n\nRun the code playground below and see the breakdown below.","mdHtml":"<p>In everyday work, we often need to deal with Promises (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">MDN article</a>). Jasmine allows for a straightforward way of testing these using <code>async</code> and <code>await</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">MDN article</a>)</p>\n<h2>The ArticleDelete class</h2>\n<p>What follows is a very simplified example of a class that handles deleting articles in a browser application. It will accept some input and make a request to a server API if conditions are met.</p>\n<blockquote>\n<p>For this lesson, the ArticleAPI methods are considered returning <code>Promise</code>-s. So the <code>delete</code> method returns a <code>Promise</code>.</p>\n</blockquote>\n<p>Run the code playground below and see the breakdown below.</p>\n","cursorPosition":407,"comp_id":"8pnVq3HUi2GEDcSEF_OZA"},"iteration":3,"hash":3,"saveVersion":2},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":4839823003794,"maxId":4843888772487,"children":[{"id":4328082363051,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":278258586569,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8186361799005,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":278258586569}],"parentId":4328082363051},{"id":4839823003794,"module":"article-delete.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, async () => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n    // act\n    const result = await article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n    expect(result).toEqual('article deleted: \"the first article\"');\n  });\n\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, async () => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n    // act\n    const result = await article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(result).toEqual('It looks like article \"the first article\" has alreay been deleted');\n  });\n\n  it(`should return no article to delete when that's the case`, async () => {\n    // arrange\n    // act\n    const result = await article.delete();\n    // assert\n    expect(result).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4328082363051}],"parentId":0},{"id":4843888772487,"module":"src","leaf":false,"collapsed":true,"children":[{"id":974856117302,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4843888772487},{"id":9334820250986,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  async delete(a) {\n    if (a != null && a.id != null) {\n      try {\n        await this.articleAPI.delete(a.id);\n        return `article deleted: \"${a.title}\"`;\n      } catch (e) {\n        if (e && e.status === 404) {\n          return `It looks like article \"${a.title}\" has alreay been deleted`;\n        }\n\n        return `Unknown error trying to delete \"${a.title}\". Please try again.`;\n      }\n    }\n\n    return 'no article to delete';\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4843888772487}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/3.1.testing-promises"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"9QWAU6ubmLVATi5XV7fyH","caption":"Unit testing  a Promise example"},"iteration":2,"hash":4,"saveVersion":6},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## ArticleDelete class breakdown\n\nThe `ArticleDelete` class is relying on a `ArticleAPI` class to make a `DELETE /api/article/:id` call if conditions are met.\n\n- `ArticleAPI` is a class that would implement the server API call. _It is empty as that's outside of the current lesson scope, and we'll be mocking its responses for the tests_\n- `ArticleDelete` is the main class. It's breakdown:\n\n  - ```js\n    import { ArticleAPI } from './article-api.mjs';\n    ```\n\n    This line imports the ArticleAPI dependency from the adjacent module in the current folder `article-api.mjs`.\n\n  - ```js\n    export class ArticleDelete {\n    ```\n\n    This line declares and exports the class to be used in other modules.\n\n  - ```js\n      /** @type {ArticleAPI} */\n      articleAPI;\n\n      /**\n       * @param { ArticleAPI } article the article api\n       */\n      constructor(articleApi) {\n        this.articleAPI = articleApi;\n      }\n    ```\n\n    These lines declare the `articleAPI` property and populates it when an instance of the class gets constructed. In other words, constructing an instance of the `ArticleDelete` class will require an instance of `ArticleAPI` class.\n\n  - ```js\n      async delete(a) {\n        if (a != null && a.id != null) {\n          try {\n            await this.articleAPI.delete(a.id);\n            return `article deleted: \"${a.title}\"`;\n          } catch(e) {\n            //... skipped\n          }\n        }\n\n        return 'no article to delete';\n      }\n    ```\n\n    The `delete` method calls the ArticleAPI `delete` method and `await`s its response then returns the positive result. The `try catch` block wraps this logic. So if the `delete` method returns a promise that gets rejected the `catch` will get invoked.\n\n    > The `create` method is an [asynchronous method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n    > i.e. we can use the `await` keyword to wait for a promise resolution (or rejection) before continuing with the logic.\n\n  - ```js\n    catch (e) {\n      if (e && e.status === 404) {\n        return `It looks like article \"${a.title}\" has already been deleted`;\n      }\n      return `Unknown error trying to delete \"${a.title}\". Please try again.`;\n    }\n    ```\n\n    The `catch` logic:\n    - When the response has a status of 404 (Not found), we'll inform the caller (of the method) that this article has already been deleted.\n    - Otherwise, inform the caller that there was an issue with deleting this article.\n\n## Test breakdown\n\nLooking at the `spec/article-delete.spec.mjs` file we have:\n\n- ```js\n  import { ArticleDelete } from '../__src__/article-delete.mjs';\n\n  describe('ArticleDelete', () => {\n  ```\n\n  We start with `import`ing the `ArticleDelete` class and declaring a test suite for it `describe('ArticleDelete', () => {`.\n\n- ```js\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n  ```\n\n  Knowing that we need an instance of the `ArticleAPI` we create a spy object with a spy on the `delete` method as that's the only method we use in the logic of the `ArticleDelete` class. Then in the next line, we instantiate an `ArticleDelete` instance. These two instances will get renewed `beforeEach` test so that each test executes in isolation from the others and no one test influences the others.\n\n### Green path breakdown\n\nIn the test case `should call the articleAPI delete and return the deleted article title` we focus on the so-called \"green path\" test AKA \"happy path\" [wiki article](https://en.wikipedia.org/wiki/Happy_path). That is testing for the case that the method receives what it expects and works as intended.\n\n- ```js\n  it(`should call the articleAPI delete and return the deleted article title`, async () => {\n  ```\n\n  Notice the second parameter of `it` is an async [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function). Jasmine knows what to do with such functions. Essentially, this function returns a `Promise`, and Jasmine waits for it to get resolved. And the function itself will wait for any `await ...` expressions to get resolved too.\n\n- ```js\n  // arrange\n  articleAPI.delete.and.returnValue(Promise.resolve({ id: 1 }));\n  ```\n\n  Using the mocking capabilities, we make sure that when the `delete` method of the `ArticleAPI` gets called, it returns a `Promise`. `Promise.resolve` returns a `Promise` that is resolved with the specified result - in this case `{id: 1}`.\n\n- ```js\n  // act\n  const result = await article.delete({ id: 1, title: 'the first article' });\n  ```\n\n  We call the `delete` method and `await` its response to get resolved.\n\n- ```js\n  // assert\n  expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n  expect(result).toEqual('article deleted: \"the first article\"');\n  });\n  ```\n\n  Finally, we assert that the `delete` has been called and the `result` is as expected.\n\n### 404 error test breakdown\n\nIn the test case `when the articleAPI delete returns status 404 it should return - already been deleted`, we'll make sure the behavior of the `ArticleDelete.delete` method is as expected for the case that a `404 Not found` is returned from the server.\n\n- ```js\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, async () => {\n  ```\n\n  Notice the second parameter of `it` is an async [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), taking advantage of Jasmine's Promise handling capability.\n\n- ```js\n  // arrange\n  articleAPI.delete.and.returnValue(Promise.reject({ status: 404, message: 'not found' }));\n  ```\n\n  Using the mocking capabilities, we make sure that when the `delete` method of the `ArticleAPI` gets called, it returns a `Promise`. `Promise.reject` returns a `Promise` that is rejected with the specified result - in this case `{status: 404, message: 'not found'}`.\n\n  _Note: This is just an example of how a rejected Promise might look like ([axios](https://axios-http.com/docs/handling_errors)). Depending on the specific API or library used the rejection might not happen on a 404_\n\n- ```js\n  // act\n  const result = await article.delete({ id: 1, title: 'the first article' });\n  ```\n\n  Then, we call the `delete` method and `await` its response to get resolved\n\n- ```js\n  // assert\n  expect(result).toEqual('It looks like article \"the first article\" has already been deleted');\n  ```\n\n  Finally, we assert that the `delete` gets called and the `result` is as expected for the 404 case\n\n## Exercise\n\nFor this exercise, we'll focus on `src/article-create.mjs` in the code playground below. The `ArticleCreate` class is very similar to `ArticleDelete`, with the main difference being the `create` method:\n\n- ```js\n  async create(title, content) {\n    if (typeof title === 'string' && typeof content === 'string') {\n      try {\n        await this.articleAPI.create(title, content);\n        return `article created: \"${title}\" with content \"${content}\"`;\n      } catch (e) {\n        if (e && e.status === 409) {\n          return `it appears that an article with that title \"${title}\" already exists`\n        }\n\n        return `failed creating article ${title} - please try again later`\n      }\n    }\n\n    return `expected string title and content but recived title: \"${title}\" content: \"${content}\"`;\n  }\n  ```\n\n  - It is an `async`-chronous method.\n  - It takes two parameters: `title` and `content` to create the article, and it invokes the `ArticleAPI`'s `create` method.\n  - The returned strings confirm the creation of the article or inform of an error.\n  - In the case of a status [409 Conflict](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409), it advises there is an article with such a title already.\n\nLet's create the three specs for the above logic:\n\n- When called with title and content, it invokes the `ArticleAPI`'s method `create`.\n- When the API returns a 409 Conflict, it should advise the caller such a title already exists.\n- When called without a title or content, it returns an error explanation.\n\n> Note: the tests for `ArticleDelete` are part of the code playground too.","mdHtml":"<h2>ArticleDelete class breakdown</h2>\n<p>The <code>ArticleDelete</code> class is relying on a <code>ArticleAPI</code> class to make a <code>DELETE /api/article/:id</code> call if conditions are met.</p>\n<ul>\n<li>\n<p><code>ArticleAPI</code> is a class that would implement the server API call. <em>It is empty as that’s outside of the current lesson scope, and we’ll be mocking its responses for the tests</em></p>\n</li>\n<li>\n<p><code>ArticleDelete</code> is the main class. It’s breakdown:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">import { ArticleAPI } from './article-api.mjs';\n</code></pre>\n<p>This line imports the ArticleAPI dependency from the adjacent module in the current folder <code>article-api.mjs</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">export class ArticleDelete {\n</code></pre>\n<p>This line declares and exports the class to be used in other modules.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n</code></pre>\n<p>These lines declare the <code>articleAPI</code> property and populates it when an instance of the class gets constructed. In other words, constructing an instance of the <code>ArticleDelete</code> class will require an instance of <code>ArticleAPI</code> class.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">  async delete(a) {\n    if (a != null &amp;&amp; a.id != null) {\n      try {\n        await this.articleAPI.delete(a.id);\n        return `article deleted: &quot;${a.title}&quot;`;\n      } catch(e) {\n        //... skipped\n      }\n    }\n\n    return 'no article to delete';\n  }\n</code></pre>\n<p>The <code>delete</code> method calls the ArticleAPI <code>delete</code> method and <code>await</code>s its response then returns the positive result. The <code>try catch</code> block wraps this logic. So if the <code>delete</code> method returns a promise that gets rejected the <code>catch</code> will get invoked.</p>\n<blockquote>\n<p>The <code>create</code> method is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">asynchronous method</a>\ni.e. we can use the <code>await</code> keyword to wait for a promise resolution (or rejection) before continuing with the logic.</p>\n</blockquote>\n</li>\n<li>\n<pre><code class=\"language-js\">catch (e) {\n  if (e &amp;&amp; e.status === 404) {\n    return `It looks like article &quot;${a.title}&quot; has already been deleted`;\n  }\n  return `Unknown error trying to delete &quot;${a.title}&quot;. Please try again.`;\n}\n</code></pre>\n<p>The <code>catch</code> logic:</p>\n<ul>\n<li>When the response has a status of 404 (Not found), we’ll inform the caller (of the method) that this article has already been deleted.</li>\n<li>Otherwise, inform the caller that there was an issue with deleting this article.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Test breakdown</h2>\n<p>Looking at the <code>spec/article-delete.spec.mjs</code> file we have:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () =&gt; {\n</code></pre>\n<p>We start with <code>import</code>ing the <code>ArticleDelete</code> class and declaring a test suite for it <code>describe('ArticleDelete', () =&gt; {</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">let article;\nlet articleAPI;\n\nbeforeEach(() =&gt; {\n  articleAPI = jasmine.createSpyObj('article API', ['delete']);\n  article = new ArticleDelete(articleAPI);\n});\n</code></pre>\n<p>Knowing that we need an instance of the <code>ArticleAPI</code> we create a spy object with a spy on the <code>delete</code> method as that’s the only method we use in the logic of the <code>ArticleDelete</code> class. Then in the next line, we instantiate an <code>ArticleDelete</code> instance. These two instances will get renewed <code>beforeEach</code> test so that each test executes in isolation from the others and no one test influences the others.</p>\n</li>\n</ul>\n<h3>Green path breakdown</h3>\n<p>In the test case <code>should call the articleAPI delete and return the deleted article title</code> we focus on the so-called “green path” test AKA “happy path” <a href=\"https://en.wikipedia.org/wiki/Happy_path\">wiki article</a>. That is testing for the case that the method receives what it expects and works as intended.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">it(`should call the articleAPI delete and return the deleted article title`, async () =&gt; {\n</code></pre>\n<p>Notice the second parameter of <code>it</code> is an async <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">function</a>. Jasmine knows what to do with such functions. Essentially, this function returns a <code>Promise</code>, and Jasmine waits for it to get resolved. And the function itself will wait for any <code>await ...</code> expressions to get resolved too.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// arrange\narticleAPI.delete.and.returnValue(Promise.resolve({ id: 1 }));\n</code></pre>\n<p>Using the mocking capabilities, we make sure that when the <code>delete</code> method of the <code>ArticleAPI</code> gets called, it returns a <code>Promise</code>. <code>Promise.resolve</code> returns a <code>Promise</code> that is resolved with the specified result - in this case <code>{id: 1}</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// act\nconst result = await article.delete({ id: 1, title: 'the first article' });\n</code></pre>\n<p>We call the <code>delete</code> method and <code>await</code> its response to get resolved.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nexpect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\nexpect(result).toEqual('article deleted: &quot;the first article&quot;');\n});\n</code></pre>\n<p>Finally, we assert that the <code>delete</code> has been called and the <code>result</code> is as expected.</p>\n</li>\n</ul>\n<h3>404 error test breakdown</h3>\n<p>In the test case <code>when the articleAPI delete returns status 404 it should return - already been deleted</code>, we’ll make sure the behavior of the <code>ArticleDelete.delete</code> method is as expected for the case that a <code>404 Not found</code> is returned from the server.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">it(`when the articleAPI delete returns status 404 it should return - already been deleted`, async () =&gt; {\n</code></pre>\n<p>Notice the second parameter of <code>it</code> is an async <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">function</a>, taking advantage of Jasmine’s Promise handling capability.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// arrange\narticleAPI.delete.and.returnValue(Promise.reject({ status: 404, message: 'not found' }));\n</code></pre>\n<p>Using the mocking capabilities, we make sure that when the <code>delete</code> method of the <code>ArticleAPI</code> gets called, it returns a <code>Promise</code>. <code>Promise.reject</code> returns a <code>Promise</code> that is rejected with the specified result - in this case <code>{status: 404, message: 'not found'}</code>.</p>\n<p><em>Note: This is just an example of how a rejected Promise might look like (<a href=\"https://axios-http.com/docs/handling_errors\">axios</a>). Depending on the specific API or library used the rejection might not happen on a 404</em></p>\n</li>\n<li>\n<pre><code class=\"language-js\">// act\nconst result = await article.delete({ id: 1, title: 'the first article' });\n</code></pre>\n<p>Then, we call the <code>delete</code> method and <code>await</code> its response to get resolved</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nexpect(result).toEqual('It looks like article &quot;the first article&quot; has already been deleted');\n</code></pre>\n<p>Finally, we assert that the <code>delete</code> gets called and the <code>result</code> is as expected for the 404 case</p>\n</li>\n</ul>\n<h2>Exercise</h2>\n<p>For this exercise, we’ll focus on <code>src/article-create.mjs</code> in the code playground below. The <code>ArticleCreate</code> class is very similar to <code>ArticleDelete</code>, with the main difference being the <code>create</code> method:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">async create(title, content) {\n  if (typeof title === 'string' &amp;&amp; typeof content === 'string') {\n    try {\n      await this.articleAPI.create(title, content);\n      return `article created: &quot;${title}&quot; with content &quot;${content}&quot;`;\n    } catch (e) {\n      if (e &amp;&amp; e.status === 409) {\n        return `it appears that an article with that title &quot;${title}&quot; already exists`\n      }\n\n      return `failed creating article ${title} - please try again later`\n    }\n  }\n\n  return `expected string title and content but recived title: &quot;${title}&quot; content: &quot;${content}&quot;`;\n}\n</code></pre>\n<ul>\n<li>It is an <code>async</code>-chronous method.</li>\n<li>It takes two parameters: <code>title</code> and <code>content</code> to create the article, and it invokes the <code>ArticleAPI</code>'s <code>create</code> method.</li>\n<li>The returned strings confirm the creation of the article or inform of an error.</li>\n<li>In the case of a status <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409\">409 Conflict</a>, it advises there is an article with such a title already.</li>\n</ul>\n</li>\n</ul>\n<p>Let’s create the three specs for the above logic:</p>\n<ul>\n<li>When called with title and content, it invokes the <code>ArticleAPI</code>'s method <code>create</code>.</li>\n<li>When the API returns a 409 Conflict, it should advise the caller such a title already exists.</li>\n<li>When called without a title or content, it returns an error explanation.</li>\n</ul>\n<blockquote>\n<p>Note: the tests for <code>ArticleDelete</code> are part of the code playground too.</p>\n</blockquote>\n","cursorPosition":0,"comp_id":"SnUY4KBHWwzdg8PtBaz3G"},"iteration":2,"hash":2,"saveVersion":5},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":null,"maxId":4616053806286,"children":[{"id":7353261758799,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":4173811524130,"module":"support","leaf":false,"collapsed":true,"children":[{"id":1848595565765,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":9148650987758,"module":"article-create.spec.mjs","leaf":true,"data":{"content":"import { ArticleCreate } from '../__src__/article-create.mjs';\n\ndescribe('ArticleCreate', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['create']);\n    article = new ArticleCreate(articleAPI);\n  });\n\n  it(`should call the articleAPI create and return the created article title and content`, async () => {\n    pending('call create with a name and a title and assert expected call and return value');\n    // arrange\n    // act\n    // assert\n  });\n\n  it(`when the API returns a 409 Conflict it should advise caller such a title already exists`, async () => {\n    pending('make sure the create returns a rejected promise with a status 409 and assert the return string is as expected');\n    // arrange\n    // act\n    // assert\n  });\n\n  it(`should return what was expected and what was received when missing parameters or not string`, async () => {\n    pending('call create without a name and with a title and assert expected return value');\n    // arrange\n    // act\n    // assert\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":3620517087453,"module":"article-delete.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, async () => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n    // act\n    const result = await article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n    expect(result).toEqual('article deleted: \"the first article\"');\n  });\n\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, async () => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n    // act\n    const result = await article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(result).toEqual('It looks like article \"the first article\" has alreay been deleted');\n  });\n\n  it(`should return no article to delete when that's the case`, async () => {\n    // arrange\n    // act\n    const result = await article.delete();\n    // assert\n    expect(result).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":4616053806286,"module":"src","leaf":false,"collapsed":true,"children":[{"id":4913419330255,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":9374993858760,"module":"article-create.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\nexport class ArticleCreate {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  async create(title, content) {\n    if (typeof title === 'string' && typeof content === 'string') {\n      try {\n        await this.articleAPI.create(title, content);\n        return `article created: \"${title}\" with content \"${content}\"`;\n      } catch (e) {\n        if (e && e.status === 409) {\n          return `it appears that an article with that title \"${title}\" already exists`\n        }\n\n        return `failed creating article ${title} - please try again later`\n      }\n    }\n\n    return `expected string title and content but recived title: \"${title}\" content: \"${content}\"`;\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":6025632659271,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  async delete(a) {\n    if (a != null && a.id != null) {\n      try {\n        await this.articleAPI.delete(a.id);\n        return `article deleted: \"${a.title}\"`;\n      } catch (e) {\n        if (e && e.status === 404) {\n          return `It looks like article \"${a.title}\" has alreay been deleted`;\n        }\n\n        return `Unknown error trying to delete \"${a.title}\". Please try again.`;\n      }\n    }\n\n    return 'no article to delete';\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/3.1.testing-promises-exercise","judge":{"judgeActive":false}},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Exercise testing promises","comp_id":"g99B2mVQl9cbdwt5rBPtR"},"iteration":2,"hash":7},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"  ```js\n  it(`should call the articleAPI create and return the created article title and content`, async () => {\n    // arrange\n    articleAPI.create.and.returnValue(Promise.resolve({id: 1}));\n    // act\n    const res = await article.create('My new title', `## Heading\n\n    Paragraph 1 with some content\n\n    ## heading 2\n\n    Paragraph 2 with some more content\n    `);\n    // assert\n    expect(res).toEqual(`article created: \"My new title\" with content \"## Heading\n\n    Paragraph 1 with some content\n\n    ## heading 2\n\n    Paragraph 2 with some more content\n    \"`)\n  });\n  ```","mdHtml":"<pre><code class=\"language-js\">it(`should call the articleAPI create and return the created article title and content`, async () =&gt; {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.resolve({id: 1}));\n  // act\n  const res = await article.create('My new title', `## Heading\n\n  Paragraph 1 with some content\n\n  ## heading 2\n\n  Paragraph 2 with some more content\n  `);\n  // assert\n  expect(res).toEqual(`article created: &quot;My new title&quot; with content &quot;## Heading\n\n  Paragraph 1 with some content\n\n  ## heading 2\n\n  Paragraph 2 with some more content\n  &quot;`)\n});\n</code></pre>\n","showHintText":"Show Hint for `should call the articleAPI create and return the created article title and content`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"9nakpl87ZwZuVJUht3WnB"},"iteration":2,"hash":8},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"  ```js\n  it(`when the API returns a 409 Conflict it should advise caller such a title already exists`, async () => {\n    // arrange\n    articleAPI.create.and.returnValue(Promise.reject({status: 409}));\n    // act\n    const res = await article.create('My new title', 'content');\n    // assert\n    expect(res).toEqual(`it appears that an article with that title \"My new title\" already exists`)\n  });\n  ```\n","mdHtml":"<pre><code class=\"language-js\">it(`when the API returns a 409 Conflict it should advise caller such a title already exists`, async () =&gt; {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.reject({status: 409}));\n  // act\n  const res = await article.create('My new title', 'content');\n  // assert\n  expect(res).toEqual(`it appears that an article with that title &quot;My new title&quot; already exists`)\n});\n</code></pre>\n","showHintText":"Show Hint for `when the API returns a 409 Conflict it should advise caller such a title already exists`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"Kz_n81ZvIOq5FJuC-XV1N"},"iteration":2,"hash":9,"saveVersion":4},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"  ```js\n  it(`should return what was expected and what was received when missing parameters or not string`, async () => {\n    // arrange\n    // act\n    const result = await article.create();\n    // assert\n    expect(result).toEqual('expected string title and content but recived title: \"undefined\" content: \"undefined\"');\n  });\n  ```","mdHtml":"<pre><code class=\"language-js\">it(`should return what was expected and what was received when missing parameters or not string`, async () =&gt; {\n  // arrange\n  // act\n  const result = await article.create();\n  // assert\n  expect(result).toEqual('expected string title and content but recived title: &quot;undefined&quot; content: &quot;undefined&quot;');\n});\n</code></pre>\n","showHintText":"Show Hint for `should return what was expected and what was received when missing parameters or not string`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"3RMcCaUHCUdnZ3ooGW1n-"},"iteration":2,"hash":10,"saveVersion":1}],"summary":{"title":"Unit Testing Promise-s using async and await","description":"In this lesson, we'll look into testing Promises using `async` and `await`.","tags":["Promise","Javascript","Unit test"],"titleUpdated":true}}