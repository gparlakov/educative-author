{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## The problem\n\nHaving the code and its tests in the same file feels a bit uncomfortable. We don't want our users to see the console logs of our tests. Also - the test code is not beneficial to the users so let's not have them download and run it.\n\n## Jasmine\n\nIt turns out that its beneficial to have a tool that:\n\n- finds **all test** files (also known as spec files)\n- **runs** the tests\n- **reports** on the result - ok/fail/skip\n\nOne such tool is [Jasmine](https://jasmine.github.io/).\n\nRun the code below to see an example of what Jasmine output looks like.","mdHtml":"<h2>The problem</h2>\n<p>Having the code and its tests in the same file feels a bit uncomfortable. We don’t want our users to see the console logs of our tests. Also - the test code is not beneficial to the users so let’s not have them download and run it.</p>\n<h2>Jasmine</h2>\n<p>It turns out that its beneficial to have a tool that:</p>\n<ul>\n<li>finds <strong>all test</strong> files (also known as spec files)</li>\n<li><strong>runs</strong> the tests</li>\n<li><strong>reports</strong> on the result - ok/fail/skip</li>\n</ul>\n<p>One such tool is <a href=\"https://jasmine.github.io/\">Jasmine</a>.</p>\n<p>Run the code below to see an example of what Jasmine output looks like.</p>\n","comp_id":"-0VWLPEctnDHyN7rP5j-X","cursorPosition":0},"iteration":1,"hash":1,"saveVersion":39},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":1875355415279,"maxId":7587933025993,"children":[{"id":3897875543765,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":5246999371933,"module":"support","leaf":false,"collapsed":false,"children":[{"id":2508860105438,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5246999371933}],"parentId":3897875543765}],"parentId":0},{"id":7587933025992,"module":"src","leaf":false,"collapsed":false,"children":[{"id":7193498448846,"module":"deep","leaf":false,"collapsed":false,"children":[{"id":1270915136576,"module":"nested","leaf":false,"collapsed":false,"children":[{"id":2723823207527,"module":"another.spec.js","leaf":true,"data":{"content":"describe(\"A deep nested test\", () => {\n    it(\"should run fine too\", () => {\n        expect('fine').toEqual('fine');\n    })\n})\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":1270915136576}],"parentId":7193498448846}],"parentId":7587933025992},{"id":6757294183236,"module":"my-function.js","leaf":true,"data":{"content":"// blank\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":7587933025992},{"id":1875355415279,"module":"my-test.spec.js","leaf":true,"data":{"content":"describe(\n    \"My first test\",\n    () => {\n        it(\n            \"should run fine\",\n            () => {\n                expect('fine').toEqual('fine');\n            }\n        );\n    }\n)\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":7587933025992}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/jasmine-the-test-runner","judge":{"judgeActive":false}},"comp_id":"Ch9hgF5s7qXNs9o_5Yti6","caption":"Example of a couple of specs ","dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true}},"iteration":0,"hash":20,"saveVersion":10},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown\n\n- The `jasmine.json` file in the `spec/support` folder configures Jasmine:\n  - The `src` is the folder to search for spec files.\n  - The `\"**/*[sS]pec.js\"` is the [glob pattern](<https://en.wikipedia.org/wiki/Glob_(programming)>) to match files in the folder and recognize them as tests aka `spec` files.\n    - Saying \"Hey, Jasmine, look for all files in the `src` folder that have names ending on `spec.js` or `Spec.js` and run the tests in them\".\n    - Runs `src/my.spec.js` or `src/deep/nested/another.spec.js`.\n    - Skips `src/my.function.js`.\n- Spec files:\n  - File `src/my-first.spec.js`.\n  - File `src/deep/nested/another.spec.js` - demonstrates the deep nesting still matches the pattern.\n- Other files.\n  - File `src/my-function.js` - not matching the spec pattern so it's skipped (and empty).\n\n## Spec file\n\nA spec file generally consists of:\n\n- An `describe` container that names and holds a section of our test cases. It's not unlike namespaces/modules in node.js.\n- An `it` is a container that names and holds the implementation of a single test case.\n- Looking at `src/my-first.spec.js` the `describe` is a function that takes 2 parameters:\n\n  - name - `\"My first test\"`\n  - function callback which will house the test cases\n  - ![describe params image missing](/udata/nPmk5LlbBB4/describe-params.png)\n\n  - An `it` is a single test case. It's a function that takes 2 parameters:\n    - Name - in this case 'should run fine`.\n    - Function - the test case implementation in the form of a function. In this case, an arrow function that calls the `expect` function from `Jasmine`.\n    - ![it params image missing](/udata/M29QrR4MgEB/it-params.png)\n    - Finally, the test case itself is only one `expect`-ation call which can be interpreted as \"make sure the string `fine` is equal to the string `fine`\".\n\n_All this is just a demonstration test run. In reality, each test case will likely contain more logic._\n\n## Run\n\nRunning the above code should yield the following:\n\n```sh\nStarted\n..\n\n2 specs, 0 failures\n```\n\n## Experiment\n\n- Try changing the string on one side of the `expect` (expectation) and run the specs (for example `expect('fsine').toEqual('fine');`. Notice now the **failing** test is reported in more **details**.\n- Try adding one more `it` test. For example:\n\n  - ```js\n    it('my second test', () => {\n       expect('a string with spaces'.split(' ')).toEqual(['a', 'string', 'with', 'spaces'])\n    }\n    ```\n\n- Try renaming `src/my-first.spec.js` to `my-first.spec.js`:\n  - Notice how now there are `1 specs, 0 failures`.\n  - That's because now the test name is no longer under the `spec_dir` (from `spec/support/jasmine.json`).\n- Try renaming `src/deep/nested/another.spec.js` to `src/deep/nested/another.spec-not.js` and see how it no longer takes part in the test run.\n- Reload the page to go back to the starting point.\n\n## Installing and running jasmine\n\n_This is **not required** as this course provides enough to edit and see the tests running right here, in the browser environment._\n\nIf you'd like to run the examples locally read ahead.\n\nAs a first step - install [node and npm](https://nodejs.org/en/download/).\n\nThen follow these steps to install and initialize jasmine. Use the terminal below to run each of the following commands:\n\n- `npm install --save-dev jasmine` - will install the `jasmine` npm package.\n- `mkdir spec` - will create a folder for Jasmine config.\n- `npx jasmine init` - will initialize a standard Jasmine folder structure and config file:\n  - `spec/support/jasmine.json`\n- `npx jasmine` - will run Jasmine using [npx](https://docs.npmjs.com/cli/v7/commands/npx).\n\nTry the steps in the terminal below.","mdHtml":"<h2>Breakdown</h2>\n<ul>\n<li>The <code>jasmine.json</code> file in the <code>spec/support</code> folder configures Jasmine:\n<ul>\n<li>The <code>src</code> is the folder to search for spec files.</li>\n<li>The <code>&quot;**/*[sS]pec.js&quot;</code> is the <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">glob pattern</a> to match files in the folder and recognize them as tests aka <code>spec</code> files.\n<ul>\n<li>Saying “Hey, Jasmine, look for all files in the <code>src</code> folder that have names ending on <code>spec.js</code> or <code>Spec.js</code> and run the tests in them”.</li>\n<li>Runs <code>src/my.spec.js</code> or <code>src/deep/nested/another.spec.js</code>.</li>\n<li>Skips <code>src/my.function.js</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Spec files:\n<ul>\n<li>File <code>src/my-first.spec.js</code>.</li>\n<li>File <code>src/deep/nested/another.spec.js</code> - demonstrates the deep nesting still matches the pattern.</li>\n</ul>\n</li>\n<li>Other files.\n<ul>\n<li>File <code>src/my-function.js</code> - not matching the spec pattern so it’s skipped (and empty).</li>\n</ul>\n</li>\n</ul>\n<h2>Spec file</h2>\n<p>A spec file generally consists of:</p>\n<ul>\n<li>\n<p>An <code>describe</code> container that names and holds a section of our test cases. It’s not unlike namespaces/modules in node.js.</p>\n</li>\n<li>\n<p>An <code>it</code> is a container that names and holds the implementation of a single test case.</p>\n</li>\n<li>\n<p>Looking at <code>src/my-first.spec.js</code> the <code>describe</code> is a function that takes 2 parameters:</p>\n<ul>\n<li>\n<p>name - <code>&quot;My first test&quot;</code></p>\n</li>\n<li>\n<p>function callback which will house the test cases</p>\n</li>\n<li>\n<p><img src=\"/udata/nPmk5LlbBB4/describe-params.png\" alt=\"describe params image missing\" /></p>\n</li>\n<li>\n<p>An <code>it</code> is a single test case. It’s a function that takes 2 parameters:</p>\n<ul>\n<li>Name - in this case 'should run fine`.</li>\n<li>Function - the test case implementation in the form of a function. In this case, an arrow function that calls the <code>expect</code> function from <code>Jasmine</code>.</li>\n<li><img src=\"/udata/M29QrR4MgEB/it-params.png\" alt=\"it params image missing\" /></li>\n<li>Finally, the test case itself is only one <code>expect</code>-ation call which can be interpreted as &quot;make sure the string <code>fine</code> is equal to the string <code>fine</code>&quot;.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><em>All this is just a demonstration test run. In reality, each test case will likely contain more logic.</em></p>\n<h2>Run</h2>\n<p>Running the above code should yield the following:</p>\n<pre><code class=\"language-sh\">Started\n..\n\n2 specs, 0 failures\n</code></pre>\n<h2>Experiment</h2>\n<ul>\n<li>\n<p>Try changing the string on one side of the <code>expect</code> (expectation) and run the specs (for example <code>expect('fsine').toEqual('fine');</code>. Notice now the <strong>failing</strong> test is reported in more <strong>details</strong>.</p>\n</li>\n<li>\n<p>Try adding one more <code>it</code> test. For example:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">it('my second test', () =&gt; {\n   expect('a string with spaces'.split(' ')).toEqual(['a', 'string', 'with', 'spaces'])\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Try renaming <code>src/my-first.spec.js</code> to <code>my-first.spec.js</code>:</p>\n<ul>\n<li>Notice how now there are <code>1 specs, 0 failures</code>.</li>\n<li>That’s because now the test name is no longer under the <code>spec_dir</code> (from <code>spec/support/jasmine.json</code>).</li>\n</ul>\n</li>\n<li>\n<p>Try renaming <code>src/deep/nested/another.spec.js</code> to <code>src/deep/nested/another.spec-not.js</code> and see how it no longer takes part in the test run.</p>\n</li>\n<li>\n<p>Reload the page to go back to the starting point.</p>\n</li>\n</ul>\n<h2>Installing and running jasmine</h2>\n<p><em>This is <strong>not required</strong> as this course provides enough to edit and see the tests running right here, in the browser environment.</em></p>\n<p>If you’d like to run the examples locally read ahead.</p>\n<p>As a first step - install <a href=\"https://nodejs.org/en/download/\">node and npm</a>.</p>\n<p>Then follow these steps to install and initialize jasmine. Use the terminal below to run each of the following commands:</p>\n<ul>\n<li><code>npm install --save-dev jasmine</code> - will install the <code>jasmine</code> npm package.</li>\n<li><code>mkdir spec</code> - will create a folder for Jasmine config.</li>\n<li><code>npx jasmine init</code> - will initialize a standard Jasmine folder structure and config file:\n<ul>\n<li><code>spec/support/jasmine.json</code></li>\n</ul>\n</li>\n<li><code>npx jasmine</code> - will run Jasmine using <a href=\"https://docs.npmjs.com/cli/v7/commands/npx\">npx</a>.</li>\n</ul>\n<p>Try the steps in the terminal below.</p>\n","comp_id":"ln0mDsxzGBikwxuWe5IF2"},"iteration":3,"hash":10,"saveVersion":7},{"type":"TerminalWidget","mode":"edit","content":{"startScript":"mkdir install-jasmine && cd install-jasmine && npm init -y","comp_id":"XH6bULDPylOaJ_BdX1BSq"},"iteration":0,"hash":11,"saveVersion":15},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Expected result\n\n```sh\nRandomized with seed 81352\nStarted\n\n\nNo specs found\nFinished in 0.004 seconds\nIncomplete: No specs found\n```\n\nThis shows that Jasmine has been successfully installed and initialized.\n\nIt also shows what random seed has been used in case you'd like to repeat the exact same tests run. [Jasmine docs link](https://jasmine.github.io/setup/nodejs.html#--seed).\n\nIt searches for `.spec.js` files under the `/src/` folder by default. That can be changed in the `spec/support/jasmine.json` file.\n\nThere are no test files in this environment yet hence the `No specs found`.\n\n## Add a test\n\nTo demonstrate Jasmine is configured and runs tests, let's add one. Going back to the terminal and type in the following:\n\n- The command `echo \"describe('My first test',() => {it('should run fine', () => {expect('fine').toEqual('fine');});})\" >> spec/my-spec.spec.js` will create a file `my-spec.spec.js` under the `spec` folder and place the test suite 'My first test' with the 'should run fine' test case.\n- The command `npx jasmine` runs Jasmine.\n\nNow the result from Run should be:\n\n```sh\n1 spec, 0 failures\n```\n\n## Real-world\n\nThe above demonstration has the limitation that it needs to run within a browser environment, and a code editing tool would be hard to set up and run.\n\nThat is to say that in the real world one would probably add a script in their `package.json` similar to `test: jasmine` which would then enable `npm test` to run Jasmine and the whole test suite. Thus enabling `npm test` to be used instead of `npx jasmine`.\n\n## npx\n\nWhy use npx in the first place? `npx` enables running locally installed packages (like Jasmine) instead of installing them globally. For example - if we wanted to type `jasmine` and expect it to run, we'd need to install it globally (_npm install -g jasmine_), which might not be desirable. So `npx` allows us to install and run packages locally\\*.\n\n\\*In the same folder as the current `package.json`.\n\n## Configuring Jasmine\n\nJasmine has a bunch of configuration options - see links at the end for more details.\n\nTo demonstrate, let's replace the standard reported with a more colorful and detailed one.\n\nUsing the code playground below:\n\n- Notice `spec/support/jasmine.conf.js`.\n- Edit its contents to match:\n\n  ```js\n  const SpecReporter = require('jasmine-spec-reporter').SpecReporter;\n\n  jasmine.getEnv().clearReporters();\n\n  jasmine.getEnv().addReporter(\n    new SpecReporter({\n      // add jasmine-spec-reporter\n      spec: {\n        displayPending: true,\n      },\n    })\n  );\n  ```\n\n- Add a line in `jasmine.json` after the existing config lines: _(add the comma at the end of the last line of the current config)_\n\n  ```json\n  {\n    ,\n    \"helpers\":\n  [\"../spec/support/jasmine.config.js\"]\n  }\n  ```\n","mdHtml":"<h2>Expected result</h2>\n<pre><code class=\"language-sh\">Randomized with seed 81352\nStarted\n\n\nNo specs found\nFinished in 0.004 seconds\nIncomplete: No specs found\n</code></pre>\n<p>This shows that Jasmine has been successfully installed and initialized.</p>\n<p>It also shows what random seed has been used in case you’d like to repeat the exact same tests run. <a href=\"https://jasmine.github.io/setup/nodejs.html#--seed\">Jasmine docs link</a>.</p>\n<p>It searches for <code>.spec.js</code> files under the <code>/src/</code> folder by default. That can be changed in the <code>spec/support/jasmine.json</code> file.</p>\n<p>There are no test files in this environment yet hence the <code>No specs found</code>.</p>\n<h2>Add a test</h2>\n<p>To demonstrate Jasmine is configured and runs tests, let’s add one. Going back to the terminal and type in the following:</p>\n<ul>\n<li>The command <code>echo &quot;describe('My first test',() =&gt; {it('should run fine', () =&gt; {expect('fine').toEqual('fine');});})&quot; &gt;&gt; spec/my-spec.spec.js</code> will create a file <code>my-spec.spec.js</code> under the <code>spec</code> folder and place the test suite ‘My first test’ with the ‘should run fine’ test case.</li>\n<li>The command <code>npx jasmine</code> runs Jasmine.</li>\n</ul>\n<p>Now the result from Run should be:</p>\n<pre><code class=\"language-sh\">1 spec, 0 failures\n</code></pre>\n<h2>Real-world</h2>\n<p>The above demonstration has the limitation that it needs to run within a browser environment, and a code editing tool would be hard to set up and run.</p>\n<p>That is to say that in the real world one would probably add a script in their <code>package.json</code> similar to <code>test: jasmine</code> which would then enable <code>npm test</code> to run Jasmine and the whole test suite. Thus enabling <code>npm test</code> to be used instead of <code>npx jasmine</code>.</p>\n<h2>npx</h2>\n<p>Why use npx in the first place? <code>npx</code> enables running locally installed packages (like Jasmine) instead of installing them globally. For example - if we wanted to type <code>jasmine</code> and expect it to run, we’d need to install it globally (<em>npm install -g jasmine</em>), which might not be desirable. So <code>npx</code> allows us to install and run packages locally*.</p>\n<p>*In the same folder as the current <code>package.json</code>.</p>\n<h2>Configuring Jasmine</h2>\n<p>Jasmine has a bunch of configuration options - see links at the end for more details.</p>\n<p>To demonstrate, let’s replace the standard reported with a more colorful and detailed one.</p>\n<p>Using the code playground below:</p>\n<ul>\n<li>\n<p>Notice <code>spec/support/jasmine.conf.js</code>.</p>\n</li>\n<li>\n<p>Edit its contents to match:</p>\n<pre><code class=\"language-js\">const SpecReporter = require('jasmine-spec-reporter').SpecReporter;\n\njasmine.getEnv().clearReporters();\n\njasmine.getEnv().addReporter(\n  new SpecReporter({\n    // add jasmine-spec-reporter\n    spec: {\n      displayPending: true,\n    },\n  })\n);\n</code></pre>\n</li>\n<li>\n<p>Add a line in <code>jasmine.json</code> after the existing config lines: <em>(add the comma at the end of the last line of the current config)</em></p>\n<pre><code class=\"language-json\">{\n  ,\n  &quot;helpers&quot;:\n[&quot;../spec/support/jasmine.config.js&quot;]\n}\n</code></pre>\n</li>\n</ul>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"K7BbgG8JBW__1CyoJ4MXQ"},"iteration":0,"hash":12,"saveVersion":10},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":9570626599656,"maxId":2813134493961,"children":[{"id":2813134493959,"module":"src","leaf":false,"collapsed":false,"children":[{"id":2399344905411,"module":"my-function.js","leaf":true,"data":{"content":"// blank\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2813134493959},{"id":9570626599656,"module":"my-test.spec.js","leaf":true,"data":{"content":"describe(\"My first test\", () => {\n    it(\"should run fine\", () => {\n        expect('fine').toEqual('fine');\n    });\n\n    it('this test is pending')\n})\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2813134493959}],"parentId":0},{"id":9904232276064,"module":"spec","leaf":false,"collapsed":false,"children":[{"id":4996301870031,"module":"support","leaf":false,"collapsed":false,"children":[{"id":2813134493961,"module":"jasmine.conf.js","leaf":true,"parentId":4996301870031,"data":{"content":"// edit this\r\nconst SpecReporter = require('jasmine-spec-reporter').SpecReporter;\r\nconsole.log('this works?')\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":1410741177263,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false,\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ]\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4996301870031}],"parentId":9904232276064}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/jasmine-the-test-runner","judge":{"judgeActive":false}},"comp_id":"rxSr1TASurV3__ePtSiUF","dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Exercise Jasmine"},"iteration":0,"hash":18,"saveVersion":14},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown Jasmine config\n\n- ```js\n  \"helpers\": [\"../spec/support/jasmine.config.js\"]\n  ```\n\n  This line in the `jasmine.json` file basically tells jasmine to run some javascript before running the tests. In this case, it's the `jasmine.config.js` file:\n\n- `jasmine.config.js`\n\n  - ```js\n    const SpecReporter = require('jasmine-spec-reporter').SpecReporter;\n    ```\n\n    Imports the [jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter) packages's [main module](https://github.com/bcaudan/jasmine-spec-reporter/blob/master/package.json#L5) and takes a reference to the `SpecReporter` class in it.\n\n  - ```js\n    jasmine.getEnv().clearReporters();\n    ```\n\n    Clears out any existing reporters.\n\n  - ```js\n    jasmine.getEnv().addReporter(\n      new SpecReporter({\n        // add jasmine-spec-reporter\n        spec: {\n          displayPending: true,\n        },\n      })\n    );\n    ```\n\n    Adds a new instance of `SpecReporter` to jasmine and configures it to `displayPending` tests while running (they are also displayed in the `summary`).\n\n- Pending are any tests that have only name:\n  - Like `it('this test is pending')`.\n  - Or have the `pending('this test is pending')` anywhere in the implementation.\n  - These can be used as placeholders, guides, or tests that have the implementation not read for any other reason.\n\n## Expected result after config change\n\n```sh\n[nodemon] restarting due to changes...\n[nodemon] starting `node ./node_modules/.bin/jasmine`\nJasmine started\n\n  My first test\n    ✓ should run fine\n    * this test is pending\n\n**************************************************\n*                    Pending                     *\n**************************************************\n\n1) My first test this test is pending\n  No reason given\n\nExecuted 1 of 2 specs INCOMPLETE (1 PENDING) in 0.015 sec.\n[nodemon] clean exit - waiting for changes before the restart\n```\n\n- The `[nodemon]` lines are the output of the `nodemon` (node monitor) that monitors the files and specs in the code playground and whenever a change is detected it restarts jasmine.\n- The `./node_modules/.bin/jasmine` is the executable that runs jasmine.\n- The rest is what jasmine outputs to the console.\n- It should list the names of the `describe` test suites and each test case in them.\n\n## Links\n\nNode.js [https://nodejs.org/en/download/](https://nodejs.org/en/download/).\n\nJasmine getting started [https://jasmine.github.io/pages/getting_started.html](https://jasmine.github.io/pages/getting_started.html).\n\nJasmine config (for node.js) [https://jasmine.github.io/setup/nodejs.html](https://jasmine.github.io/setup/nodejs.html).","mdHtml":"<h2>Breakdown Jasmine config</h2>\n<ul>\n<li>\n<pre><code class=\"language-js\">&quot;helpers&quot;: [&quot;../spec/support/jasmine.config.js&quot;]\n</code></pre>\n<p>This line in the <code>jasmine.json</code> file basically tells jasmine to run some javascript before running the tests. In this case, it’s the <code>jasmine.config.js</code> file:</p>\n</li>\n<li>\n<p><code>jasmine.config.js</code></p>\n<ul>\n<li>\n<pre><code class=\"language-js\">const SpecReporter = require('jasmine-spec-reporter').SpecReporter;\n</code></pre>\n<p>Imports the <a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\">jasmine-spec-reporter</a> packages’s <a href=\"https://github.com/bcaudan/jasmine-spec-reporter/blob/master/package.json#L5\">main module</a> and takes a reference to the <code>SpecReporter</code> class in it.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">jasmine.getEnv().clearReporters();\n</code></pre>\n<p>Clears out any existing reporters.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">jasmine.getEnv().addReporter(\n  new SpecReporter({\n    // add jasmine-spec-reporter\n    spec: {\n      displayPending: true,\n    },\n  })\n);\n</code></pre>\n<p>Adds a new instance of <code>SpecReporter</code> to jasmine and configures it to <code>displayPending</code> tests while running (they are also displayed in the <code>summary</code>).</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Pending are any tests that have only name:</p>\n<ul>\n<li>Like <code>it('this test is pending')</code>.</li>\n<li>Or have the <code>pending('this test is pending')</code> anywhere in the implementation.</li>\n<li>These can be used as placeholders, guides, or tests that have the implementation not read for any other reason.</li>\n</ul>\n</li>\n</ul>\n<h2>Expected result after config change</h2>\n<pre><code class=\"language-sh\">[nodemon] restarting due to changes...\n[nodemon] starting `node ./node_modules/.bin/jasmine`\nJasmine started\n\n  My first test\n    ✓ should run fine\n    * this test is pending\n\n**************************************************\n*                    Pending                     *\n**************************************************\n\n1) My first test this test is pending\n  No reason given\n\nExecuted 1 of 2 specs INCOMPLETE (1 PENDING) in 0.015 sec.\n[nodemon] clean exit - waiting for changes before the restart\n</code></pre>\n<ul>\n<li>The <code>[nodemon]</code> lines are the output of the <code>nodemon</code> (node monitor) that monitors the files and specs in the code playground and whenever a change is detected it restarts jasmine.</li>\n<li>The <code>./node_modules/.bin/jasmine</code> is the executable that runs jasmine.</li>\n<li>The rest is what jasmine outputs to the console.</li>\n<li>It should list the names of the <code>describe</code> test suites and each test case in them.</li>\n</ul>\n<h2>Links</h2>\n<p>Node.js <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a>.</p>\n<p>Jasmine getting started <a href=\"https://jasmine.github.io/pages/getting_started.html\">https://jasmine.github.io/pages/getting_started.html</a>.</p>\n<p>Jasmine config (for node.js) <a href=\"https://jasmine.github.io/setup/nodejs.html\">https://jasmine.github.io/setup/nodejs.html</a>.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"migidbs4JL9UF6LQKOZyh"},"iteration":0,"hash":13,"saveVersion":20}],"summary":{"titleUpdated":true,"description":"In this lesson, we'll look see what Jasmine is. How does it help us? How to configure it?","tags":["Jasmine","Unit testing","Jasmine stand alone"],"title":"How to Use Jasmine to Run Unit Tests"}}