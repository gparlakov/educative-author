{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"When our applications deal with `Date`s we need to be able to test that interaction. One such way is using `jasmine.clock`.\n\nLet's see an example of a function using `Date` to calculate how many days ago a date was.\n\n## The Date-dependent function\n\nLooking at the `daysAgo` function logic in `src/days-ago.mjs` line by line:\n\n- ```js\n  const nowMilliseconds = Date.now();\n  ```\n\n  It starts with the current date in milliseconds. That's how many milliseconds have elapsed since 1 January 1970 UTC.\n\n- ```js\n  const dateMilliseconds = date.valueOf();\n  ```\n\n  This line taking the passed-in date value in milliseconds so they are both in comparable units - milliseconds.\n\n- ```js\n  const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n  ```\n\n  This line subtracts `date` from `now` and gets the difference in milliseconds.\n\n- ```js\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  ```\n\n  This line calculates how many milliseconds in a day. 1000 ms in a second \\* 60 seconds in a minute \\* 60 minutes in an hour \\* 24 hours in a day.\n\n- ```js\n  const daysAgo = agoMilliseconds / millisecondsInADay;\n  ```\n\n  This line divides the milliseconds ago with the milliseconds in a day getting how many days ago the date was\n\n- ```js\n  return Math.round(daysAgo);\n  ```\n\n  This line rounds the `daysAgo` number to the nearest integer because we don't want to get `This date was 7.1430499282 days ago` but `This date was 7 days ago`.\n\n## Testing the Date-dependent function\n\nLet's run that using the code playground below and break the test down after.","mdHtml":"<p>When our applications deal with <code>Date</code>s we need to be able to test that interaction. One such way is using <code>jasmine.clock</code>.</p>\n<p>Let’s see an example of a function using <code>Date</code> to calculate how many days ago a date was.</p>\n<h2>The Date-dependent function</h2>\n<p>Looking at the <code>daysAgo</code> function logic in <code>src/days-ago.mjs</code> line by line:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">const nowMilliseconds = Date.now();\n</code></pre>\n<p>It starts with the current date in milliseconds. That’s how many milliseconds have elapsed since 1 January 1970 UTC.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const dateMilliseconds = date.valueOf();\n</code></pre>\n<p>This line taking the passed-in date value in milliseconds so they are both in comparable units - milliseconds.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n</code></pre>\n<p>This line subtracts <code>date</code> from <code>now</code> and gets the difference in milliseconds.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const millisecondsInADay = 1000 * 60 * 60 * 24;\n</code></pre>\n<p>This line calculates how many milliseconds in a day. 1000 ms in a second * 60 seconds in a minute * 60 minutes in an hour * 24 hours in a day.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const daysAgo = agoMilliseconds / millisecondsInADay;\n</code></pre>\n<p>This line divides the milliseconds ago with the milliseconds in a day getting how many days ago the date was</p>\n</li>\n<li>\n<pre><code class=\"language-js\">return Math.round(daysAgo);\n</code></pre>\n<p>This line rounds the <code>daysAgo</code> number to the nearest integer because we don’t want to get <code>This date was 7.1430499282 days ago</code> but <code>This date was 7 days ago</code>.</p>\n</li>\n</ul>\n<h2>Testing the Date-dependent function</h2>\n<p>Let’s run that using the code playground below and break the test down after.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"9WYrdFmhkGyldsF8i7l2i"},"iteration":3,"hash":1,"saveVersion":8},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":2664727623584,"maxId":1584740981587,"children":[{"id":4796631343508,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":2477651585535,"module":"support","leaf":false,"collapsed":true,"children":[{"id":9398071475903,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2477651585535}],"parentId":4796631343508},{"id":2664727623584,"module":"days-ago.spec.mjs","leaf":true,"data":{"content":"\nimport { daysAgo } from '/__src__/days-ago.mjs';\n\ndescribe('daysAgo', () => {\n  it('should return 7 for a date 7 days ago', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 6 and 3/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 7 and 1/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4796631343508}],"parentId":0},{"id":1584740981587,"module":"src","leaf":false,"collapsed":true,"children":[{"id":212919307387,"module":"days-ago.mjs","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexport function daysAgo(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = agoMilliseconds / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":1584740981587}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/2.10.testing-dates","judge":{"judgeActive":false}},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"codePanelHeight":"600","comp_id":"lsnKvwYHuREPDUdM2heY-","caption":"Testing the Date-dependent function"},"iteration":2,"hash":2,"saveVersion":12},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown\n\nLooking at `spec/days-ago.spec.mjs` and the first test `'should return 7 for a date 7 days ago'`s logic line-by-line:\n\n- ```js\n  const clock = jasmine.clock();\n  ```\n\n  This line gets an instance of the [Clock](https://jasmine.github.io/api/2.6/Clock.html).\n\n- ```js\n  clock.install().mockDate(new Date(2021, 8, 10));\n  ```\n\n  This installs that (aka activate it) and sets a specific date - Sep 10, 2021.\n  > Note: the months in the Date constructor begin from 0 e.g.\n  >\n  > - 0 - Jan, 1 - Feb ... **8 - Sep**\n\n- ```js\n  // act\n  const ago = daysAgo(new Date(2021, 8, 3));\n  ```\n\n  This line create a `Date` instance for Sep 3, 2021 `new Date(2021, 8, 3)`. Now we have 2 dates that are 7 days apart - Sep 10 and Sep 3 and we get the result from applying the function on Sep 3, 2021 - `ago`.\n\n- ```js\n  // assert\n  expect(ago).toBe(7);\n  ```\n\n  Our assertion checks that `ago` is indeed 7.\n\n- ```js\n  clock.uninstall();\n  ```\n\n  We need to clean up the installed clock to make sure we don't influence other tests.\n\n  _In the next lesson, we'll talk about how to move such actions and clean up out of the tests themselves._\n\n### The 6 and 3/4 days ago test\n\nIn the `'should return 7 for a date 6 and 3/4 days ago'` test we take a date that's 6 and 18 hours ago. The requirement is that we still get 7 as the output for such input.\n\n- ```js\n  // act\n  const ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n  ```\n\n  That's Sep 3, 2021, 6:00:00AM which is 6 days and 18 hours before Sep 10, 2021, 00:00:00 AM.\n  - The 0,0,0 is assumed when we skip it in the Date constructor i.e. the following two are equivalent.\n\n  - ```js\n    new Date(2021, 8, 3, 0, 0, 0);\n    ```\n\n  - ```js\n    new Date(2021, 8, 3);\n    ```\n\n- ```js\n  // assert\n  expect(ago).toBe(7);\n  ```\n\n  This line asserts the expectation - `ago` is still 7 with a date 6 and 3/4 days ago.\n\n### The 7 and 1/4 days ago test\n\nIn the `'should return 7 for a date 7 and 1/4 days ago'` test we take a date that's 7 days and 6 hours ago. The requirement is that we still get 7 as the output for such input.\n\n- ```js\n  // act\n  const ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n  ```\n\n  That's Sep 2, 2021, 6:00:00PM which is 7 days and 6 hours before Sep 10, 2021, 00:00:00 AM.\n  \n- ```js\n  // assert\n  expect(ago).toBe(7);\n  ```\n\n  This line asserts the expectation - `ago` is still 7 with a date 7 and 1/4 days ago.\n\n## Exercise\n\nFor this exercise, we'll use a very similar function `daysUntil` that calculates how many days until a date in the future. See it in `src/days-until.mjs` below. The only difference is that we calculate the difference from today until the date (while it was reversed previously). Go ahead and exercise - replace the `pending` calls with the logic and expect a hint below.\n","mdHtml":"<h2>Breakdown</h2>\n<p>Looking at <code>spec/days-ago.spec.mjs</code> and the first test <code>'should return 7 for a date 7 days ago'</code>s logic line-by-line:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">const clock = jasmine.clock();\n</code></pre>\n<p>This line gets an instance of the <a href=\"https://jasmine.github.io/api/2.6/Clock.html\">Clock</a>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">clock.install().mockDate(new Date(2021, 8, 10));\n</code></pre>\n<p>This installs that (aka activate it) and sets a specific date - Sep 10, 2021.</p>\n<blockquote>\n<p>Note: the months in the Date constructor begin from 0 e.g.</p>\n<ul>\n<li>0 - Jan, 1 - Feb … <strong>8 - Sep</strong></li>\n</ul>\n</blockquote>\n</li>\n<li>\n<pre><code class=\"language-js\">// act\nconst ago = daysAgo(new Date(2021, 8, 3));\n</code></pre>\n<p>This line create a <code>Date</code> instance for Sep 3, 2021 <code>new Date(2021, 8, 3)</code>. Now we have 2 dates that are 7 days apart - Sep 10 and Sep 3 and we get the result from applying the function on Sep 3, 2021 - <code>ago</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nexpect(ago).toBe(7);\n</code></pre>\n<p>Our assertion checks that <code>ago</code> is indeed 7.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">clock.uninstall();\n</code></pre>\n<p>We need to clean up the installed clock to make sure we don’t influence other tests.</p>\n<p><em>In the next lesson, we’ll talk about how to move such actions and clean up out of the tests themselves.</em></p>\n</li>\n</ul>\n<h3>The 6 and 3/4 days ago test</h3>\n<p>In the <code>'should return 7 for a date 6 and 3/4 days ago'</code> test we take a date that’s 6 and 18 hours ago. The requirement is that we still get 7 as the output for such input.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">// act\nconst ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n</code></pre>\n<p>That’s Sep 3, 2021, 6:00:00AM which is 6 days and 18 hours before Sep 10, 2021, 00:00:00 AM.</p>\n<ul>\n<li>\n<p>The 0,0,0 is assumed when we skip it in the Date constructor i.e. the following two are equivalent.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">new Date(2021, 8, 3, 0, 0, 0);\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-js\">new Date(2021, 8, 3);\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nexpect(ago).toBe(7);\n</code></pre>\n<p>This line asserts the expectation - <code>ago</code> is still 7 with a date 6 and 3/4 days ago.</p>\n</li>\n</ul>\n<h3>The 7 and 1/4 days ago test</h3>\n<p>In the <code>'should return 7 for a date 7 and 1/4 days ago'</code> test we take a date that’s 7 days and 6 hours ago. The requirement is that we still get 7 as the output for such input.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">// act\nconst ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n</code></pre>\n<p>That’s Sep 2, 2021, 6:00:00PM which is 7 days and 6 hours before Sep 10, 2021, 00:00:00 AM.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nexpect(ago).toBe(7);\n</code></pre>\n<p>This line asserts the expectation - <code>ago</code> is still 7 with a date 7 and 1/4 days ago.</p>\n</li>\n</ul>\n<h2>Exercise</h2>\n<p>For this exercise, we’ll use a very similar function <code>daysUntil</code> that calculates how many days until a date in the future. See it in <code>src/days-until.mjs</code> below. The only difference is that we calculate the difference from today until the date (while it was reversed previously). Go ahead and exercise - replace the <code>pending</code> calls with the logic and expect a hint below.</p>\n","comp_id":"IhCNXrV4e8wcB0fMg8i5e"},"iteration":2,"hash":3,"saveVersion":9},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":false,"hideOutputUrl":false,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":null,"maxId":2568942424085,"children":[{"id":934070787233,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":8694938458869,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8082331869480,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":3085350502890,"module":"days-until.spec.mjs","leaf":true,"data":{"content":"\nimport { daysUntil } from '/__src__/days-until.mjs';\n\ndescribe('daysUntil', () => {\n  it('should return 5 for a date 5 days in the future', () => {\n    pending('replace with logic for 5 days in the future');\n  });\n\n  it('should return 5 for a date 5 and 1/4 days in the future', () => {\n    pending('replace with logic for 5 and 1/4 days in the future');\n\n  });\n\n  it('should return 5 for a date 4 and 3/4 days in the future', () => {\n    pending('replace with logic for 4 and 3/4 days in the future');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":2568942424085,"module":"src","leaf":false,"collapsed":true,"children":[{"id":283184159791,"module":"days-until.mjs","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexport function daysUntil(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const until = dateMilliseconds - nowMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = until / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/2.10.testing-dates-exercise"},"comp_id":"VL08PO-z6450PbId0TkBd"},"iteration":5,"hash":10,"saveVersion":1},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\n  it('should return 5 for a date 5 days in the future', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysUntil(new Date(2021, 8, 15));\n\n    // assert\n    expect(ago).toBe(5);\n\n    clock.uninstall();\n  });\n```","mdHtml":"<pre><code class=\"language-js\">  it('should return 5 for a date 5 days in the future', () =&gt; {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysUntil(new Date(2021, 8, 15));\n\n    // assert\n    expect(ago).toBe(5);\n\n    clock.uninstall();\n  });\n</code></pre>\n","showHintText":"Show Hint for `should return 5 for a date 5 days in the future`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"ztC5awyCY1CdhhxmUkut7"},"iteration":5,"hash":4,"saveVersion":4},{"type":"SpoilerEditor","mode":"view","content":{"version":"3.0","text":"```js\n  it('should return 5 for a date 5 and 1/4 days in the future', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysUntil(new Date(2021, 8, 15, 6, 0, 0));\n\n    // assert\n    expect(ago).toBe(5);\n\n    clock.uninstall();\n  });\n```","mdHtml":"<pre><code class=\"language-js\">  it('should return 5 for a date 5 and 1/4 days in the future', () =&gt; {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysUntil(new Date(2021, 8, 15, 6, 0, 0));\n\n    // assert\n    expect(ago).toBe(5);\n\n    clock.uninstall();\n  });\n</code></pre>\n","showHintText":"Show Hint for `should return 5 for a date 4 and 3/4 days in the future`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"gEwL29vHBn2NBwwLjXW5I","isCopied":true},"saveVersion":5,"iteration":3,"hash":5},{"type":"SpoilerEditor","mode":"view","content":{"version":"3.0","text":"```js\n  it('should return 5 for a date 4 and 3/4 days in the future', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysUntil(new Date(2021, 8, 14, 18, 0, 0));\n\n    // assert\n    expect(ago).toBe(5);\n\n    clock.uninstall();\n  });\n```","mdHtml":"<pre><code class=\"language-js\">  it('should return 5 for a date 4 and 3/4 days in the future', () =&gt; {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysUntil(new Date(2021, 8, 14, 18, 0, 0));\n\n    // assert\n    expect(ago).toBe(5);\n\n    clock.uninstall();\n  });\n</code></pre>\n","showHintText":"Show Hint for `should return 5 for a date 4 and 3/4 days in the future`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"L5I1dyxBTvZlBQ4y9EvMa","isCopied":true},"saveVersion":5,"iteration":4,"hash":6},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Node js and Date\n\nIncidentally, the same code with a bit of different importing of the functions works in the node.js environment. We've included the example from above plus the exercise code in the code playground below - go ahead and try it:\n","mdHtml":"<h2>Node js and Date</h2>\n<p>Incidentally, the same code with a bit of different importing of the functions works in the node.js environment. We’ve included the example from above plus the exercise code in the code playground below - go ahead and try it:</p>\n","cursorPosition":252,"comp_id":"rHEdnHnxpkbtc_430Rib6"},"iteration":5,"hash":7,"saveVersion":2},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":2376228381610,"maxId":6811872313358,"children":[{"id":1230163278449,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":1000157119126,"module":"support","leaf":false,"collapsed":true,"children":[{"id":4009263608766,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n    summary: {\r\n      displayPending: false\r\n    }\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":1000157119126},{"id":3466354737364,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":1000157119126}],"parentId":1230163278449}],"parentId":0},{"id":6811872313358,"module":"src","leaf":false,"collapsed":true,"children":[{"id":9920493752426,"module":"days-ago.js","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexports.daysAgo = function(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = agoMilliseconds / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6811872313358},{"id":2376228381610,"module":"days-ago.spec.js","leaf":true,"data":{"content":"const { daysAgo } = require('./days-ago.js');\n\ndescribe('daysAgo', () => {\n  it('should return 7 for a date 7 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 6 and 3/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 7 and 1/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6811872313358},{"id":3403273328404,"module":"days-until.js","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexports.daysUntil = function (date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const until = dateMilliseconds - nowMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = until / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6811872313358},{"id":1472819216999,"module":"days-until.spec.js","leaf":true,"data":{"content":"const { daysUntil } = require('./days-until.js');\n\ndescribe('daysUntil', () => {\n  it('should return 5 for a date 5 days in the future', () => {\n    pending('replace with logic for 5 days in the future');\n  });\n\n  it('should return 5 for a date 5 and 1/4 days in the future', () => {\n    pending('replace with logic for 5 and 1/4 days in the future');\n\n  });\n\n  it('should return 5 for a date 4 and 3/4 days in the future', () => {\n    pending('replace with logic for 4 and 3/4 days in the future');\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6811872313358}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/2.10.testing-dates-exercise-nodejs"},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"eMKY6hLLdvc9_-ytF4kX8"},"iteration":2,"hash":8,"saveVersion":4},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"\n## Links\n\nRead more about the clock's capabilities at Jasmine [Docs](https://jasmine.github.io/tutorials/your_first_suite#section-Jasmine_Clock).","mdHtml":"<h2>Links</h2>\n<p>Read more about the clock’s capabilities at Jasmine <a href=\"https://jasmine.github.io/tutorials/your_first_suite#section-Jasmine_Clock\">Docs</a>.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"SkpZ6C_C022dJ-qaKjkOJ"},"iteration":2,"hash":9,"saveVersion":2}],"summary":{"description":"In this lesson, we'll look into testing functions that depend on the date and time directly. For the browser and Node.js context.","tags":["jasmine.clock","Date","Javascript Unit test"],"titleUpdated":true}}