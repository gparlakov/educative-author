{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## Unit testing is HARD?\n\n> Where to start? What to test? How to test it? ü§î ü§î\n\n> Tests are a waste of time!‚è≥‚è≤\n\n> There's so much code already and no unit tests. It's impossible to start now! üò†üò™\n\nQuestions and doubts such as the above are to be expected (I've been through all of them). Let's face it - if you **chose** to start **unit testing** there will be a period of uncertainty and confusion.\n\n## The Unit testing journey\n\nThe journey to becoming a confident unit tester is one that leads to:\n\n- confidence in the code you write\n- discovering bugs long before QA or your users do\n- understanding what to test and what to skip\n- grokking one's own code better (yes your own code can surprise you)\n- understanding code authored by others\n- feeling at home unit testing anything from a function to a full-blown SPA component\n\nThat's a journey anyone can take on their own. Or perhaps we can start it together via this course\n\n## Confident unit testing\n\nI have some experience and knowledge to share that can hopefully help you along **your** journey to becoming **confident** in **unit testing**. We'll take it step-by-step and do lots of code and examples on the way.\n\n## To the code!\n\nLet's go and see what this unit testing feels like with an example in the next lesson!\n\n## Goal\n\nThe goal is to get a feeling of what a test suite looks like. Don't worry if you don't understand something - we'll dive deep into every aspect of the unit tests in the lessons ahead.\n\n## The function\n\nThe function is an implementation or polyfill for the `Array` `map` function. It\n\n- takes an array and a function (projection) as input\n- passes every member of the array as input to the function\n- creates a new array with the results from the function call\n\n([for details about `map` see MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map))\n\n## Example\n\n```js\nfunction map(arr, cb) { ... }\n\nvar numbers = [1,2,3];\nvar doubled = map(numbers, x => x * 2);\n// doubled === [2,4,6];\n```\n\nIn the code above there is an example of taking the `numbers` input and using the `map` function to double each member of that array. Starting with `[1, 2, 3]` and resulting in an output of `[2, 4, 6]`\n\n## Code playground\n\nThere is an example of unit testing `map` function in the code playground below.\n\n- How to run?\n  Just press the `Run` button below the code and check out the `Terminal` below it.\n\n- Changes?\n  Press `Run` if you made some changes and want to see how they affect the outcome.\n","mdHtml":"<h2>Unit testing is HARD?</h2>\n<blockquote>\n<p>Where to start? What to test? How to test it? ü§î ü§î</p>\n</blockquote>\n<blockquote>\n<p>Tests are a waste of time!‚è≥‚è≤</p>\n</blockquote>\n<blockquote>\n<p>There‚Äôs so much code already and no unit tests. It‚Äôs impossible to start now! üò†üò™</p>\n</blockquote>\n<p>Questions and doubts such as the above are to be expected (I‚Äôve been through all of them). Let‚Äôs face it - if you <strong>chose</strong> to start <strong>unit testing</strong> there will be a period of uncertainty and confusion.</p>\n<h2>The Unit testing journey</h2>\n<p>The journey to becoming a confident unit tester is one that leads to:</p>\n<ul>\n<li>confidence in the code you write</li>\n<li>discovering bugs long before QA or your users do</li>\n<li>understanding what to test and what to skip</li>\n<li>grokking one‚Äôs own code better (yes your own code can surprise you)</li>\n<li>understanding code authored by others</li>\n<li>feeling at home unit testing anything from a function to a full-blown SPA component</li>\n</ul>\n<p>That‚Äôs a journey anyone can take on their own. Or perhaps we can start it together via this course</p>\n<h2>Confident unit testing</h2>\n<p>I have some experience and knowledge to share that can hopefully help you along <strong>your</strong> journey to becoming <strong>confident</strong> in <strong>unit testing</strong>. We‚Äôll take it step-by-step and do lots of code and examples on the way.</p>\n<h2>To the code!</h2>\n<p>Let‚Äôs go and see what this unit testing feels like with an example in the next lesson!</p>\n<h2>Goal</h2>\n<p>The goal is to get a feeling of what a test suite looks like. Don‚Äôt worry if you don‚Äôt understand something - we‚Äôll dive deep into every aspect of the unit tests in the lessons ahead.</p>\n<h2>The function</h2>\n<p>The function is an implementation or polyfill for the <code>Array</code> <code>map</code> function. It</p>\n<ul>\n<li>takes an array and a function (projection) as input</li>\n<li>passes every member of the array as input to the function</li>\n<li>creates a new array with the results from the function call</li>\n</ul>\n<p>(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">for details about <code>map</code> see MDN</a>)</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\">function map(arr, cb) { ... }\n\nvar numbers = [1,2,3];\nvar doubled = map(numbers, x =&gt; x * 2);\n// doubled === [2,4,6];\n</code></pre>\n<p>In the code above there is an example of taking the <code>numbers</code> input and using the <code>map</code> function to double each member of that array. Starting with <code>[1, 2, 3]</code> and resulting in an output of <code>[2, 4, 6]</code></p>\n<h2>Code playground</h2>\n<p>There is an example of unit testing <code>map</code> function in the code playground below.</p>\n<ul>\n<li>\n<p>How to run?\nJust press the <code>Run</code> button below the code and check out the <code>Terminal</code> below it.</p>\n</li>\n<li>\n<p>Changes?\nPress <code>Run</code> if you made some changes and want to see how they affect the outcome.</p>\n</li>\n</ul>\n","cursorPosition":0,"comp_id":"DWDjG01_eBOvy7TjJ7XzZ"},"iteration":1,"hash":1,"saveVersion":40},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"canAddNpmPackages":true,"judge":{"judgeDisabled":false,"judgeActive":false,"evaluationContent":"import React from 'react';\r\nimport { shallow, configure } from 'enzyme';\r\nimport Adapter from 'enzyme-adapter-react-16';\r\n\r\nconfigure({ adapter: new Adapter() });\r\n\r\nimport HelloWorld from './app';\r\n\r\nvar TestResult = function() {\r\n    this.succeeded = false;\r\n    this.reason = \"\";\r\n    this.input = \"\";\r\n    this.expected_output = \"\";\r\n    this.actual_output = \"\";\r\n}\r\n\r\nexport const executeTests = function() {\r\n\r\n  var results = [];\r\n\r\n  result = new TestResult();\r\n  result.input = 'HelloWorld Component';\r\n  result.expected_output = \"span containing text 'Hello World'\"\r\n\r\n  let wrapper = shallow(<HelloWorld />);\r\n\r\n  // Call your Challenge function here.\r\n\r\n  let type = wrapper.type();\r\n  let testSuccessful = true;\r\n  let failureReason;\r\n\r\n  if (type !== 'span') {\r\n    testSuccessful = false;\r\n    failureReason = \"You need to render exactly one span HTML element\";\r\n  } else if (wrapper.props().children != \"Hello World\") {\r\n     testSuccessful = false;\r\n     failureReason = \"You have rendered wrong message in your span element\";\r\n  }\r\n\r\n  result.actual_output = wrapper.html();\r\n\r\n  if (testSuccessful) {\r\n    result.succeeded = true;\r\n    result.reason = \"Succeeded\"\r\n  } else {\r\n    result.succeeded = false;\r\n    result.reason = failureReason;\r\n  }\r\n\r\n  results.push(result);\r\n\r\n  return results;\r\n}\r\n","hintsContent":[],"solutionContent":"","showSolution":false,"exerciseTabsVisible":false,"version":"1.1"},"module":"/","id":0,"maxId":14,"selectedId":5,"children":[{"children":[{"id":5,"parentId":4,"leaf":true,"module":"map.js","data":{"content":"/**\r\n * Map function (A replacement for Array.prototype.map) that takes an array and maps over its items and returns a new array\r\n * @param {Array} arr the array to iterate over and project each item via the projection arg\r\n * @param {(x: any) => any} projection the projection function which receives an item and returns an item\r\n */\r\nfunction map(arr, projection) {\r\n    const result = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const next = arr[i];\r\n        result.push(projection(next));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nmodule.exports = map;\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":null}},{"id":6,"parentId":4,"leaf":true,"module":"map.spec.js","data":{"content":"const map = require('./map');\r\n\r\ndescribe('map', () => {\r\n  it('should double the array', () => {\r\n    expect(map([1, 2, 3], (x) => 2 * x)).toEqual([2, 4, 6]);\r\n  });\r\n\r\n  it('count string lengths', () => {\r\n    expect(map(['my', 'yours', 'a veeeery long string'], x => x.length)).toEqual([2, 5, 21]);\r\n  });\r\n\r\n   it('should work with an empty arrayyyyyyy', () => {\r\n    expect(map([], x => 2 * x)).toEqual([]);\r\n  });\r\n\r\n  it('should throw for a null array', () => {\r\n    expect(() => map(null, () => {})).toThrow();\r\n  });\r\n});\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":null}}],"collapsed":false,"id":4,"leaf":false,"module":"src","parentId":0},{"children":[{"children":[{"id":10,"parentId":9,"leaf":true,"module":"jasmine.json","data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":null}},{"id":11,"parentId":9,"leaf":true,"module":"jasmine.config.js","data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":null}}],"collapsed":false,"id":9,"leaf":false,"module":"support","parentId":8}],"collapsed":false,"id":8,"leaf":false,"module":"spec","parentId":0}]},"comp_id":"Bl9a6l1dHLH1Lz3AHF-gq","caption":"A function test suite.","codePanelHeight":"300","dockerJob":{"key":"AXWitlQm7tXzu-YsHjbJ6","name":"Live jasmine in unit-testing-course folder","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true}},"iteration":2,"hash":6,"saveVersion":33},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Output\n\nExpect to see info about four passing tests in the `Terminal` output of the code playground above.\n\n## Breakdown\n\nWhat we see in the code widget above is a minimal test suite comprising of 2 files\n\n- `src/map.js` - houses the implementation of the function. It takes an **array** and a **function** then applies the function to **each member** of the array and creates a **new array** with the **results**.\n- `src/map.spec.js` - houses the tests.\n  - `const map = require('./map');` - imports the `map` function in the test module so tests can \"see\" it\n  - `describe` is a function that denotes a test suite for Jasmine (the tool that runs the tests). It has a **name** and a **function implementation**.\n  - `it` is a function that denotes a test case. It has a **name** and a **function implementation**.\n  - There are 4 unit tests cases covered here:\n    - Doubling each array's member.\n    - Extracting the lengths of each string in an array.\n    - Verifying the `map` works with empty arrays.\n    - Verifying that `map` throws for an empty array\n  - Each test case follows a simple pattern - get an output from the function under test and compare it with the expected.\n    - The output compared is often referred to as the `actual` output and compared to the `expected` output - that's the **essence of unit testing**.\n- `spec/support` folder contains the configuration for Jasmine that we'll get into later.\n\n## Experiment\n\nExperiment with the code widget: edit files and hit `[Run]` to see how they are reflected in the output.\n\nFor example:\n\n- In `src/map.spec.js` change the first `it` call to `fit` and run. Notice how just that one test runs and the rest are skipped.\n- In `src/map.js` simulate a bug/regression by changing the implementation and `Run`. Notice how the tests are red effectively \"catching\" the bug/regression.\n  - At line 8 of `src/map.js` change `let i = 0` to `let i = 1` and see failing tests.\n- Anything else you might think of - please go ahead and experiment. You can always revert back to the original code too - using the `[Reset]` button.\n","mdHtml":"<h2>Output</h2>\n<p>Expect to see info about four passing tests in the <code>Terminal</code> output of the code playground above.</p>\n<h2>Breakdown</h2>\n<p>What we see in the code widget above is a minimal test suite comprising of 2 files</p>\n<ul>\n<li><code>src/map.js</code> - houses the implementation of the function. It takes an <strong>array</strong> and a <strong>function</strong> then applies the function to <strong>each member</strong> of the array and creates a <strong>new array</strong> with the <strong>results</strong>.</li>\n<li><code>src/map.spec.js</code> - houses the tests.\n<ul>\n<li><code>const map = require('./map');</code> - imports the <code>map</code> function in the test module so tests can ‚Äúsee‚Äù it</li>\n<li><code>describe</code> is a function that denotes a test suite for Jasmine (the tool that runs the tests). It has a <strong>name</strong> and a <strong>function implementation</strong>.</li>\n<li><code>it</code> is a function that denotes a test case. It has a <strong>name</strong> and a <strong>function implementation</strong>.</li>\n<li>There are 4 unit tests cases covered here:\n<ul>\n<li>Doubling each array‚Äôs member.</li>\n<li>Extracting the lengths of each string in an array.</li>\n<li>Verifying the <code>map</code> works with empty arrays.</li>\n<li>Verifying that <code>map</code> throws for an empty array</li>\n</ul>\n</li>\n<li>Each test case follows a simple pattern - get an output from the function under test and compare it with the expected.\n<ul>\n<li>The output compared is often referred to as the <code>actual</code> output and compared to the <code>expected</code> output - that‚Äôs the <strong>essence of unit testing</strong>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>spec/support</code> folder contains the configuration for Jasmine that we‚Äôll get into later.</li>\n</ul>\n<h2>Experiment</h2>\n<p>Experiment with the code widget: edit files and hit <code>[Run]</code> to see how they are reflected in the output.</p>\n<p>For example:</p>\n<ul>\n<li>In <code>src/map.spec.js</code> change the first <code>it</code> call to <code>fit</code> and run. Notice how just that one test runs and the rest are skipped.</li>\n<li>In <code>src/map.js</code> simulate a bug/regression by changing the implementation and <code>Run</code>. Notice how the tests are red effectively ‚Äúcatching‚Äù the bug/regression.\n<ul>\n<li>At line 8 of <code>src/map.js</code> change <code>let i = 0</code> to <code>let i = 1</code> and see failing tests.</li>\n</ul>\n</li>\n<li>Anything else you might think of - please go ahead and experiment. You can always revert back to the original code too - using the <code>[Reset]</code> button.</li>\n</ul>\n","comp_id":"leCbb8aIwF8Qpi_OPoZXZ","cursorPosition":2033},"iteration":0,"hash":7,"saveVersion":19}],"summary":{"title":"What's This Jasmine Unit Testing Course All About?","description":"We'll acknowledge the confusion and hardship of unit testing, and talk about the journey to becoming confident in unit testing. We'll showcase the unit testing capabilities that Jasmine affords via an example of a function and its unit test suite. ","tags":["Javascript unit test","overview","unit test example"],"titleUpdated":true}}