{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## Browser API\nUp until now, we've been running Jasmine and the unit tests in a node.js environment. That won't be enough if we are developing and maintaining a browser application.\n\nLet's say there's a functionality in our app that relies on a browser API like [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) \n> `requestAnimationFrame(callback)` is a way to tell the browser: \"Hey when you are ready with the DOM calculations but before you paint that, let me have a chance to run some js (the callback).\"\n\nIn the next code playground, there's an attempt to use the way we've been doing Jasmine till now. Try running it.\n\n","mdHtml":"<h2>Browser API</h2>\n<p>Up until now, we’ve been running Jasmine and the unit tests in a node.js environment. That won’t be enough if we are developing and maintaining a browser application.</p>\n<p>Let’s say there’s a functionality in our app that relies on a browser API like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">requestAnimationFrame</a></p>\n<blockquote>\n<p><code>requestAnimationFrame(callback)</code> is a way to tell the browser: “Hey when you are ready with the DOM calculations but before you paint that, let me have a chance to run some js (the callback).”</p>\n</blockquote>\n<p>In the next code playground, there’s an attempt to use the way we’ve been doing Jasmine till now. Try running it.</p>\n","comp_id":"kKLezqf9Nfop9SqetOaSL"},"iteration":1,"hash":1,"saveVersion":15},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"mobile","codeContents":{"module":"/","id":0,"selectedId":2092354230610,"maxId":5726907215234,"children":[{"id":5768686736416,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":68125131798,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8710364327593,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":68125131798},{"id":3745995408572,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":68125131798}],"parentId":5768686736416}],"parentId":0},{"id":4611430443671,"module":"src","leaf":false,"collapsed":true,"children":[{"id":2092354230610,"module":"my.spec.js","leaf":true,"data":{"content":"describe(\"test\", () => {\r\n    it(\"should test a browser specific API\", () => {\r\n        expect(requestAnimationFrame).toBeDefined();\r\n    })\r\n})\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4611430443671}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/jasmine-standalone","judge":{"judgeActive":false}},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"xbcCPoyAiadMZxCSu01Vy","caption":"Fails to run - no browser API"},"iteration":2,"hash":7,"saveVersion":13},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown\nLooking in `src/my.spec.js` there's this line:\n \n `expect(requestAnimationFrame).toBeDefined();` tries to verify that `requestAnimationFrame` is defined.\n\nIt fails, saying - \"There's no such thing as `requestAnimationFrame`, I've no idea what you are talking about!\"\n\nAnd no wonder because `jasmine` is running in the context of `node.js` and in there `requestAnimationFrame` simply does not exist. \n\nTo run that test we need to run Jasmine in the context of a browser.\n\n## Jasmine in browser\nThere is an npm package that allows running Jasmine in the context of a browser. \n\n[jasmine-browser-runner](https://www.npmjs.com/package/jasmine-browser-runner) supports a variety of browsers including chrome headless which, incidentally, is what is being used in the code playground below.","mdHtml":"<h2>Breakdown</h2>\n<p>Looking in <code>src/my.spec.js</code> there’s this line:</p>\n<p><code>expect(requestAnimationFrame).toBeDefined();</code> tries to verify that <code>requestAnimationFrame</code> is defined.</p>\n<p>It fails, saying - “There’s no such thing as <code>requestAnimationFrame</code>, I’ve no idea what you are talking about!”</p>\n<p>And no wonder because <code>jasmine</code> is running in the context of <code>node.js</code> and in there <code>requestAnimationFrame</code> simply does not exist.</p>\n<p>To run that test we need to run Jasmine in the context of a browser.</p>\n<h2>Jasmine in browser</h2>\n<p>There is an npm package that allows running Jasmine in the context of a browser.</p>\n<p><a href=\"https://www.npmjs.com/package/jasmine-browser-runner\">jasmine-browser-runner</a> supports a variety of browsers including chrome headless which, incidentally, is what is being used in the code playground below.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"xUrxp8PGFXkdbrQ3RjugV"},"iteration":0,"hash":8,"saveVersion":8},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":"300","selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":4277388488060,"maxId":1353248631320,"children":[{"id":1353248631320,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":4593889032200,"module":"support","leaf":false,"collapsed":true,"children":[{"id":6229008131136,"module":"jasmine-browser.json","leaf":true,"data":{"content":"{\n  \"srcDir\": \"src\",\n  \"srcFiles\": [\n    \"**/*.?(m)js\"\n  ],\n  \"specDir\": \"spec\",\n  \"specFiles\": [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  \"random\": true,\n  \"stopSpecOnExpectationFailure\": false,\n  \"browser\": {\n    \"name\": \"headlessChrome\"\n  },\n  \"helpers\": [\n    \"helpers/**/*.?(m)js\"\n  ]\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4593889032200}],"parentId":1353248631320},{"id":4277388488060,"module":"my.spec.js","leaf":true,"data":{"content":"describe('test', () => {\n    it('should access browser apis', () => {\n        expect(requestAnimationFrame).toBeDefined();\n    })\n})\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":1353248631320}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/jasmine-browser","judge":{"judgeActive":false}},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Successfully runs in browser","comp_id":"dqLJkQFGGqsgFoC4UANlx"},"iteration":2,"hash":4,"saveVersion":23},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown Jasmine in browser\n\nLooking at `spec/my.spec.js` we see the exact same line `expect(requestAnimationFrame).toBeDefined();` but this time the test **passes**.\n\nThe difference is that we are running the `jasmine-browser-runner runSpecs`. It starts a browser does some magic so the tests end up in its belly and eventually get run :)\n\n## Different tests folder\n\nYou probably noticed that the `.spec.js` file is no longer in `/src` folder and moved in the `/spec` folder. That's aligned with the default configuration of `jasmine-browser-runner`. Since the spec files do not need to be part of the browser app bundle that gets shipped to the end-user, having them in a separate folder makes sense. We don't want the users to see the tests - just the app.\n\nThis is configurable using the `spec` and `src` properties in the configuration file.\n\n## Configuring Jasmine in the browser\n\nHere's the order of precedence for the config file:\n\n- If `--config` argument was provided as a command-line parameter that takes precedence e.g. `--config=my-config.json` or `--config=my-config.js`.\n- If not, then `spec/support/jasmine-browser.js` is attempted.\n- Finally, `spec/support/jasmine-browser.json` is attempted.\n\nWe are using `spec/support/jasmine-browser.js` because we'd like to add a specific reporter. That config file looks like this:\n\n```js\nconst specReporter = require('jasmine-spec-reporter').SpecReporter;\n\nmodule.exports = {\n  srcDir: 'src',\n  srcFiles: ['**/*.?(m)js'],\n  specDir: 'spec',\n  specFiles: ['**/*[sS]pec.?(m)js'],\n  helpers: ['helpers/**/*.?(m)js'],\n  random: true,\n  stopSpecOnExpectationFailure: false,\n  reporters: [new specReporter()],\n  browser: {\n    name: 'headlessChrome',\n  },\n};\n```\n\nIt has similarities to `jasmine.json` we were using earlier plus some changes:\n\n- ```js\n  const specReporter = require('jasmine-spec-reporter').SpecReporter;\n  ```\n\n  This imports the `jasmine-spec-reporter` to use in the config below.\n\n- ```js\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  ```\n\n  This configures where the app files live - we need those to be able to test them. In this case any file with a name ending with a `.js` or `.mjs` in `/src` or any of its sub-folders.\n\n- ```js\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  ```\n\n  These properties configure where the test files live. In this case any file with a name ending with `.Spec.js` or `.spec.js` or `.spec.mjs` or `.Spec.mjs` in `/spec` or any of its sub-folders.\n\n- ```js\n  random: true,\n  ```\n\n  Same as Jasmine - whether or not to randomize the order of execution of tests.\n\n- ```js\n  stopSpecOnExpectationFailure: false;\n  ```\n\n  Whether or not to stop the execution on the first failure or run all tests and report all failures.\n\n- ```js\n  browser: {\n    name: 'headlessChrome';\n  }\n  ```\n\n  Which browser to use to run the tests. Requires the system to have that browser installed and available on the `$PATH` as well as a web driver for it. Example for chrome and chrome headless - [chromedriver](https://chromedriver.chromium.org/downloads).\n\n- ```js\n  reporters: [new specReporter()];\n  ```\n\n  This creates a new instance of the `specReporter`, an object that conforms to the Jasmine reporter interface _(that is - it has the same methods as the standard Jasmine [ConsoleReporter](https://github.com/jasmine/jasmine-npm/blob/6d31aec40ac55a8356d112bef3bac685f6c00759/lib/reporters/console_reporter.js))_. And uses that as the sole reporter.\n\n  > Reporter is a piece of code that takes the results of a suite and presents them by logging out to the console for example. [Jasmine Reporter docs](https://jasmine.github.io/tutorials/custom_reporter)\n\n- ```js\n  helpers: ['helpers/**/*.?(m)js'];\n  ```\n  \n  Helpers are scripts that run before the main body of tests in the context of the browser.\n\n### Loading files in Jasmine Browser Runner\n\nThe order of loading files in the browser is:\n\n1. The `srcFiles` are loaded and executed.\n2. The `helpers` files are loaded and executed.\n3. The `specFiles` files are loaded and executed\\*.\n\n_\\*loaded and executed = browser downloads the javascript and executes it._\n\nThat order of execution means that the helpers can rely on the `src` files having been loaded in the browser and use them, and the `srcFiles` can rely on both `src` and `helpers` having been loaded in the browser and use them.\n\nExample below.","mdHtml":"<h2>Breakdown Jasmine in browser</h2>\n<p>Looking at <code>spec/my.spec.js</code> we see the exact same line <code>expect(requestAnimationFrame).toBeDefined();</code> but this time the test <strong>passes</strong>.</p>\n<p>The difference is that we are running the <code>jasmine-browser-runner runSpecs</code>. It starts a browser does some magic so the tests end up in its belly and eventually get run :)</p>\n<h2>Different tests folder</h2>\n<p>You probably noticed that the <code>.spec.js</code> file is no longer in <code>/src</code> folder and moved in the <code>/spec</code> folder. That’s aligned with the default configuration of <code>jasmine-browser-runner</code>. Since the spec files do not need to be part of the browser app bundle that gets shipped to the end-user, having them in a separate folder makes sense. We don’t want the users to see the tests - just the app.</p>\n<p>This is configurable using the <code>spec</code> and <code>src</code> properties in the configuration file.</p>\n<h2>Configuring Jasmine in the browser</h2>\n<p>Here’s the order of precedence for the config file:</p>\n<ul>\n<li>If <code>--config</code> argument was provided as a command-line parameter that takes precedence e.g. <code>--config=my-config.json</code> or <code>--config=my-config.js</code>.</li>\n<li>If not, then <code>spec/support/jasmine-browser.js</code> is attempted.</li>\n<li>Finally, <code>spec/support/jasmine-browser.json</code> is attempted.</li>\n</ul>\n<p>We are using <code>spec/support/jasmine-browser.js</code> because we’d like to add a specific reporter. That config file looks like this:</p>\n<pre><code class=\"language-js\">const specReporter = require('jasmine-spec-reporter').SpecReporter;\n\nmodule.exports = {\n  srcDir: 'src',\n  srcFiles: ['**/*.?(m)js'],\n  specDir: 'spec',\n  specFiles: ['**/*[sS]pec.?(m)js'],\n  helpers: ['helpers/**/*.?(m)js'],\n  random: true,\n  stopSpecOnExpectationFailure: false,\n  reporters: [new specReporter()],\n  browser: {\n    name: 'headlessChrome',\n  },\n};\n</code></pre>\n<p>It has similarities to <code>jasmine.json</code> we were using earlier plus some changes:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">const specReporter = require('jasmine-spec-reporter').SpecReporter;\n</code></pre>\n<p>This imports the <code>jasmine-spec-reporter</code> to use in the config below.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">srcDir: &quot;src&quot;,\nsrcFiles: [\n  &quot;**/*.?(m)js&quot;\n],\n</code></pre>\n<p>This configures where the app files live - we need those to be able to test them. In this case any file with a name ending with a <code>.js</code> or <code>.mjs</code> in <code>/src</code> or any of its sub-folders.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">specDir: &quot;spec&quot;,\nspecFiles: [\n  &quot;**/*[sS]pec.?(m)js&quot;\n],\n</code></pre>\n<p>These properties configure where the test files live. In this case any file with a name ending with <code>.Spec.js</code> or <code>.spec.js</code> or <code>.spec.mjs</code> or <code>.Spec.mjs</code> in <code>/spec</code> or any of its sub-folders.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">random: true,\n</code></pre>\n<p>Same as Jasmine - whether or not to randomize the order of execution of tests.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">stopSpecOnExpectationFailure: false;\n</code></pre>\n<p>Whether or not to stop the execution on the first failure or run all tests and report all failures.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">browser: {\n  name: 'headlessChrome';\n}\n</code></pre>\n<p>Which browser to use to run the tests. Requires the system to have that browser installed and available on the <code>$PATH</code> as well as a web driver for it. Example for chrome and chrome headless - <a href=\"https://chromedriver.chromium.org/downloads\">chromedriver</a>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">reporters: [new specReporter()];\n</code></pre>\n<p>This creates a new instance of the <code>specReporter</code>, an object that conforms to the Jasmine reporter interface <em>(that is - it has the same methods as the standard Jasmine <a href=\"https://github.com/jasmine/jasmine-npm/blob/6d31aec40ac55a8356d112bef3bac685f6c00759/lib/reporters/console_reporter.js\">ConsoleReporter</a>)</em>. And uses that as the sole reporter.</p>\n<blockquote>\n<p>Reporter is a piece of code that takes the results of a suite and presents them by logging out to the console for example. <a href=\"https://jasmine.github.io/tutorials/custom_reporter\">Jasmine Reporter docs</a></p>\n</blockquote>\n</li>\n<li>\n<pre><code class=\"language-js\">helpers: ['helpers/**/*.?(m)js'];\n</code></pre>\n<p>Helpers are scripts that run before the main body of tests in the context of the browser.</p>\n</li>\n</ul>\n<h3>Loading files in Jasmine Browser Runner</h3>\n<p>The order of loading files in the browser is:</p>\n<ol>\n<li>The <code>srcFiles</code> are loaded and executed.</li>\n<li>The <code>helpers</code> files are loaded and executed.</li>\n<li>The <code>specFiles</code> files are loaded and executed*.</li>\n</ol>\n<p><em>*loaded and executed = browser downloads the javascript and executes it.</em></p>\n<p>That order of execution means that the helpers can rely on the <code>src</code> files having been loaded in the browser and use them, and the <code>srcFiles</code> can rely on both <code>src</code> and <code>helpers</code> having been loaded in the browser and use them.</p>\n<p>Example below.</p>\n","comp_id":"WEfTQqR0HHlHR2SZ8nqDG","cursorPosition":4378},"iteration":1,"hash":6,"saveVersion":25},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":"300","selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":6874438959402,"maxId":5982486974497,"children":[{"id":5982486974497,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":444573208502,"module":"helpers","leaf":false,"collapsed":true,"children":[{"id":4418387563328,"module":"myhelper.js","leaf":true,"data":{"content":"window.pageOffsetHelper = function pageOffset() {\n    return `x:${window.pageXOffset},y:${window.pageYOffset}`;\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":444573208502}],"parentId":5982486974497},{"id":9763074533888,"module":"support","leaf":false,"collapsed":true,"children":[{"id":4529254364301,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  random: true,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":9763074533888}],"parentId":5982486974497},{"id":6874438959402,"module":"my.spec.js","leaf":true,"data":{"content":"describe('test', () => {\n    it('should work', () => {\n        expect(true).toBe(true);\n    })\n\n    it('should access browser apis', () => {\n        expect(requestAnimationFrame).toBeDefined();\n    })\n\n\n    it('should access helper functions', () => {\n        expect(pageOffsetHelper()).toEqual('x:0,y:0');\n    })\n})\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5982486974497}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/jasmine-browser","judge":{"judgeActive":false}},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Example of using a helper","comp_id":"co7lrUNQIQQ6ndJCv0J98","isCopied":true},"saveVersion":27,"iteration":2,"hash":9},{"type":"Image","mode":"edit","content":{"image_id":6660992171245568,"style":"original","caption":"Loading order of files in the browser when running jasmine-browser-runner.","page_id":"5268849580048384","borderColor":"#ccc","hasBorder":true,"page_type":"collection","auth_id":"6379329146060800","col_id":"5814889438773248","file":null,"metadata":{"width":3451,"height":1105,"sizeInBytes":722244,"name":"order-of-files-jasmine.png"},"comp_id":"Ps3dk_6Dze5Ue4r1oCv9w"},"iteration":5,"hash":13,"saveVersion":2},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown example in the browser\n\n- The spec `spec/my.spec.js` runs a test that verifies the result of the function call is as expected.\n\n  ```js\n  expect(pageOffsetHelper()).toEqual('x:0,y:0');\n  ```\n\n- The `pageOffsetHelper` is a function declared in `spec/helpers/myhelper.js` - a \"helper\".\n\n- The `spec/support/jasmine-browser.js` runs in the _`Node.js`_ process (as opposed to the helpers and spec files) and prepares a JSON object that is the Jasmine configuration.\n\n> Now we are dealing with **2 environments**\n>\n> - **Node.js** process that initiates and configures Jasmine, and spins up the server (`jasmine-browser.js` runs here).\n> - **Browser environment** which is where the tests actually run.\n\n## Exercise `uppercaseSplit`\n\nLet's try this new browser thing on. For this exercise, we'll use a function that splits strings like:\n\n- Split `'CpuCoreCount'` to `'Cpu Core Count'`.\n- Split `'AmiLaunchIndex'` to `'Ami Launch Index'`.\n\nAnd the tests should make sure the above two cases are verified.\n\n### The `uppercaseSplit` function\n\nIt follows these steps:\n\n- Start with a string.\n- Get its lowercase version.\n- Iterate over each of the characters of the original and if the lowercased character in the same index is:\n  - same - just copy it\n  - different - copy it and add a space\n\n#### Function is a Module\n\nThe function in `src/uppercase-split.mjs`:\n\n- Is a javascript module ([MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), [fun article](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)).\n- The `.mjs` helps the Jasmine-Browser-Runner understand that and treat it as a module.\n- The test will also be in a `.mjs` file so that it too is a module and can load other modules.\n- The test file will import the app function from a special `/__src__` folder (see [jasmine browser runner source on github](https://github.com/jasmine/jasmine-browser/blob/main/lib/server.js#L120-L123) for details).\n\n#### Function breakdown\n\nThe function `uppercaseSplit` can be found in `src/uppercase-split.mjs` in the code playground below. This is its breakdown:\n\n- ```js\n  /**\n   * Takes a string and splits it by uppercase letter\n   * @param {string} label\n   * @returns {string}\n   */\n  ```\n\n  This part is a [JsDoc comment](https://jsdoc.app/index.html) that adds functionality and type description.\n\n- ```js\n  export function uppercaseSplit(label) {\n  ```\n\n  This uses the `export` [keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#exporting_module_features) to let the module (aka the js file) expose this function to other modules.\n\n- ```js\n  const lowercased = label.toLowerCase(); // CpuCoreCount -> cpuCoreCount\n  ```\n\n  This line gets a lowercase version of the `label` parameter.\n\n- ```js\n  const arrayOfChars = Array.from(label); // CpuCoreCount -> ['C', 'p', 'u', 'C', 'o',....]\n  ```\n\n  This line splits the `label` string into an array of characters to enable our algorithm _(the comment shows the first part of the result)_.\n\n- ```js\n  const separated = arrayOfChars //                     space here 👇 and          👇 here\n    .map((l, i) => (lowercased[i] != label[i] ? ' ' + l : l)); // [' C', 'p', 'u', ' C']\n  ```\n\n  These two lines compare `lowercased` and `label` characters by accessing them by their index in the string and adds spaces if they are mismatched. _(the comment shows part of the result with the spaces)_\n\n- ```js\n  return separated.join('').trim();\n  ```\n\n  This line uses `join` to create a single string from the array and `trim` removes any white spaces left. Like the one before the first `C`.\n\n#### Steps\n\n- Use `spec/uppercase-split.spec.mjs` and replace the `pending` with your code.\n- The test file is also a Javascript Module so that it can load the module containing the logic.\n  > Note: your app might use a bundler (like [babel](https://babeljs.io/) or [webpack](https://webpack.js.org/)) to create a **bundle** with a traditional `js` extension - in that case, the tests would need to leverage the same bundling.\n- As always - if you need a **hint** see below the code playground.\n","mdHtml":"<h2>Breakdown example in the browser</h2>\n<ul>\n<li>\n<p>The spec <code>spec/my.spec.js</code> runs a test that verifies the result of the function call is as expected.</p>\n<pre><code class=\"language-js\">expect(pageOffsetHelper()).toEqual('x:0,y:0');\n</code></pre>\n</li>\n<li>\n<p>The <code>pageOffsetHelper</code> is a function declared in <code>spec/helpers/myhelper.js</code> - a “helper”.</p>\n</li>\n<li>\n<p>The <code>spec/support/jasmine-browser.js</code> runs in the <em><code>Node.js</code></em> process (as opposed to the helpers and spec files) and prepares a JSON object that is the Jasmine configuration.</p>\n</li>\n</ul>\n<blockquote>\n<p>Now we are dealing with <strong>2 environments</strong></p>\n<ul>\n<li><strong>Node.js</strong> process that initiates and configures Jasmine, and spins up the server (<code>jasmine-browser.js</code> runs here).</li>\n<li><strong>Browser environment</strong> which is where the tests actually run.</li>\n</ul>\n</blockquote>\n<h2>Exercise <code>uppercaseSplit</code></h2>\n<p>Let’s try this new browser thing on. For this exercise, we’ll use a function that splits strings like:</p>\n<ul>\n<li>Split <code>'CpuCoreCount'</code> to <code>'Cpu Core Count'</code>.</li>\n<li>Split <code>'AmiLaunchIndex'</code> to <code>'Ami Launch Index'</code>.</li>\n</ul>\n<p>And the tests should make sure the above two cases are verified.</p>\n<h3>The <code>uppercaseSplit</code> function</h3>\n<p>It follows these steps:</p>\n<ul>\n<li>Start with a string.</li>\n<li>Get its lowercase version.</li>\n<li>Iterate over each of the characters of the original and if the lowercased character in the same index is:\n<ul>\n<li>same - just copy it</li>\n<li>different - copy it and add a space</li>\n</ul>\n</li>\n</ul>\n<h4>Function is a Module</h4>\n<p>The function in <code>src/uppercase-split.mjs</code>:</p>\n<ul>\n<li>Is a javascript module (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">MDN article</a>, <a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">fun article</a>).</li>\n<li>The <code>.mjs</code> helps the Jasmine-Browser-Runner understand that and treat it as a module.</li>\n<li>The test will also be in a <code>.mjs</code> file so that it too is a module and can load other modules.</li>\n<li>The test file will import the app function from a special <code>/__src__</code> folder (see <a href=\"https://github.com/jasmine/jasmine-browser/blob/main/lib/server.js#L120-L123\">jasmine browser runner source on github</a> for details).</li>\n</ul>\n<h4>Function breakdown</h4>\n<p>The function <code>uppercaseSplit</code> can be found in <code>src/uppercase-split.mjs</code> in the code playground below. This is its breakdown:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">/**\n * Takes a string and splits it by uppercase letter\n * @param {string} label\n * @returns {string}\n */\n</code></pre>\n<p>This part is a <a href=\"https://jsdoc.app/index.html\">JsDoc comment</a> that adds functionality and type description.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">export function uppercaseSplit(label) {\n</code></pre>\n<p>This uses the <code>export</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#exporting_module_features\">keyword</a> to let the module (aka the js file) expose this function to other modules.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const lowercased = label.toLowerCase(); // CpuCoreCount -&gt; cpuCoreCount\n</code></pre>\n<p>This line gets a lowercase version of the <code>label</code> parameter.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const arrayOfChars = Array.from(label); // CpuCoreCount -&gt; ['C', 'p', 'u', 'C', 'o',....]\n</code></pre>\n<p>This line splits the <code>label</code> string into an array of characters to enable our algorithm <em>(the comment shows the first part of the result)</em>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">const separated = arrayOfChars //                     space here 👇 and          👇 here\n  .map((l, i) =&gt; (lowercased[i] != label[i] ? ' ' + l : l)); // [' C', 'p', 'u', ' C']\n</code></pre>\n<p>These two lines compare <code>lowercased</code> and <code>label</code> characters by accessing them by their index in the string and adds spaces if they are mismatched. <em>(the comment shows part of the result with the spaces)</em></p>\n</li>\n<li>\n<pre><code class=\"language-js\">return separated.join('').trim();\n</code></pre>\n<p>This line uses <code>join</code> to create a single string from the array and <code>trim</code> removes any white spaces left. Like the one before the first <code>C</code>.</p>\n</li>\n</ul>\n<h4>Steps</h4>\n<ul>\n<li>Use <code>spec/uppercase-split.spec.mjs</code> and replace the <code>pending</code> with your code.</li>\n<li>The test file is also a Javascript Module so that it can load the module containing the logic.\n<blockquote>\n<p>Note: your app might use a bundler (like <a href=\"https://babeljs.io/\">babel</a> or <a href=\"https://webpack.js.org/\">webpack</a>) to create a <strong>bundle</strong> with a traditional <code>js</code> extension - in that case, the tests would need to leverage the same bundling.</p>\n</blockquote>\n</li>\n<li>As always - if you need a <strong>hint</strong> see below the code playground.</li>\n</ul>\n","comp_id":"nhZ96mOeJ56WIHI_R1vRr"},"iteration":2,"hash":10,"saveVersion":17},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":410454168612,"maxId":620972921159,"children":[{"id":8203636291334,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":2440337843689,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8650149118783,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: true,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2440337843689}],"parentId":8203636291334},{"id":410454168612,"module":"uppercase-split.spec.mjs","leaf":true,"data":{"content":"import { uppercaseSplit } from '/__src__/uppercase-split.mjs';\n\ndescribe('uppercaseSplit', () => {\n    it('should work', () => {\n        expect(true).toBe(true);\n        expect(uppercaseSplit).toBeDefined();\n    })\n\n    it('should split \"CpuCoreCount\" to \"Cpu Core Count\"', () => {\n        pending('verify CpuCoreCount split');// remove this line for test to be executed\n    })\n\n    it('should split \"AmiLaunchIndex\" to \"Ami Launch Index\"', () => {\n        pending('verify AmiLaunchIndexCpuCoreCount split'); // remove this line for test to be executed\n    })\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":8203636291334}],"parentId":0},{"id":620972921159,"module":"src","leaf":false,"collapsed":true,"children":[{"id":1345944120190,"module":"uppercase-split.mjs","leaf":true,"data":{"content":"/**\n * Takes a string and splits it by uppercase letter\n * @param {string} label\n * @returns {string}\n */\nexport function uppercaseSplit(label) {\n  const lowercased = label.toLowerCase(); // CpuCoreCount -> cpuCoreCount\n  const arrayOfChars = Array.from(label); // CpuCoreCount -> ['C', 'p', 'u', 'C', 'o',....]\n  const separated = arrayOfChars //                     space here 👇 and          👇  here\n    .map((l, i) => (lowercased[i] != label[i] ? ' ' + l : l)); // [' C', 'p', 'u', ' C']\n  return separated.join('').trim();\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":620972921159}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/jasmine-browser-exercise","judge":{"judgeActive":false}},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"m5Td3Q7FvPc8RSv8nJaHl","caption":"Exercise here. Hint below"},"iteration":2,"hash":11,"saveVersion":9},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\n\n    it('should split \"CpuCoreCount\" to \"Cpu Core Count\"', () => {\n        expect(uppercaseSplit('CpuCoreCount')).toEqual('Cpu Core Count');\n    })\n\n    it('should split \"AmiLaunchIndex\" to \"Ami Launch Index\"', () => {\n        expect(uppercaseSplit('AmiLaunchIndex')).toEqual('Ami Launch Index');\n    })\n```","mdHtml":"<pre><code class=\"language-js\">\n    it('should split &quot;CpuCoreCount&quot; to &quot;Cpu Core Count&quot;', () =&gt; {\n        expect(uppercaseSplit('CpuCoreCount')).toEqual('Cpu Core Count');\n    })\n\n    it('should split &quot;AmiLaunchIndex&quot; to &quot;Ami Launch Index&quot;', () =&gt; {\n        expect(uppercaseSplit('AmiLaunchIndex')).toEqual('Ami Launch Index');\n    })\n</code></pre>\n","showHintText":"Show Hint","hideHintText":"Hide Hint","showIcon":true,"comp_id":"E8yiWI53hNuxcXWiF5FTJ"},"iteration":1,"hash":12,"saveVersion":3}],"summary":{"titleUpdated":true,"description":"- what's the need of running jasmine in the browser\n- how to run jasmine in the browser\n- how to set up a reporter \n- how to use helpers","tags":["jasmine-browser","unit testing","reporters"]}}