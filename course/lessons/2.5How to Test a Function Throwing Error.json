{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## Throw\n\nWhen a function `throw`s as part of its logic there should be a test case that captures that.\n\n## The function\n\nA function that accepts a string `text` and a number `n` and returns the first `n` characters of the string.\n\n```js\nfunction getFirstNChars(text, n) {\n  return text.slice(0, n);\n}\n```\n\nImplementation uses the `slice` method out of the `string.prototype` ([details](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)). Basically just slicing the passed in `text` from index 0 to `n`.\n\n## Tests\n\nStarting from the case above let's write the unit test as we did in the previous lessons. Use the `src/first-n-chars.spec.js`. This first spec should test the intended use case also known as the **green path**.\n\n_If stuck see the **hint** below the code widget_","mdHtml":"<h2>Throw</h2>\n<p>When a function <code>throw</code>s as part of its logic there should be a test case that captures that.</p>\n<h2>The function</h2>\n<p>A function that accepts a string <code>text</code> and a number <code>n</code> and returns the first <code>n</code> characters of the string.</p>\n<pre><code class=\"language-js\">function getFirstNChars(text, n) {\n  return text.slice(0, n);\n}\n</code></pre>\n<p>Implementation uses the <code>slice</code> method out of the <code>string.prototype</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">details</a>). Basically just slicing the passed in <code>text</code> from index 0 to <code>n</code>.</p>\n<h2>Tests</h2>\n<p>Starting from the case above let’s write the unit test as we did in the previous lessons. Use the <code>src/first-n-chars.spec.js</code>. This first spec should test the intended use case also known as the <strong>green path</strong>.</p>\n<p><em>If stuck see the <strong>hint</strong> below the code widget</em></p>\n","cursorPosition":0,"comp_id":"tI7OuVt5ojnzJUc8FbOvy"},"iteration":1,"hash":1,"saveVersion":20},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":64842276964,"maxId":4390157409849,"children":[{"id":8248271207936,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":3427431214874,"module":"support","leaf":false,"collapsed":false,"children":[{"id":64842276964,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: false,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3427431214874},{"id":9015698016513,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3427431214874}],"parentId":8248271207936}],"parentId":0},{"id":4390157409849,"module":"src","leaf":false,"collapsed":false,"children":[{"id":8932529828295,"module":"first-n-chars.js","leaf":true,"data":{"content":"/**\n * Returns the first n charachters from a string.\n * @param {string} text\n * @param {number} n\n * @returns string\n */\nexports.firstNChars = function firstNChars(text, n) {\n  return text.slice(0, n);\n};\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4390157409849},{"id":2576629411951,"module":"first-n-chars.spec.js","leaf":true,"data":{"content":"const { firstNChars } = require('./first-n-chars');\n\ndescribe('firstNChars', () => {\n  it('should return first 10 charachers from the string \"a veery long string that should be shortened\"', () => {\n    pending('implement \"green path\"')\n  })\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4390157409849}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/function-that-throws","judge":{"judgeActive":false}},"caption":"Testing the intended use case.","comp_id":"5AzehCorJxStoSj3jxiJf","dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true}},"iteration":0,"hash":2,"saveVersion":6},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\nit('should return first 10 characters from the string \"a veery long string that should be shortened\"', () => {\n    expect(firstNChars('a veery long string that should be shortened', 10)).toEqual('a veery lo');\n});\n```","mdHtml":"<pre><code class=\"language-js\">it('should return first 10 characters from the string &quot;a veery long string that should be shortened&quot;', () =&gt; {\n    expect(firstNChars('a veery long string that should be shortened', 10)).toEqual('a veery lo');\n});\n</code></pre>\n","showHintText":"Show Hint","hideHintText":"Hide Hint","showIcon":true,"comp_id":"vhXZAj5qBlI9g3UWDcHd-"},"iteration":8,"hash":3,"saveVersion":9},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"\nAll right, that takes care of the intended use case. Congrats on taking the time to write that test!\n\n> Incidentally - it might seem painfully obvious and redundant as a piece of code. That's how a lot of test cases look initially. Their value becomes obvious in time.\n\n## Corner cases\n\nThis implementation works but has a few issues. It does not take into account the cases when:\n\n- The input `text` is `null` or `undefined`.\n- The input `text` is a non-string value object, number, etc.\n- The input `n` is `null` or `undefined`.\n- The input `n` is a non-numeric value.\n- The input `n` is a non-positive value.\n\nThese are expected conditions that will break the function's expectations. Namely: to slice a string it needs an actual string and an actual positive number of chars to take from the start. So the code should assert that the expectations hold before doing its thing.\n\nThe function expects parameters:\n\n- A `text` parameter - the string to shorten.\n- A `n` parameter - the count of characters to take from the start.\n\nLet's look into their exception cases.\n\n> Exception here means an expected but exceptional case that the function can't deal with. It will \"throw\" that further up the call chain letting the caller handle that.\n\n## \"text\" parameter exceptions\n\nThe function expects to get a string in the `text` parameter so let's verify that's the case:\n\n### Checking for null or undefined\n\nValues of `null` and `undefined` are unacceptable as they are not string and can not be sliced. This check is applicable pretty much for every JavaScript function as the language does not have the means to verify the count and type of parameters.\n\nSince the language lacks these assurances we need to introduce them. Via a check and unit test to verify it works as expected at all times.\n\nThis is what the implementation will look like:\n\n```js\nfunction firstNChars(text, n) {\n  if (text === null || text === undefined) {\n    throw new Error('Unexpected \"text\" type. Expected \"string\" got: ' + text);\n  }\n  return text.slice(0, n);\n}\n```\n\nUsing the triple equals comparison ([why? - see this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)) the code checks if the `text` parameter of the function is `null` or `undefined` and throws an exception with a message stating what was expected and what was received.\n\n### Checking for non-string type\n\nAsserting type of parameter is not a capability available in Javascript, so we need to write some code verifying that the `text` is actually a string and nothing else. An implementation might look like this (_excluding the previous check for brevity_):\n\n```js\nfunction firstNChars(text, n) {\n  if (typeof text !== 'string') {\n    throw new Error(`Unexpected \"text\" type. Expected \"string\" got: ${typeof text}`);\n  }\n  return text.slice(0, n);\n}\n```\n\nThis check uses the `typeof` JS operator ([details](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)) that returns the type of a variable. In this case, the function expects to see a type of `string` to perform and if that's not the case it will throw an exception. The exception's message states what was expected and what was received so the end-user can make the necessary corrections to use the function successfully.\n\nSee `src/first-n-chars.js` in the code widget below for complete implementation.","mdHtml":"<p>All right, that takes care of the intended use case. Congrats on taking the time to write that test!</p>\n<blockquote>\n<p>Incidentally - it might seem painfully obvious and redundant as a piece of code. That’s how a lot of test cases look initially. Their value becomes obvious in time.</p>\n</blockquote>\n<h2>Corner cases</h2>\n<p>This implementation works but has a few issues. It does not take into account the cases when:</p>\n<ul>\n<li>The input <code>text</code> is <code>null</code> or <code>undefined</code>.</li>\n<li>The input <code>text</code> is a non-string value object, number, etc.</li>\n<li>The input <code>n</code> is <code>null</code> or <code>undefined</code>.</li>\n<li>The input <code>n</code> is a non-numeric value.</li>\n<li>The input <code>n</code> is a non-positive value.</li>\n</ul>\n<p>These are expected conditions that will break the function’s expectations. Namely: to slice a string it needs an actual string and an actual positive number of chars to take from the start. So the code should assert that the expectations hold before doing its thing.</p>\n<p>The function expects parameters:</p>\n<ul>\n<li>A <code>text</code> parameter - the string to shorten.</li>\n<li>A <code>n</code> parameter - the count of characters to take from the start.</li>\n</ul>\n<p>Let’s look into their exception cases.</p>\n<blockquote>\n<p>Exception here means an expected but exceptional case that the function can’t deal with. It will “throw” that further up the call chain letting the caller handle that.</p>\n</blockquote>\n<h2>“text” parameter exceptions</h2>\n<p>The function expects to get a string in the <code>text</code> parameter so let’s verify that’s the case:</p>\n<h3>Checking for null or undefined</h3>\n<p>Values of <code>null</code> and <code>undefined</code> are unacceptable as they are not string and can not be sliced. This check is applicable pretty much for every JavaScript function as the language does not have the means to verify the count and type of parameters.</p>\n<p>Since the language lacks these assurances we need to introduce them. Via a check and unit test to verify it works as expected at all times.</p>\n<p>This is what the implementation will look like:</p>\n<pre><code class=\"language-js\">function firstNChars(text, n) {\n  if (text === null || text === undefined) {\n    throw new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: ' + text);\n  }\n  return text.slice(0, n);\n}\n</code></pre>\n<p>Using the triple equals comparison (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">why? - see this</a>) the code checks if the <code>text</code> parameter of the function is <code>null</code> or <code>undefined</code> and throws an exception with a message stating what was expected and what was received.</p>\n<h3>Checking for non-string type</h3>\n<p>Asserting type of parameter is not a capability available in Javascript, so we need to write some code verifying that the <code>text</code> is actually a string and nothing else. An implementation might look like this (<em>excluding the previous check for brevity</em>):</p>\n<pre><code class=\"language-js\">function firstNChars(text, n) {\n  if (typeof text !== 'string') {\n    throw new Error(`Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: ${typeof text}`);\n  }\n  return text.slice(0, n);\n}\n</code></pre>\n<p>This check uses the <code>typeof</code> JS operator (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">details</a>) that returns the type of a variable. In this case, the function expects to see a type of <code>string</code> to perform and if that’s not the case it will throw an exception. The exception’s message states what was expected and what was received so the end-user can make the necessary corrections to use the function successfully.</p>\n<p>See <code>src/first-n-chars.js</code> in the code widget below for complete implementation.</p>\n","comp_id":"DhWdOjWYYJhdH7aYULJAy"},"iteration":4,"hash":4,"saveVersion":17},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":2576629411951,"maxId":4390157409849,"children":[{"id":8248271207936,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":3427431214874,"module":"support","leaf":false,"collapsed":false,"children":[{"id":64842276964,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: false,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3427431214874},{"id":9015698016513,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3427431214874}],"parentId":8248271207936}],"parentId":0},{"id":4390157409849,"module":"src","leaf":false,"collapsed":false,"children":[{"id":8932529828295,"module":"first-n-chars.js","leaf":true,"data":{"content":"/**\n * Returns the first n charachters from a string.\n * @param {string} text\n * @param {number} n\n * @returns string\n */\nexports.firstNChars = function firstNChars(text, n) {\n  if (text === null || text === undefined) {\n    throw new Error('Unexpected \"text\" type. Expected \"string\" got: ' + text);\n  }\n  if (typeof text !== 'string') {\n    throw new Error(`Unexpected \"text\" type. Expected \"string\" got: ${typeof text}`);\n  }\n  return text.slice(0, n);\n};\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4390157409849},{"id":2576629411951,"module":"first-n-chars.spec.js","leaf":true,"data":{"content":"const { firstNChars } = require('./first-n-chars');\n\ndescribe('firstNChars', () => {\n  it('should return first 10 charachers from the string \"a veery long string that should be shortened\"', () => {\n    const actual = firstNChars('a veery long string that should be shortened', 10);\n    const expected = 'a veery lo';\n    expect(actual).toEqual(expected);\n  });\n\n  it('should throw error expected text to be string got null or undefined', () => {\n    // null case\n    expect(() => firstNChars(null, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: null'));\n    // undefined case\n    expect(() => firstNChars(undefined, 10)).toThrow(\n      new Error('Unexpected \"text\" type. Expected \"string\" got: undefined')\n    );\n  });\n  \n  it('should throw error expected text to be string got other type', () => {\n    // number instead of string\n    expect(() => firstNChars(1, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: number'));\n    // object instead of string\n    expect(() => firstNChars({}, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: object'));\n  });\n\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":"10-24"},"parentId":4390157409849}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/function-that-throws","judge":{"judgeActive":false}},"caption":"Testing the text exceptional cases.","comp_id":"ecYEc4wSkjrNKGg7YfHr8","dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"isCopied":true},"saveVersion":14,"iteration":0,"hash":5},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown\n\nThe highlighted lines in `src/first-n-chars.spec.js` are the newly added ones. Focusing on them we can see that there are 2 test cases i.e. 2 new `it` calls. The first tests for the `null` or `undefined` case and the second verifies the type of the `text` parameter.\n\nAll of them use the `expect().toThrow()` assertion. That's a call to the `expect` function from jasmine and finishing the assertion call chain with a `toThrow`. To work in this configuration:\n\n- `expect()` needs a function or a callback passed in, like so:\n\n  ```js\n  expect(() => {...})\n  // or\n  expect(function() {})\n  ```\n\n  > The arrow function `() => {...}` and traditional function expressions `function() {}` have a few syntax differences and one major one concerning how the context `this` is defined. Arrow functions capture `this` at the moment of declaration while traditional expect `this` to be defined at the moment of execution. Details - [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n- `toThrow()` can be used without any parameters - it will then just check if anything is `throw`-n\n\n  ```js\n  expect(() =>{ throw ''; }).toThrow()\n  // will pass\n\n  expect() => { console.log('not throwing').toThrow();})\n  // will fail as the arrow function inside expect() does not throw anything\n  ```\n\n- `toThrow('a string')` will verify a specified string is thrown\n\n  ```js\n  expect(() => {\n    throw 'a string';\n  }).toThrow('a string'); // will pass\n\n  expect(function () {\n    throw '';\n  }).toThrow('a string'); // will fail as the traditional function inside expect() throws an empty string rather than the expected `a string` string\n  ```\n\n### `null` check\n\nThe first check is\n\n```js\nexpect(() => firstNChars(null, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: null'));\n```\n\nIt invokes `expect` passes in an arrow function that calls `firstNChars` with a `null` value for `text` and asserts that the arrow function will throw by using `toThrow`. This call of `toThrow` passes in a `new Error('Unexpected \"text\" type. Expected \"string\" got: null')` this value will be used to compare against the error caught from the arrow function. If they are equal by properties, in this case by the `message` property then the test's assertion is considered **passing**. This is not comparing by reference rather it performs a kind of deep-equals comparison.\n\n### `undefined` check\n\nThis second check\n\n```js\nexpect(() => firstNChars(undefined, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: undefined'));\n```\n\nis very similar to the `null` case. So why even bother with it? In Javascript `null` and `undefined` are different and need to be considered separately even though they look very similar in that the value of a variable is not available. It is unfortunate, but not much can be done except for thoroughly checking the code we write against these values.\n\n> Checking for unexpected values in the input of a function (or a method) is sometimes referred to as `Defensive programming`\n\nThe invocation again starts with `expect` and passes in the arrow function `() => firstNChars(undefined, 10)` and closes the assertion call with `toThrow(new Error(... undefined))`. That makes sure `undefined` is treated as expected.\n\n### Checking for non-string types\n\nThe second new `it` spec verifies function behavior when a non-string value is passed in for the `text` parameter.\n\nIt houses two `expect` calls with the `text` parameter a number and an object.\n\n```js\nexpect(() => firstNChars(1, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: number'));\n```\n\n`expect` invocation receives an arrow function `() => firstNChars(1, 10)`. This is the exception case of getting a `number` when expecting a `string`. Hence the `toThrow` invocation receives the expected `new Error('Unexpected \"text\" type. Expected \"string\" got: number')` and will mark the test passing if the actual error's message matches the expected.\n\nThe `object` exception case looks very similar:\n\n```js\nexpect(() => firstNChars({}, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: object'));\n```\n\nThe difference is the input `{}` and the expected error `object` finish.\n\n## \"n\" parameter exceptions\n\n- The input `n` is `null` or `undefined`, where an implementation might look like:\n\n  ```js\n  if (n === null || n === undefined) {\n    throw new Error('Unexpected \"n\" type. Expected \"number\" got: ' + n);\n  }\n  ```\n\n  Similar to the first check for `text` the logic here will check the value of `n` against `null` or `undefined` and if any of them is a match will throw the error with the descriptive message, allowing end-user to amend their use of the function.\n\n- The input `n` is a non-numeric value:\n\n  ```js\n  if (typeof n !== 'number') {\n    throw new Error(`Unexpected \"n\" type. Expected \"number\" got: ${typeof n}`);\n  }\n  ```\n\n  The logic here makes use of the `typeof` operator to make sure the type of `n` is `number` and if not throws a descriptive error.\n\n- The input `n` is a non-positive value:\n\n  ```js\n  if (n <= 0) {\n    throw new Error(`Unexpected \"n\" value. Expected positive number got: ${n}`);\n  }\n  ```\n\n  The logic here checks the value of `n` and if it is 0 or negative number will throw a descriptive error.\n\nThis is already implemented in `src/first-n-chars.js` in the code playground below.\n\n## Exercise\n\nPlease try and implement the rest of the test cases. The ones that have `pending('..')` in them - replace that with the test case logic and hit Run to see the outcome.\n\n_If stuck see the hint below_\n","mdHtml":"<h2>Breakdown</h2>\n<p>The highlighted lines in <code>src/first-n-chars.spec.js</code> are the newly added ones. Focusing on them we can see that there are 2 test cases i.e. 2 new <code>it</code> calls. The first tests for the <code>null</code> or <code>undefined</code> case and the second verifies the type of the <code>text</code> parameter.</p>\n<p>All of them use the <code>expect().toThrow()</code> assertion. That’s a call to the <code>expect</code> function from jasmine and finishing the assertion call chain with a <code>toThrow</code>. To work in this configuration:</p>\n<ul>\n<li>\n<p><code>expect()</code> needs a function or a callback passed in, like so:</p>\n<pre><code class=\"language-js\">expect(() =&gt; {...})\n// or\nexpect(function() {})\n</code></pre>\n<blockquote>\n<p>The arrow function <code>() =&gt; {...}</code> and traditional function expressions <code>function() {}</code> have a few syntax differences and one major one concerning how the context <code>this</code> is defined. Arrow functions capture <code>this</code> at the moment of declaration while traditional expect <code>this</code> to be defined at the moment of execution. Details - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">mdn</a>.</p>\n</blockquote>\n</li>\n<li>\n<p><code>toThrow()</code> can be used without any parameters - it will then just check if anything is <code>throw</code>-n</p>\n<pre><code class=\"language-js\">expect(() =&gt;{ throw ''; }).toThrow()\n// will pass\n\nexpect() =&gt; { console.log('not throwing').toThrow();})\n// will fail as the arrow function inside expect() does not throw anything\n</code></pre>\n</li>\n<li>\n<p><code>toThrow('a string')</code> will verify a specified string is thrown</p>\n<pre><code class=\"language-js\">expect(() =&gt; {\n  throw 'a string';\n}).toThrow('a string'); // will pass\n\nexpect(function () {\n  throw '';\n}).toThrow('a string'); // will fail as the traditional function inside expect() throws an empty string rather than the expected `a string` string\n</code></pre>\n</li>\n</ul>\n<h3><code>null</code> check</h3>\n<p>The first check is</p>\n<pre><code class=\"language-js\">expect(() =&gt; firstNChars(null, 10)).toThrow(new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: null'));\n</code></pre>\n<p>It invokes <code>expect</code> passes in an arrow function that calls <code>firstNChars</code> with a <code>null</code> value for <code>text</code> and asserts that the arrow function will throw by using <code>toThrow</code>. This call of <code>toThrow</code> passes in a <code>new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: null')</code> this value will be used to compare against the error caught from the arrow function. If they are equal by properties, in this case by the <code>message</code> property then the test’s assertion is considered <strong>passing</strong>. This is not comparing by reference rather it performs a kind of deep-equals comparison.</p>\n<h3><code>undefined</code> check</h3>\n<p>This second check</p>\n<pre><code class=\"language-js\">expect(() =&gt; firstNChars(undefined, 10)).toThrow(new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: undefined'));\n</code></pre>\n<p>is very similar to the <code>null</code> case. So why even bother with it? In Javascript <code>null</code> and <code>undefined</code> are different and need to be considered separately even though they look very similar in that the value of a variable is not available. It is unfortunate, but not much can be done except for thoroughly checking the code we write against these values.</p>\n<blockquote>\n<p>Checking for unexpected values in the input of a function (or a method) is sometimes referred to as <code>Defensive programming</code></p>\n</blockquote>\n<p>The invocation again starts with <code>expect</code> and passes in the arrow function <code>() =&gt; firstNChars(undefined, 10)</code> and closes the assertion call with <code>toThrow(new Error(... undefined))</code>. That makes sure <code>undefined</code> is treated as expected.</p>\n<h3>Checking for non-string types</h3>\n<p>The second new <code>it</code> spec verifies function behavior when a non-string value is passed in for the <code>text</code> parameter.</p>\n<p>It houses two <code>expect</code> calls with the <code>text</code> parameter a number and an object.</p>\n<pre><code class=\"language-js\">expect(() =&gt; firstNChars(1, 10)).toThrow(new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: number'));\n</code></pre>\n<p><code>expect</code> invocation receives an arrow function <code>() =&gt; firstNChars(1, 10)</code>. This is the exception case of getting a <code>number</code> when expecting a <code>string</code>. Hence the <code>toThrow</code> invocation receives the expected <code>new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: number')</code> and will mark the test passing if the actual error’s message matches the expected.</p>\n<p>The <code>object</code> exception case looks very similar:</p>\n<pre><code class=\"language-js\">expect(() =&gt; firstNChars({}, 10)).toThrow(new Error('Unexpected &quot;text&quot; type. Expected &quot;string&quot; got: object'));\n</code></pre>\n<p>The difference is the input <code>{}</code> and the expected error <code>object</code> finish.</p>\n<h2>“n” parameter exceptions</h2>\n<ul>\n<li>\n<p>The input <code>n</code> is <code>null</code> or <code>undefined</code>, where an implementation might look like:</p>\n<pre><code class=\"language-js\">if (n === null || n === undefined) {\n  throw new Error('Unexpected &quot;n&quot; type. Expected &quot;number&quot; got: ' + n);\n}\n</code></pre>\n<p>Similar to the first check for <code>text</code> the logic here will check the value of <code>n</code> against <code>null</code> or <code>undefined</code> and if any of them is a match will throw the error with the descriptive message, allowing end-user to amend their use of the function.</p>\n</li>\n<li>\n<p>The input <code>n</code> is a non-numeric value:</p>\n<pre><code class=\"language-js\">if (typeof n !== 'number') {\n  throw new Error(`Unexpected &quot;n&quot; type. Expected &quot;number&quot; got: ${typeof n}`);\n}\n</code></pre>\n<p>The logic here makes use of the <code>typeof</code> operator to make sure the type of <code>n</code> is <code>number</code> and if not throws a descriptive error.</p>\n</li>\n<li>\n<p>The input <code>n</code> is a non-positive value:</p>\n<pre><code class=\"language-js\">if (n &lt;= 0) {\n  throw new Error(`Unexpected &quot;n&quot; value. Expected positive number got: ${n}`);\n}\n</code></pre>\n<p>The logic here checks the value of <code>n</code> and if it is 0 or negative number will throw a descriptive error.</p>\n</li>\n</ul>\n<p>This is already implemented in <code>src/first-n-chars.js</code> in the code playground below.</p>\n<h2>Exercise</h2>\n<p>Please try and implement the rest of the test cases. The ones that have <code>pending('..')</code> in them - replace that with the test case logic and hit Run to see the outcome.</p>\n<p><em>If stuck see the hint below</em></p>\n","comp_id":"5WglXxs0NNZv6Jt-h58sx"},"iteration":0,"hash":6,"saveVersion":16},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":"900","selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":2576629411951,"maxId":4390157409849,"children":[{"id":8248271207936,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":3427431214874,"module":"support","leaf":false,"collapsed":false,"children":[{"id":64842276964,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: false,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3427431214874},{"id":9015698016513,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3427431214874}],"parentId":8248271207936}],"parentId":0},{"id":4390157409849,"module":"src","leaf":false,"collapsed":false,"children":[{"id":8932529828295,"module":"first-n-chars.js","leaf":true,"data":{"content":"/**\n * Returns the first n charachters from a string.\n * @param {string} text\n * @param {number} n\n * @returns string\n */\nexports.firstNChars = function firstNChars(text, n) {\n  if (text === null || text === undefined) {\n    throw new Error('Unexpected \"text\" type. Expected \"string\" got: ' + text);\n  }\n  if (typeof text !== 'string') {\n    throw new Error(`Unexpected \"text\" type. Expected \"string\" got: ${typeof text}`);\n  }\n  if (n === null || n === undefined) {\n    throw new Error('Unexpected \"n\" type. Expected \"number\" got: ' + n);\n  }\n  if (typeof n !== 'number') {\n    throw new Error(`Unexpected \"n\" type. Expected \"number\" got: ${typeof n}`);\n  }\n  if(n <= 0) {\n    throw new Error(`Unexpected \"n\" value. Expected positive number got: ${n}`)\n  }\n    \n\n  return text.slice(0, n);\n};\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4390157409849},{"id":2576629411951,"module":"first-n-chars.spec.js","leaf":true,"data":{"content":"const { firstNChars } = require('./first-n-chars');\n\ndescribe('firstNChars', () => {\n  it('should return first 10 charachers from the string \"a veery long string that should be shortened\"', () => {\n    const actual = firstNChars('a veery long string that should be shortened', 10);\n    const expected = 'a veery lo';\n    expect(actual).toEqual(expected);\n  });\n\n  it('should throw error expected text to be string got null or undefined', () => {\n    // null case\n    expect(() => firstNChars(null, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: null'));\n    // undefined case\n    expect(() => firstNChars(undefined, 10)).toThrow(\n      new Error('Unexpected \"text\" type. Expected \"string\" got: undefined')\n    );\n  });\n\n  it('should throw error expected text to be string got other type', () => {\n    // number instead of string\n    expect(() => firstNChars(1, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: number'));\n    // object instead of string\n    expect(() => firstNChars({}, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: object'));\n  });\n\n  it('should throw error n expected number got null or undefined', () => {\n    pending('implement value is not null or undefined test case')\n  });\n\n  it('should throw error n expected number got other type', () => {\n    pending('implement number test case')\n  });\n\n  it('should throw error n expected positive number got negative or 0', () => {\n    pending('implement non-negative test case')\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4390157409849}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/function-that-throws","judge":{"judgeActive":false}},"caption":"Testing the n exceptional cases.","comp_id":"kYA7y5A-64HKbrj_c3WCE","dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"isCopied":true,"codePanelHeight":"400"},"saveVersion":19,"iteration":0,"hash":8},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\n  it('should throw error n expected number got null or undefined', () => {\n    expect(() => firstNChars('test', null)).toThrow(new Error('Unexpected \"n\" type. Expected \"number\" got: null'));\n    expect(() => firstNChars('test', undefined)).toThrow(\n      new Error('Unexpected \"n\" type. Expected \"number\" got: undefined')\n    );\n  });\n\n  it('should throw error n expected number got other type', () => {\n    expect(() => firstNChars('test', '1')).toThrow(new Error('Unexpected \"n\" type. Expected \"number\" got: string'));\n    expect(() => firstNChars('test', {})).toThrow(new Error('Unexpected \"n\" type. Expected \"number\" got: object'));\n  });\n\n  it('should throw error n expected positive number got negative or 0', () => {\n    expect(() => firstNChars('test', -1)).toThrow(new Error('Unexpected \"n\" value. Expected positive number got: -1'));\n    expect(() => firstNChars('test', 0)).toThrow(new Error('Unexpected \"n\" value. Expected positive number got: 0'));\n  });\n```","mdHtml":"<pre><code class=\"language-js\">  it('should throw error n expected number got null or undefined', () =&gt; {\n    expect(() =&gt; firstNChars('test', null)).toThrow(new Error('Unexpected &quot;n&quot; type. Expected &quot;number&quot; got: null'));\n    expect(() =&gt; firstNChars('test', undefined)).toThrow(\n      new Error('Unexpected &quot;n&quot; type. Expected &quot;number&quot; got: undefined')\n    );\n  });\n\n  it('should throw error n expected number got other type', () =&gt; {\n    expect(() =&gt; firstNChars('test', '1')).toThrow(new Error('Unexpected &quot;n&quot; type. Expected &quot;number&quot; got: string'));\n    expect(() =&gt; firstNChars('test', {})).toThrow(new Error('Unexpected &quot;n&quot; type. Expected &quot;number&quot; got: object'));\n  });\n\n  it('should throw error n expected positive number got negative or 0', () =&gt; {\n    expect(() =&gt; firstNChars('test', -1)).toThrow(new Error('Unexpected &quot;n&quot; value. Expected positive number got: -1'));\n    expect(() =&gt; firstNChars('test', 0)).toThrow(new Error('Unexpected &quot;n&quot; value. Expected positive number got: 0'));\n  });\n</code></pre>\n","showHintText":"Show Hint","hideHintText":"Hide Hint","showIcon":true,"comp_id":"R3a-XmYBa8u0FBuFBvNPR"},"iteration":2,"hash":9,"saveVersion":7},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"\n## Exercise Breakdown\n\n### Testing `null` or `undefined`\n\nThis test should be very similar to the test for the `text` parameter being null or undefined. In this case, we would need to pass in a `string` for `text` and `null` for `n` and verify the function throws using `expect(() => ... ).toThrow(...)`\nSame for `undefined`.\nE.g. `expect(() => firstNChars('', null).toThrow(...)`\n\n### Testing for non-numeric values\n\nThis test should be very similar to the test for `text` parameter being a `string`. In this case, we would need to pass in non-numeric values for the `n` parameter while providing a valid value for `text`. Like `expect(() => firstNChars('', {}).toThrow(...)`\n\n### Testing for non-positive values\n\nTry and pass `-1` and `0` for the `n` parameter like `expect(() => firstNChars('', -1).toThrow(...)`\n","mdHtml":"<h2>Exercise Breakdown</h2>\n<h3>Testing <code>null</code> or <code>undefined</code></h3>\n<p>This test should be very similar to the test for the <code>text</code> parameter being null or undefined. In this case, we would need to pass in a <code>string</code> for <code>text</code> and <code>null</code> for <code>n</code> and verify the function throws using <code>expect(() =&gt; ... ).toThrow(...)</code>\nSame for <code>undefined</code>.\nE.g. <code>expect(() =&gt; firstNChars('', null).toThrow(...)</code></p>\n<h3>Testing for non-numeric values</h3>\n<p>This test should be very similar to the test for <code>text</code> parameter being a <code>string</code>. In this case, we would need to pass in non-numeric values for the <code>n</code> parameter while providing a valid value for <code>text</code>. Like <code>expect(() =&gt; firstNChars('', {}).toThrow(...)</code></p>\n<h3>Testing for non-positive values</h3>\n<p>Try and pass <code>-1</code> and <code>0</code> for the <code>n</code> parameter like <code>expect(() =&gt; firstNChars('', -1).toThrow(...)</code></p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"F4YBuVJ5hYcKU858ffd0q"},"iteration":0,"hash":10,"saveVersion":7}],"summary":{"title":"How to Test a Function That Throws an Error","description":"Sometimes functions throw for various reasons. Their tests should capture that. Here's how to do that.","tags":["test throw","javascript","expect toThrow"],"titleUpdated":true}}