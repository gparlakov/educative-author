{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## Start without tools\n\nLet's start with an example of unit testing a function in plain javascript - no tools, just code.\n\nThe function would be a `flatMap` implementation [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n\nWe'll take a few test cases and implement them to ensure our function adheres to the standard!\n\n### Case 1\n\n```js\nvar arr = [1, 2, 3, 4];\n\narr.flatMap((x) => [x, x * 2]);\n// [1, 2, 2, 4, 3, 6, 4, 8]\n```\n\nThe code takes an array of numbers and applies the mapping function `x => [x, x * 2]` to each, which results in an array of arrays `[[1, 2], [2, 4], [3, 6], [4, 8]]` and flatten that to one array.\n\nThe expected outcome is `[1, 2, 2, 4, 3, 6, 4, 8]`.\n\n### Case 2\n\n```js\nlet arr1 = [\"it's Sunny in\", '', 'California always'];\n\narr1.map((x) => x.split(' '));\n// [[\"it's\",\"Sunny\",\"in\"],[\"\"],[\"California\", \"always\"]]\n\narr1.flatMap((x) => x.split(' '));\n// [\"it's\",\"Sunny\",\"in\", \"\", \"California\", \"always\"]\n```\n\nThe code takes an array of strings and applies the mapping function `x.split(\" \")` to each which results in an array of arrays of different lengths `[[\"it's\",\"Sunny\",\"in\"],[\"\"],[\"California\", \"always\"]]` and flatten that to one array.\n\nThe expected outcome is `[\"it's\",\"Sunny\",\"in\", \"\", \"California\", \"always\"]`\n\n### Case 3\n\n```js\nlet arr1 = [1, 2, 3, 4];\n\narr1.map((x) => [x * 2]);\n// [[2], [4], [6], [8]]\n```\n\nThe code takes an array of numbers and applies the mapping function `x => [x * 2]` to each, which results in an array of arrays of `[[2], [4], [6], [8]]` and flatten that to one array.\n\nThe expected outcome is `[2, 4, 6, 8]`.\n\n### Case 4\n\n```js\narr1.flatMap((x) => [x * 2]);\n// [2, 4, 6, 8]\n\n// only one level is flattened\narr1.flatMap((x) => [[x * 2]]);\n// [[[2]], [[4]], [[6]], [[8]]]\n```\n\nThe code takes an array of numbers and applies the mapping function `x => [[x * 2]]` to each, which results in an **array of arrays of nested arrays** `[[[2]], [[4]], [[6]], [[8]]]` and flatten that to one array.\n\nThe expected outcome is `[[2], [4], [6], [8]]` verifying that `flatMap` only flattens out a single level deep array of arrays.\n","mdHtml":"<h2>Start without tools</h2>\n<p>Let’s start with an example of unit testing a function in plain javascript - no tools, just code.</p>\n<p>The function would be a <code>flatMap</code> implementation <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\">MDN</a></p>\n<p>We’ll take a few test cases and implement them to ensure our function adheres to the standard!</p>\n<h3>Case 1</h3>\n<pre><code class=\"language-js\">var arr = [1, 2, 3, 4];\n\narr.flatMap((x) =&gt; [x, x * 2]);\n// [1, 2, 2, 4, 3, 6, 4, 8]\n</code></pre>\n<p>The code takes an array of numbers and applies the mapping function <code>x =&gt; [x, x * 2]</code> to each, which results in an array of arrays <code>[[1, 2], [2, 4], [3, 6], [4, 8]]</code> and flatten that to one array.</p>\n<p>The expected outcome is <code>[1, 2, 2, 4, 3, 6, 4, 8]</code>.</p>\n<h3>Case 2</h3>\n<pre><code class=\"language-js\">let arr1 = [&quot;it's Sunny in&quot;, '', 'California always'];\n\narr1.map((x) =&gt; x.split(' '));\n// [[&quot;it's&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;, &quot;always&quot;]]\n\narr1.flatMap((x) =&gt; x.split(' '));\n// [&quot;it's&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;, &quot;always&quot;]\n</code></pre>\n<p>The code takes an array of strings and applies the mapping function <code>x.split(&quot; &quot;)</code> to each which results in an array of arrays of different lengths <code>[[&quot;it's&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;, &quot;always&quot;]]</code> and flatten that to one array.</p>\n<p>The expected outcome is <code>[&quot;it's&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;, &quot;always&quot;]</code></p>\n<h3>Case 3</h3>\n<pre><code class=\"language-js\">let arr1 = [1, 2, 3, 4];\n\narr1.map((x) =&gt; [x * 2]);\n// [[2], [4], [6], [8]]\n</code></pre>\n<p>The code takes an array of numbers and applies the mapping function <code>x =&gt; [x * 2]</code> to each, which results in an array of arrays of <code>[[2], [4], [6], [8]]</code> and flatten that to one array.</p>\n<p>The expected outcome is <code>[2, 4, 6, 8]</code>.</p>\n<h3>Case 4</h3>\n<pre><code class=\"language-js\">arr1.flatMap((x) =&gt; [x * 2]);\n// [2, 4, 6, 8]\n\n// only one level is flattened\narr1.flatMap((x) =&gt; [[x * 2]]);\n// [[[2]], [[4]], [[6]], [[8]]]\n</code></pre>\n<p>The code takes an array of numbers and applies the mapping function <code>x =&gt; [[x * 2]]</code> to each, which results in an <strong>array of arrays of nested arrays</strong> <code>[[[2]], [[4]], [[6]], [[8]]]</code> and flatten that to one array.</p>\n<p>The expected outcome is <code>[[2], [4], [6], [8]]</code> verifying that <code>flatMap</code> only flattens out a single level deep array of arrays.</p>\n","comp_id":"ejjGceT6ppf66IzJdY7AD"},"iteration":1,"hash":1,"saveVersion":21},{"type":"Code","mode":"edit","content":{"version":"7.0","caption":"Implementation of the above Cases 1 through 4","language":"nodejs","title":"","theme":"default","additionalContent":[],"selectedIndex":0,"runnable":true,"judge":false,"staticEntryFileName":true,"judgeContent":null,"judgeHints":null,"allowDownload":false,"treatOutputAsHTML":false,"enableHiddenCode":false,"enableStdin":false,"evaluateWithoutExecution":false,"showSolution":false,"timeLimit":30,"hiddenCodeContent":{"prependCode":"\n\n","appendCode":"\n\n","codeSelection":"prependCode"},"dockerJob":{},"selectedApiKeys":{},"selectedEnvVars":{},"specialInput":"no-input","solutionContent":"\n\n\n","judgeContentPrepend":"\n\n\n","evaluateLanguage":null,"isCodeDrawing":false,"content":"//\nArray.prototype.flatMap = function(cb) {\n    return [];\n    //return this.map(cb).reduce((acc, n) => acc.concat(n), []);\n}\n\n\n\n// Case 1\nconst numbers = [1, 2, 3, 4];\n\nconst actual = numbers.flatMap(x => [x, x * 2]);\nconst expected = '1,2,2,4,3,6,4,8';\nconsole.log('test case 1 passing:', actual.join() === expected);\n\n\n\n// Case 2\nconst strings = [\"it's Sunny in\", \"\", \"California\"];\n\nconst actual1 = strings.flatMap(x => x.split(\" \"));\nconst expected1 =  [\"it's\",\"Sunny\",\"in\", \"\", \"California\"];\nconsole.log('test case 2 passing:',actual1.join() === expected1.join())\n\n\n\n// Case 3 \nconst numbers2 = [1, 2, 3, 4];\nconst actual2 = numbers2.flatMap(x => [x * 2]);\nconst expected2 = [2, 4, 6, 8];\nconsole.log('test case 3 passing:',actual2.join() === expected2.join())\n// [2, 4, 6, 8]\n\n// Case 4\n// only one level is flattened\nconsole.log('test case 4 passing:', numbers.flatMap(x => [[x * 2]]).join() === [[2], [4], [6], [8]].join()) ;\n// [[2], [4], [6], [8]]","entryFileName":"index.js","staticEntryName":false,"transformOutput":false,"outputTransformCode":"function outputTransform(stdout, stderr) {\n  // Transform output or perform API key extraction.\n  const apiKeys = {};\n  return { apiKeys, stdout, stderr };\n}","imageId":"","outputImageHeight":150,"comp_id":"nomZzho-OATgBz196Mpwj","readOnlyApiKeys":false,"highlightedLines":"4"},"iteration":1,"hash":2,"saveVersion":19},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"With the initial function implemented like this:\n\n```js\nArray.prototype.flatMap = function(cb) {\n    return [];\n}\n```\n\nThe code prints out:\n\n```sh\ntest case 1 passing: false\ntest case 2 passing: false\ntest case 3 passing: false\ntest case 4 passing: false\n```\n\nThat's because we have not implemented the function yet - it just always returns an empty array. \n\nTry to implement it or uncomment line 4 and replace line 3 with it and run again.\n\nNow it should print out:\n\n```sh\ntest case 1 passing: true\ntest case 2 passing: true\ntest case 3 passing: true\ntest case 4 passing: true\n```\n\n## The method\n\n1. Take the `actual` output of the function.\n2. Compare it to the `expected`.\n3. Report the passing or failure of the test case based on a match between `actual` and `expected`.","mdHtml":"<p>With the initial function implemented like this:</p>\n<pre><code class=\"language-js\">Array.prototype.flatMap = function(cb) {\n    return [];\n}\n</code></pre>\n<p>The code prints out:</p>\n<pre><code class=\"language-sh\">test case 1 passing: false\ntest case 2 passing: false\ntest case 3 passing: false\ntest case 4 passing: false\n</code></pre>\n<p>That’s because we have not implemented the function yet - it just always returns an empty array.</p>\n<p>Try to implement it or uncomment line 4 and replace line 3 with it and run again.</p>\n<p>Now it should print out:</p>\n<pre><code class=\"language-sh\">test case 1 passing: true\ntest case 2 passing: true\ntest case 3 passing: true\ntest case 4 passing: true\n</code></pre>\n<h2>The method</h2>\n<ol>\n<li>Take the <code>actual</code> output of the function.</li>\n<li>Compare it to the <code>expected</code>.</li>\n<li>Report the passing or failure of the test case based on a match between <code>actual</code> and <code>expected</code>.</li>\n</ol>\n","cursorPosition":376,"comp_id":"JbtE_FUNjRDbGsFRIBIeb"},"iteration":0,"hash":5,"saveVersion":9},{"type":"MxGraphWidget","mode":"edit","content":{"useObject":true,"xml":"<mxGraphModel><root><mxCell id=\"8225726988718\"/><mxCell id=\"783316456846\" parent=\"8225726988718\"/><mxCell id=\"2082\" value=\"The function\" style=\"rounded=0;whiteSpace=wrap;html=1;fontSize=22;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"250\" y=\"530\" width=\"320\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"2360\" value=\"\" style=\"image;html=1;labelBackgroundColor=#ffffff;image=stencils/arrows/4.svg;rotation=-90;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"170\" y=\"520\" width=\"80\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"6112\" value=\"\" style=\"image;html=1;labelBackgroundColor=#ffffff;image=stencils/arrows/4.svg;rotation=-90;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"570\" y=\"520\" width=\"80\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"5773\" value=\"Input\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=25;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"130\" y=\"480\" width=\"130\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"8689\" value=\"Actual\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=25;fontColor=#3333FF;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"570\" y=\"480\" width=\"130\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"1162\" value=\"Expected\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=25;fontColor=#006600;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"570\" y=\"290\" width=\"130\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"2930\" value=\"\" style=\"image;html=1;labelBackgroundColor=#ffffff;image=stencils/arrows/1.svg;fontSize=25;fontColor=#006600;\" vertex=\"1\" parent=\"783316456846\"><mxGeometry x=\"595\" y=\"380\" width=\"80\" height=\"80\" as=\"geometry\"/></mxCell></root></mxGraphModel>","svg":"","caption":"The unit tests provide the input, take the `actual` result and compare with the `expected`.","path":"/api/collection/6379329146060800/5814889438773248/page/5655563365515264/image/5393244306800640","prevPath":"","prevSvg":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100px\" height=\"100px\" version=\"1.1\"></svg>","prevXml":"<mxGraphModel><root></root></mxGraphModel>","waInstantlyOpened":true,"statusData":{"status":"INIT","text":""},"comp_id":"bINLh8X3-URSSDUiMclgW"},"iteration":0,"hash":8,"saveVersion":2},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown\n\n- We start with the requirement \"create a `flatMap` polyfill\"\n- We created a placeholder implementation (that always returns `[]`).\n- Test case 1:\n\n  - Assert the `flatMap` works with multi-member arrays.\n  - Prepare input `numbers`.\n  - Run the function with that and got the `actual` result.\n\n    ```js\n    const numbers = [1, 2, 3, 4];\n\n    const actual = numbers.flatMap((x) => [x, x * 2]);\n    ```\n\n    - Prepare the `expected`:\n\n    ```js\n    const expected = '1,2,2,4,3,6,4,8';\n    console.log('test case 1 passing:', actual.join() === expected);\n    ```\n\n  - Print out the result of comparing the `actual` to the `expected`.\n\n- Test case 2:\n\n  - Assert `flatMap` works with `string`s.\n  - Prepare the input `const strings = [\"it's Sunny in\", \"\", \"California\"];`.\n  - Take the `actual` result:\n\n    ```js\n    const actual1 = strings.flatMap((x) => x.split(' '));\n    ```\n\n  - Prepare the `expected`:\n\n    ```js\n    const expected1 = [\"it's\", 'Sunny', 'in', '', 'California'];\n    ```\n\n  - Compare `actual` and `expected` and print out the result:\n\n    ```js\n    console.log('test case 2 passing:', actual1.join() === expected1.join());\n    ```\n\n- Test case 3 is very similar to test case 1. The only difference is that the callback function produces arrays of length 1.\n\n- Test case 4:\n\n  - Assert `flatMap` works with **deep nested arrays** and only flattens one level deep.\n  - Take the `actual` result and compare it with the `expected` all in a single line:\n\n    ```js\n    console.log('test case 4 passing:', numbers.flatMap((x) => [[x * 2]]).join() === [[2], [4], [6], [8]].join());\n    ```\n\n  - The `actual` being `numbers.flatMap(x => [[x * 2]])` reusing the `numbers` from the first example.\n  - The `expected` being `[[2], [4], [6], [8]].join()`.\n\n## Tests (never?) done\n\nThese tests make sure that the **four specific** use cases work. There are **lots of other** use cases - should we **test them all?**\n\nWe **don't** need to test them **all**.\n\nIt's enough to have test coverage for the broad use case. If a bug appears in our code, we can add tests that capture that bug (a test that breaks before the fix and is green after). In that sense, the tests are never really done.\n\n> And that's the nature of tests - ever-growing and changing - just like the codebase!\n","mdHtml":"<h2>Breakdown</h2>\n<ul>\n<li>\n<p>We start with the requirement “create a <code>flatMap</code> polyfill”</p>\n</li>\n<li>\n<p>We created a placeholder implementation (that always returns <code>[]</code>).</p>\n</li>\n<li>\n<p>Test case 1:</p>\n<ul>\n<li>\n<p>Assert the <code>flatMap</code> works with multi-member arrays.</p>\n</li>\n<li>\n<p>Prepare input <code>numbers</code>.</p>\n</li>\n<li>\n<p>Run the function with that and got the <code>actual</code> result.</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3, 4];\n\nconst actual = numbers.flatMap((x) =&gt; [x, x * 2]);\n</code></pre>\n<ul>\n<li>Prepare the <code>expected</code>:</li>\n</ul>\n<pre><code class=\"language-js\">const expected = '1,2,2,4,3,6,4,8';\nconsole.log('test case 1 passing:', actual.join() === expected);\n</code></pre>\n</li>\n<li>\n<p>Print out the result of comparing the <code>actual</code> to the <code>expected</code>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Test case 2:</p>\n<ul>\n<li>\n<p>Assert <code>flatMap</code> works with <code>string</code>s.</p>\n</li>\n<li>\n<p>Prepare the input <code>const strings = [&quot;it's Sunny in&quot;, &quot;&quot;, &quot;California&quot;];</code>.</p>\n</li>\n<li>\n<p>Take the <code>actual</code> result:</p>\n<pre><code class=\"language-js\">const actual1 = strings.flatMap((x) =&gt; x.split(' '));\n</code></pre>\n</li>\n<li>\n<p>Prepare the <code>expected</code>:</p>\n<pre><code class=\"language-js\">const expected1 = [&quot;it's&quot;, 'Sunny', 'in', '', 'California'];\n</code></pre>\n</li>\n<li>\n<p>Compare <code>actual</code> and <code>expected</code> and print out the result:</p>\n<pre><code class=\"language-js\">console.log('test case 2 passing:', actual1.join() === expected1.join());\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Test case 3 is very similar to test case 1. The only difference is that the callback function produces arrays of length 1.</p>\n</li>\n<li>\n<p>Test case 4:</p>\n<ul>\n<li>\n<p>Assert <code>flatMap</code> works with <strong>deep nested arrays</strong> and only flattens one level deep.</p>\n</li>\n<li>\n<p>Take the <code>actual</code> result and compare it with the <code>expected</code> all in a single line:</p>\n<pre><code class=\"language-js\">console.log('test case 4 passing:', numbers.flatMap((x) =&gt; [[x * 2]]).join() === [[2], [4], [6], [8]].join());\n</code></pre>\n</li>\n<li>\n<p>The <code>actual</code> being <code>numbers.flatMap(x =&gt; [[x * 2]])</code> reusing the <code>numbers</code> from the first example.</p>\n</li>\n<li>\n<p>The <code>expected</code> being <code>[[2], [4], [6], [8]].join()</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Tests (never?) done</h2>\n<p>These tests make sure that the <strong>four specific</strong> use cases work. There are <strong>lots of other</strong> use cases - should we <strong>test them all?</strong></p>\n<p>We <strong>don’t</strong> need to test them <strong>all</strong>.</p>\n<p>It’s enough to have test coverage for the broad use case. If a bug appears in our code, we can add tests that capture that bug (a test that breaks before the fix and is green after). In that sense, the tests are never really done.</p>\n<blockquote>\n<p>And that’s the nature of tests - ever-growing and changing - just like the codebase!</p>\n</blockquote>\n","comp_id":"ObpdRPduX2J8u4jEhxbWI"},"iteration":0,"hash":7,"saveVersion":8}],"summary":{"tags":["unit test","basics","javascript"],"titleUpdated":true,"description":"We'll go over the basics of unit tests. We'll start with a trivial function and write tests for a few of its use cases. We won't be using any tools for now - just plain javascript.\n"}}