{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## Using log to console\n\nAt the time of writing of this course, using `jasmine-browser-runner runSpecs` does not output the `console.log`-s to the terminal (the nodejs process) because the tests are executed in the browser environment. If that browser is headless, then there is no chance to see the logs.\n\nThere is a way to set up a reporter for the `jasmine-browser-runner` so that the logs are shown on the terminal. (based on this Jasmine issue response https://github.com/jasmine/jasmine-browser-runner/issues/9#issuecomment-933608524)\nSee the `spec/helpers/logs.js` in the code playground below. It will replace the `console.log` function with a custom one (by using `spyOn` :)) and store the arguments of each `console.log` in an array `logs` and `afterEach` spec will store the `logs` in the spec context for `spec/support/reporter.js` to use. Since the reporter runs in the context of the node.js process it can easily call `console.log` and result in the output showing on the terminal. That's exactly what it does.\n\n_If all this sounds too complicated - rest assured there is another way shown below \"How to use browser dev tools\"._","mdHtml":"<h2>Using log to console</h2>\n<p>At the time of writing of this course, using <code>jasmine-browser-runner runSpecs</code> does not output the <code>console.log</code>-s to the terminal (the nodejs process) because the tests are executed in the browser environment. If that browser is headless, then there is no chance to see the logs.</p>\n<p>There is a way to set up a reporter for the <code>jasmine-browser-runner</code> so that the logs are shown on the terminal. (based on this Jasmine issue response <a href=\"https://github.com/jasmine/jasmine-browser-runner/issues/9#issuecomment-933608524\">https://github.com/jasmine/jasmine-browser-runner/issues/9#issuecomment-933608524</a>)\nSee the <code>spec/helpers/logs.js</code> in the code playground below. It will replace the <code>console.log</code> function with a custom one (by using <code>spyOn</code> :)) and store the arguments of each <code>console.log</code> in an array <code>logs</code> and <code>afterEach</code> spec will store the <code>logs</code> in the spec context for <code>spec/support/reporter.js</code> to use. Since the reporter runs in the context of the node.js process it can easily call <code>console.log</code> and result in the output showing on the terminal. That’s exactly what it does.</p>\n<p><em>If all this sounds too complicated - rest assured there is another way shown below “How to use browser dev tools”.</em></p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"Kq5JK0RTZor2SP4LFqYSG"},"iteration":3,"hash":1,"saveVersion":3},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":4563260270810,"maxId":5378844649837,"children":[{"id":8722107479931,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":9410323308928,"module":"helpers","leaf":false,"collapsed":true,"children":[{"id":4021183042249,"module":"logs.js","leaf":true,"data":{"content":"(function () {\r\n  console.log('this is a blind-spot')\r\n  let logs = [];\r\n\r\n  beforeAll(function () {\r\n    const originalLog = console.log;\r\n    spyOn(console, 'log').and.callFake(function () {\r\n      logs.push(arguments);\r\n      originalLog.call(console, arguments);\r\n    });\r\n  });\r\n\r\n  afterEach(function () {\r\n    setSpecProperty('consoleLogs', logs);\r\n    logs = [];\r\n  });\r\n})();\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":9410323308928}],"parentId":8722107479931},{"id":4152615053329,"module":"support","leaf":false,"collapsed":true,"children":[{"id":4563260270810,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter(), './spec/support/terminal-console-reporter.js']\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4152615053329},{"id":7529748230886,"module":"reporter.js","leaf":true,"data":{"content":"const { DefaultReporter } = require('jasmine-browser-runner');\r\n\r\nfunction Reporter() {}\r\nReporter.prototype = new DefaultReporter();\r\nconst originalSpecDone = Reporter.prototype.specDone;\r\n\r\nReporter.prototype.specDone = function (info) {\r\n  // originalSpecDone.call(this, info) // just adds a '.' in the output for a passed test\r\n  if (Array.isArray(info.properties.consoleLogs)) {\r\n    info.properties.consoleLogs.forEach((a) => console.log(...a));\r\n  }\r\n  delete info.properties.consoleLogs;\r\n};\r\n\r\nmodule.exports = Reporter;\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4152615053329}],"parentId":8722107479931},{"id":7340551769643,"module":"article-component.spec.mjs","leaf":true,"data":{"content":"import { ArticleComponent } from '../__src__/article.component.mjs';\n\ndescribe('ArticleComponent', () => {\n  let component;\n  let articleAPI;\n  let userMessenger;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', {\n      get: Promise.resolve({ id: 1, title: 'first', content: 'article' }),\n    });\n    userMessenger = jasmine.createSpyObj('userMessenger', ['info', 'error']);\n    component = new ArticleComponent(articleAPI, userMessenger);\n  });\n\n  it(`when initialized it should call the articleAPI get and assign the result to the article property`, async () => {\n    // arrange\n    component.articleId = 1;\n    // act\n    await component.afterComponentInitialize();\n    // assert\n    expect(articleAPI.get).toHaveBeenCalledOnceWith(1);\n    expect(component.article).toEqual(jasmine.objectContaining({ id: 1 }));\n    console.log(component, 'test1')\n  });\n\n  it(`when initialized it should call the articleAPI get and inform user upon article fetch failed`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.reject('error'));\n    // act\n    await component.afterComponentInitialize();\n    // assert\n    expect(userMessenger.error).toHaveBeenCalledOnceWith('Could not fetch article id: \"1\". Please try again.');\n  });\n\n  it(`when initialized it should set loading to true and back to false after the article response arrives`, async () => {\n    // arrange\n    articleAPI.get.and.returnValue(Promise.resolve({ id: 1 }));\n    component.articleId = 1;\n    // act\n    const initPromise = component.afterComponentInitialize();\n    // assert\n    expect(component.loading).toBe(true);\n    await initPromise;\n    expect(component.loading).toBe(false);\n  });\n\n  it(`when initialized it should set loading to true and back to false even after article fetch fails`, async () => {\n    // arrange\n    articleAPI.get.and.returnValue(Promise.reject({ message: 'error' }));\n    component.articleId = 1;\n    // act\n    const initPromise = component.afterComponentInitialize();\n    // assert\n    expect(component.loading).toBe(true);\n    await initPromise;\n    expect(component.loading).toBe(false);\n  });\n\n  it(`when destroyed it should not set the article property`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.resolve({id: 1, title: 'will not be shown to user because the component was destroyed'}));\n    const initPromise = component.afterComponentInitialize();\n    // act\n    component.beforeComponentDestroy();\n    await initPromise;\n    // assert\n    expect(component.article).toBeUndefined();\n  });\n\n  it(`when destroyed it should not inform user upon article fetch failed`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.reject('error'));\n    const initPromise = component.afterComponentInitialize();\n    // act\n    component.beforeComponentDestroy();\n    await initPromise;\n    // assert\n    expect(userMessenger.error).not.toHaveBeenCalledOnceWith('Could not fetch article id: \"1\". Please try again.');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":8722107479931}],"parentId":0},{"id":5378844649837,"module":"src","leaf":false,"collapsed":true,"children":[{"id":1045151737062,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  get(id) {\n    // make a GET /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5378844649837},{"id":4624462778559,"module":"article.component.mjs","leaf":true,"data":{"content":"export class ArticleComponent {\n  articleId; // or props.articleId\n\n  article;\n  loading;\n  destroyed;\n\n  articleAPI;\n  userMessenger;\n\n  constructor(articleApi, userMessenger) {\n    this.articleAPI = articleApi;\n    this.userMessenger = userMessenger;\n  }\n\n  async afterComponentInitialize() {\n    this.loading = true;\n    try {\n      const article = await this.articleAPI.get(this.articleId);\n      console.log('--- got article', article);\n      if(!this.destroyed) {\n        this.article = article;\n      }\n    } catch {\n      if(!this.destroyed) {\n        this.userMessenger.error(`Could not fetch article id: \"${this.articleId}\". Please try again.`);\n      }\n    }\n    this.loading = false;\n  }\n\n  beforeComponentDestroy() {\n    this.destroyed = true;\n    this.article = undefined;\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5378844649837},{"id":1714351509008,"module":"user-messanger.mjs","leaf":true,"data":{"content":"export class UserMessenger {\n    info() {\n        // show an info message (e.g. a snack)\n    }\n    error() {\n        // show an error message (e.g. a snack)\n    }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5378844649837}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/4.2.debug-jasmine-browser"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"uM6FX6QcFqrRsi-1hwQm1","caption":"Example of setting up and using console.log to debug browser-based JavaScript tests"},"iteration":29,"hash":2,"saveVersion":6},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown\n\nRunning this should yield the `--- got article {...}` for each test because that's getting logged out in the `afterComponentInitialize` method. Go ahead and add additional logging to see it appear in the terminal.\n\n_There is a blind spot for this method - it will not log out before the tests have begun. So if you use `console.log` in the helpers for example - that will not show in the terminal. [see jasmine issue: ...The drawback is ...](https://github.com/jasmine/jasmine-browser-runner/issues/9#issuecomment-933608524)_\n\nThe `logs.js` script is a helper, which means that it is executed in the browser after Jasmine runtime has been executed and before the spec-s run. In `logs.js` we attach callbacks to Jasmine's:\n\n    - `beforeAll` hook to run at the start of every `describe` and store the `console.log`'s arguments in `logs`\n    - `afterEach` hook to run after every `it` and store the `logs` in the context of the current spec\n\nThe `terminal-console-reporter.js` does not run in the browser's context, it runs in the Node.js context and has access to both the spec context (the same one that `afterEach` hook writes logs to) and the terminal's console to log out.\n\n## Log hints\n\n- Use a clearly visible delimiter e.g. `----` to make the log stand out.\n- Add a tag to each log so you can be sure where the log originated from:\n\n    ```js\n    console.log('---- article fetched', article);\n    //...\n    console.log('---- article updated', article);\n    ```\n- Make sure you don't cause exceptions in the log (by trying to log out `console.log(my.complex.object))` when `my` or `my.complex` is `undefined` or `null`.\n- Keep in mind that `console.log(a)` actually calls `a.toString()` which might have been replaced and the results could vary:\n\n    ```js\n    //somewhere\n    a.prototype.toString = function () {\n        return 'this will always be the result of a.toString()';\n    };\n    ```\n\n## How to use browser dev tools\n\nThere is another way, that's not reliant on custom reporters but instead uses the robust and proven browser developer tools. To use that we need to start `jasmine-browser-runner serve --port=9876`. That will serve the app and tests scripts (script modules) and allow a browser to render them by visiting `localhost:9876`. So in the code playground below hit Run and then you'll be able to open a browser and load that addresses just below the code playground (_If you run and debug locally on your machine then use localhost:9876_).\n\nUse the playground below and see the step-by-step demo video for details (_video is for local debug but the only difference is the address in the address bar of the browser_).","mdHtml":"<h2>Breakdown</h2>\n<p>Running this should yield the <code>--- got article {...}</code> for each test because that’s getting logged out in the <code>afterComponentInitialize</code> method. Go ahead and add additional logging to see it appear in the terminal.</p>\n<p><em>There is a blind spot for this method - it will not log out before the tests have begun. So if you use <code>console.log</code> in the helpers for example - that will not show in the terminal. <a href=\"https://github.com/jasmine/jasmine-browser-runner/issues/9#issuecomment-933608524\">see jasmine issue: …The drawback is …</a></em></p>\n<p>The <code>logs.js</code> script is a helper, which means that it is executed in the browser after Jasmine runtime has been executed and before the spec-s run. In <code>logs.js</code> we attach callbacks to Jasmine’s:</p>\n<pre><code>- `beforeAll` hook to run at the start of every `describe` and store the `console.log`'s arguments in `logs`\n- `afterEach` hook to run after every `it` and store the `logs` in the context of the current spec\n</code></pre>\n<p>The <code>terminal-console-reporter.js</code> does not run in the browser’s context, it runs in the Node.js context and has access to both the spec context (the same one that <code>afterEach</code> hook writes logs to) and the terminal’s console to log out.</p>\n<h2>Log hints</h2>\n<ul>\n<li>\n<p>Use a clearly visible delimiter e.g. <code>----</code> to make the log stand out.</p>\n</li>\n<li>\n<p>Add a tag to each log so you can be sure where the log originated from:</p>\n<pre><code class=\"language-js\">console.log('---- article fetched', article);\n//...\nconsole.log('---- article updated', article);\n</code></pre>\n</li>\n<li>\n<p>Make sure you don’t cause exceptions in the log (by trying to log out <code>console.log(my.complex.object))</code> when <code>my</code> or <code>my.complex</code> is <code>undefined</code> or <code>null</code>.</p>\n</li>\n<li>\n<p>Keep in mind that <code>console.log(a)</code> actually calls <code>a.toString()</code> which might have been replaced and the results could vary:</p>\n<pre><code class=\"language-js\">//somewhere\na.prototype.toString = function () {\n    return 'this will always be the result of a.toString()';\n};\n</code></pre>\n</li>\n</ul>\n<h2>How to use browser dev tools</h2>\n<p>There is another way, that’s not reliant on custom reporters but instead uses the robust and proven browser developer tools. To use that we need to start <code>jasmine-browser-runner serve --port=9876</code>. That will serve the app and tests scripts (script modules) and allow a browser to render them by visiting <code>localhost:9876</code>. So in the code playground below hit Run and then you’ll be able to open a browser and load that addresses just below the code playground (<em>If you run and debug locally on your machine then use localhost:9876</em>).</p>\n<p>Use the playground below and see the step-by-step demo video for details (<em>video is for local debug but the only difference is the address in the address bar of the browser</em>).</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"iOpgiFCBAVIh71inVj9kU"},"iteration":9,"hash":4,"saveVersion":2},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":false,"hideOutputUrl":false,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":5526896914823,"maxId":964471848483,"children":[{"id":7292137962998,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":2437406652832,"module":"helpers","leaf":false,"collapsed":true,"children":[{"id":8786112489309,"module":"logs.js","leaf":true,"data":{"content":"(function () {\r\n  let logs = [];\r\n\r\n  beforeAll(function () {\r\n    const originalLog = console.log;\r\n    spyOn(console, 'log').and.callFake(function () {\r\n      logs.push(arguments);\r\n      originalLog.call(console, arguments);\r\n    });\r\n  });\r\n\r\n  afterEach(function () {\r\n    setSpecProperty('consoleLogs', logs);\r\n    logs = [];\r\n  });\r\n})();\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":921752643397,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8535086379309,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter(), './spec/support/reporter.js']\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":42487660054,"module":"reporter.js","leaf":true,"data":{"content":"const { DefaultReporter } = require('jasmine-browser-runner');\r\n\r\nfunction Reporter() {}\r\nReporter.prototype = new DefaultReporter();\r\nconst originalSpecDone = Reporter.prototype.specDone;\r\n\r\nReporter.prototype.specDone = function (info) {\r\n  // originalSpecDone.call(this, info) // just adds a '.' in the output for a passed test\r\n  if (Array.isArray(info.properties.consoleLogs)) {\r\n    info.properties.consoleLogs.forEach((a) => console.log(...a));\r\n  }\r\n  delete info.properties.consoleLogs;\r\n};\r\n\r\nmodule.exports = Reporter;\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":88827813656,"module":"article-component.spec.mjs","leaf":true,"data":{"content":"import { ArticleComponent } from '../__src__/article.component.mjs';\n\ndescribe('ArticleComponent', () => {\n  let component;\n  let articleAPI;\n  let userMessenger;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', {\n      get: Promise.resolve({ id: 1, title: 'first', content: 'article' }),\n    });\n    userMessenger = jasmine.createSpyObj('userMessenger', ['info', 'error']);\n    component = new ArticleComponent(articleAPI, userMessenger);\n  });\n\n  it(`when initialized it should call the articleAPI get and assign the result to the article property`, async () => {\n    // arrange\n    component.articleId = 1;\n    // act\n    await component.afterComponentInitialize();\n    // assert\n    expect(articleAPI.get).toHaveBeenCalledOnceWith(1);\n    expect(component.article).toEqual(jasmine.objectContaining({ id: 1 }));\n  });\n\n  it(`when initialized it should call the articleAPI get and inform user upon article fetch failed`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.reject('error'));\n    // act\n    await component.afterComponentInitialize();\n    // assert\n    expect(userMessenger.error).toHaveBeenCalledOnceWith('Could not fetch article id: \"1\". Please try again.');\n  });\n\n  it(`when initialized it should set loading to true and back to false after the article response arrives`, async () => {\n    // arrange\n    articleAPI.get.and.returnValue(Promise.resolve({ id: 1 }));\n    component.articleId = 1;\n    // act\n    const initPromise = component.afterComponentInitialize();\n    // assert\n    expect(component.loading).toBe(true);\n    await initPromise;\n    expect(component.loading).toBe(false);\n  });\n\n  it(`when initialized it should set loading to true and back to false even after article fetch fails`, async () => {\n    // arrange\n    articleAPI.get.and.returnValue(Promise.reject({ message: 'error' }));\n    component.articleId = 1;\n    // act\n    const initPromise = component.afterComponentInitialize();\n    // assert\n    expect(component.loading).toBe(true);\n    await initPromise;\n    expect(component.loading).toBe(false);\n  });\n\n  it(`when destroyed it should not set the article property`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.resolve({id: 1, title: 'will not be shown to user because the component was destroyed'}));\n    const initPromise = component.afterComponentInitialize();\n    // act\n    component.beforeComponentDestroy();\n    await initPromise;\n    // assert\n    expect(component.article).toBeUndefined();\n  });\n\n  it(`when destroyed it should not inform user upon article fetch failed`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.reject('error'));\n    const initPromise = component.afterComponentInitialize();\n    // act\n    component.beforeComponentDestroy();\n    await initPromise;\n    // assert\n    expect(userMessenger.error).not.toHaveBeenCalledOnceWith('Could not fetch article id: \"1\". Please try again.');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":964471848483,"module":"src","leaf":false,"collapsed":true,"children":[{"id":5526896914823,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  get(id) {\n    // make a GET /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":8871263422365,"module":"article.component.mjs","leaf":true,"data":{"content":"export class ArticleComponent {\n  articleId; // or props.articleId\n\n  article;\n  loading;\n  destroyed;\n\n  articleAPI;\n  userMessenger;\n\n  constructor(articleApi, userMessenger) {\n    this.articleAPI = articleApi;\n    this.userMessenger = userMessenger;\n  }\n\n  async afterComponentInitialize() {\n    this.loading = true;\n    try {\n      const article = await this.articleAPI.get(this.articleId);\n      console.log('--- got article', article);\n      if(!this.destroyed) {\n        this.article = article;\n      }\n    } catch {\n      if(!this.destroyed) {\n        this.userMessenger.error(`Could not fetch article id: \"${this.articleId}\". Please try again.`);\n      }\n    }\n    this.loading = false;\n  }\n\n  beforeComponentDestroy() {\n    this.destroyed = true;\n    this.article = undefined;\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":3513393660960,"module":"user-messanger.mjs","leaf":true,"data":{"content":"export class UserMessenger {\n    info() {\n        // show an info message (e.g. a snack)\n    }\n    error() {\n        // show an error message (e.g. a snack)\n    }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/4.2.debug-jasmine-browser-tools"},"dockerJob":{"key":"_HdKrufyRdljupEH0uRCU","name":"Run jasmine-browser-runner serve","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner serve --port=9876\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"bsA2YJuH-aITr-y_MgmX1","isCopied":true,"caption":"Exposes app:9876 (see image below for how-to-start-debugging this code)"},"saveVersion":5,"iteration":21,"hash":3},{"type":"Image","mode":"edit","content":{"image_id":5578712080187392,"style":"original","caption":"1. Run. 2. Click on the App address 3. Start your dev tools and debug away ","page_id":"5970361676464128","borderColor":"#ccc","hasBorder":true,"page_type":"collection","auth_id":"6379329146060800","col_id":"5814889438773248","file":null,"metadata":{"width":1187,"height":587,"sizeInBytes":106151,"name":"debug-browser-js-start-app.png"},"comp_id":"sl203H_aTqOAFHAh7vD9d"},"iteration":5,"hash":5,"saveVersion":3},{"type":"Video","mode":"edit","content":{"version":"1.0","height":"450px","url":"https://youtu.be/7jEoZkD_FXE","caption":"Demo: how to start jasmine in serve mode and debug from a browser via dev tools","comp_id":"d8PPd_03ElcpiybsAby0h"},"iteration":3,"hash":6},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown (video)\n\nIn the video we see\n\n- Jasmine started in `serve` mode (only required for local debug session i.e. when running jasmine on your machine).\n  - `npx jasmine-browser-runner serve --config .\\spec\\support\\jasmine-browser.js --port 9876`\n- Open a browser and visit `localhost:9876` (only required for local debug session i.e. when running jasmine on your machine).\n  - When using the code playground just open the app address (see image above).\n- Open the browser developer tools.\n- Run a single test by clicking on it. (Click on `ArticleComponent` suite title to run the whole suite)\n- Open the spec file from the `Sources` tab and:\n  - notice already added breakpoints - browser remembers between sessions\n  - remove and add breakpoints and log-points\n- Log out and inspect the state of variables to the console.\n- Hove over code to see current state and values.\n\n## Exercise\n\n- debug and find the issue in the following set of mjs tests\n- try and focus on the single failing test\n- put a breakpoint in the test and look in the locals (or add a watch expression)\n\n\n","mdHtml":"<h2>Breakdown (video)</h2>\n<p>In the video we see</p>\n<ul>\n<li>Jasmine started in <code>serve</code> mode (only required for local debug session i.e. when running jasmine on your machine).\n<ul>\n<li><code>npx jasmine-browser-runner serve --config .\\spec\\support\\jasmine-browser.js --port 9876</code></li>\n</ul>\n</li>\n<li>Open a browser and visit <code>localhost:9876</code> (only required for local debug session i.e. when running jasmine on your machine).\n<ul>\n<li>When using the code playground just open the app address (see image above).</li>\n</ul>\n</li>\n<li>Open the browser developer tools.</li>\n<li>Run a single test by clicking on it. (Click on <code>ArticleComponent</code> suite title to run the whole suite)</li>\n<li>Open the spec file from the <code>Sources</code> tab and:\n<ul>\n<li>notice already added breakpoints - browser remembers between sessions</li>\n<li>remove and add breakpoints and log-points</li>\n</ul>\n</li>\n<li>Log out and inspect the state of variables to the console.</li>\n<li>Hove over code to see current state and values.</li>\n</ul>\n<h2>Exercise</h2>\n<ul>\n<li>debug and find the issue in the following set of mjs tests</li>\n<li>try and focus on the single failing test</li>\n<li>put a breakpoint in the test and look in the locals (or add a watch expression)</li>\n</ul>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"iiL40p-SJZts16lclNju7"},"iteration":5,"hash":7,"saveVersion":1},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":null,"maxId":8948933185660,"children":[{"id":7418330834236,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":4492822925320,"module":"helpers","leaf":false,"collapsed":true,"children":[{"id":6748871992367,"module":"logs.js","leaf":true,"data":{"content":"(function () {\r\n  let logs = [];\r\n\r\n  beforeAll(function () {\r\n    const originalLog = console.log;\r\n    spyOn(console, 'log').and.callFake(function () {\r\n      logs.push(arguments);\r\n      originalLog.call(console, arguments);\r\n    });\r\n  });\r\n\r\n  afterEach(function () {\r\n    setSpecProperty('consoleLogs', logs);\r\n    logs = [];\r\n  });\r\n})();\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":6399491628498,"module":"support","leaf":false,"collapsed":true,"children":[{"id":62668882285,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter(), './spec/support/reporter.js']\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":4768522788317,"module":"reporter.js","leaf":true,"data":{"content":"const { DefaultReporter } = require('jasmine-browser-runner');\r\n\r\nfunction Reporter() {}\r\nReporter.prototype = new DefaultReporter();\r\nconst originalSpecDone = Reporter.prototype.specDone;\r\n\r\nReporter.prototype.specDone = function (info) {\r\n  // originalSpecDone.call(this, info) // just adds a '.' in the output for a passed test\r\n  if (Array.isArray(info.properties.consoleLogs)) {\r\n    info.properties.consoleLogs.forEach((a) => console.log(...a));\r\n  }\r\n  delete info.properties.consoleLogs;\r\n};\r\n\r\nmodule.exports = Reporter;\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":1956363688344,"module":"article-component.spec.mjs","leaf":true,"data":{"content":"import { ArticleComponent } from '../__src__/article.component.mjs';\n\ndescribe('ArticleComponent', () => {\n  let component;\n  let articleAPI;\n  let userMessenger;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', {\n      get: Promise.resolve({ id: 1, title: 'first', content: 'article' }),\n    });\n    userMessenger = jasmine.createSpyObj('userMessenger', ['info', 'error']);\n    component = new ArticleComponent(articleAPI, userMessenger);\n  });\n\n  it(`when initialized it should call the articleAPI get and assign the result to the article property`, async () => {\n    // arrange\n    component.articleId = 1;\n    // act\n    await component.afterComponentInitialize();\n    // assert\n    expect(articleAPI.get).toHaveBeenCalledOnceWith(1);\n    expect(component.article).toEqual(jasmine.objectContaining({ id: 1 }));\n  });\n\n  it(`when initialized it should call the articleAPI get and inform user upon article fetch failed`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.reject('error'));\n    // act\n    await component.afterComponentInitialize();\n    // assert\n    expect(userMessenger.error).toHaveBeenCalledOnceWith('Could not fetch article id: \"1\". Please try again.');\n  });\n\n  it(`when initialized it should set loading to true and back to false after the article response arrives`, async () => {\n    // arrange\n    articleAPI.get.and.returnValue(Promise.resolve({ id: 1 }));\n    component.articleId = 1;\n    // act\n    const initPromise = component.afterComponentInitialize();\n    // assert\n    expect(component.loading).toBe(true);\n    await initPromise;\n    expect(component.loading).toBe(false);\n  });\n\n  it(`when initialized it should set loading to true and back to false even after article fetch fails`, async () => {\n    // arrange\n    articleAPI.get.and.returnValue(Promise.reject({ message: 'error' }));\n    component.articleId = 1;\n    // act\n    const initPromise = component.afterComponentInitialize();\n    // assert\n    expect(component.loading).toBe(true);\n    await initPromise;\n    expect(component.loading).toBe(false);\n  });\n\n  it(`when destroyed it should not set the article property`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.resolve({id: 1, title: 'will not be shown to user because the component was destroyed'}));\n    const initPromise = component.afterComponentInitialize();\n    // act\n    component.beforeComponentDestroy();\n    await initPromise;\n    // assert\n    expect(component.article).toBeUndefined();\n  });\n\n  it(`when destroyed it should not inform user upon article fetch failed`, async () => {\n    // arrange\n    component.articleId = 1;\n    articleAPI.get.and.returnValue(Promise.reject('error'));\n    const initPromise = component.afterComponentInitialize();\n    // act\n    component.beforeComponentDestroy();\n    await initPromise;\n    // assert\n    expect(userMessenger.error).not.toHaveBeenCalledOnceWith('Could not fetch article id: \"1\". Please try again.');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":8497633792066,"module":"article-delete-sync.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete-sync.mjs';\n\ndescribe('ArticleDelete (sync)', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, () => {\n    // arrange\n    // act\n    const result = article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n    expect(result).toEqual('article deleted: \"the first article\"');\n  });\n\n  it(`should return no article to delete when that's the case`, () => {\n    // arrange\n    // act\n    const result = article.delete();\n    // assert\n    expect(result).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":8630677719727,"module":"article-delete.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, async () => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n    // act\n    const result = await article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n    expect(result).toEqual('article deleted: \"the first article\"');\n  });\n\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, async () => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n    // act\n    const result = article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(result).toEqual('It looks like article \"the first article\" has already been deleted');\n  });\n\n  it(`should return no article to delete when that's the case`, async () => {\n    // arrange\n    // act\n    const result = await article.delete();\n    // assert\n    expect(result).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":3338380232718,"module":"days-ago.spec.mjs","leaf":true,"data":{"content":"\nimport { daysAgo } from '/__src__/days-ago.mjs';\n\ndescribe('daysAgo', () => {\n  it('should return 7 for a date 7 days ago', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 6 and 3/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 7 and 1/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock()\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":963746985221,"module":"draw-square.spec.mjs","leaf":true,"data":{"content":"import { drawSquare } from '/__src__/draw-square.mjs';\n\ndescribe('drawSquare', () => {\n  it('should create canvas, append it in the element, get a 2d context and draw the square', () => {\n    const contextMock = { rect: jasmine.createSpy('rect') };\n    const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n    const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n    const element = { appendChild: jasmine.createSpy('appendChild') };\n\n    drawSquare(element, 10);\n\n    expect(documentSpy).toHaveBeenCalledTimes(1);\n    expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n    expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n    expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":8948933185660,"module":"src","leaf":false,"collapsed":true,"children":[{"id":5559535466693,"module":"article-api-sync.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  get(id) {\n    // make a GET /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":7155103211607,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":6351892481954,"module":"article-create.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleCreate {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  create(title, content) {\n    if (typeof title === 'string' && typeof content === 'string') {\n      this.articleAPI.create(title, content);\n      return `article created: \"${title}\" with content \"${content}\"`;\n    }\n\n    return `expected string title and content but recived title: \"${title}\" content: \"${content}\"`;\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":914973033873,"module":"article-delete-sync.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api-sync.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  delete(a) {\n    if (a != null && a.id != null) {\n      this.articleAPI.delete(a.id);\n      return `article deleted: \"${a.title}\"`;\n    }\n\n    return 'no article to delete';\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":3421754699358,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  async delete(a) {\n    if (a != null && a.id != null) {\n      try {\n        await this.articleAPI.delete(a.id);\n        return `article deleted: \"${a.title}\"`;\n      } catch (e) {\n        if (e && e.status === 404) {\n          console.log('---- already been deleted ----' )\n          return `It looks like article \"${a.title}\" has already been deleted`;\n        }\n\n        return `Unknown error trying to delete \"${a.title}\". Please try again.`;\n      }\n    }\n\n    return 'no article to delete';\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":8099204970682,"module":"article.component.mjs","leaf":true,"data":{"content":"export class ArticleComponent {\n  articleId; // or props.articleId\n\n  article;\n  loading;\n  destroyed;\n\n  articleAPI;\n  userMessenger;\n\n  constructor(articleApi, userMessenger) {\n    this.articleAPI = articleApi;\n    this.userMessenger = userMessenger;\n  }\n\n  async afterComponentInitialize() {\n    this.loading = true;\n    try {\n      const article = await this.articleAPI.get(this.articleId);\n      console.log('--- got article', article);\n      if(!this.destroyed) {\n        this.article = article;\n      }\n    } catch {\n      if(!this.destroyed) {\n        this.userMessenger.error(`Could not fetch article id: \"${this.articleId}\". Please try again.`);\n      }\n    }\n    this.loading = false;\n  }\n\n  beforeComponentDestroy() {\n    this.destroyed = true;\n    this.article = undefined;\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":3630299289398,"module":"days-ago.mjs","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexport function daysAgo(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = agoMilliseconds / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":409688473553,"module":"days-until.mjs","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexport function daysUntil(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const until = dateMilliseconds - nowMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = until / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":9650730647196,"module":"draw-square.mjs","leaf":true,"data":{"content":"/**\n * Draw a square within the element with a given width\n * @param {HTMLElement} element\n * @param width number\n */\nexport function drawSquare(element, width) {\n  const canvas = document.createElement('canvas');\n  element.appendChild(canvas);\n  const context = canvas.getContext('2d');\n  context.rect(0, 0, width, width);\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":395029743364,"module":"user-messanger.mjs","leaf":true,"data":{"content":"export class UserMessenger {\n    info() {\n        // show an info message (e.g. a snack)\n    }\n    error() {\n        // show an error message (e.g. a snack)\n    }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/4.2.debug-jasmine-browser-exercise"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"vD3IVjCDnPJmSxFm5y8ph","caption":"Exercise - fix the broken tests","isCopied":true},"saveVersion":5,"iteration":4,"hash":8},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"Add a breakpoint after the line `const context = canvas.getContext('2d');` and note the `context` value.","mdHtml":"<p>Add a breakpoint after the line <code>const context = canvas.getContext('2d');</code> and note the <code>context</code> value.</p>\n","showHintText":"Show Hint for the drawSquare error","hideHintText":"Hide Hint","showIcon":true,"comp_id":"KYIMHg8uusPpvGyNso5gY"},"iteration":15,"hash":9,"saveVersion":1},{"type":"SpoilerEditor","mode":"view","content":{"version":"3.0","text":"The `delete` method is not awaited so we are trying to match an object with a string.","mdHtml":"<p>The <code>delete</code> method is not awaited so we are trying to match an object with a string.</p>\n","showHintText":"Show Hint for the ArticleDelete error","hideHintText":"Hide Hint","showIcon":true,"comp_id":"kMgsTYEarCabY7FAj87D9","isCopied":true},"iteration":6,"hash":10,"saveVersion":1},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Why does `console.log` output but the test still fails?\n\nWhy does the console read `---- already been deleted ----` which means that the expected result is being returned but the test still fails?\n\nThe console.log expression is queued during the spec execution and executes after the `expect`-ation of the test has been executed. Promises are queued in the microtask queue and executed after the current call stack has emptied (i.e. whatever the current js is doing will continue until completion and then the task queue will be drained). ","mdHtml":"<h2>Why does <code>console.log</code> output but the test still fails?</h2>\n<p>Why does the console read <code>---- already been deleted ----</code> which means that the expected result is being returned but the test still fails?</p>\n<p>The console.log expression is queued during the spec execution and executes after the <code>expect</code>-ation of the test has been executed. Promises are queued in the microtask queue and executed after the current call stack has emptied (i.e. whatever the current js is doing will continue until completion and then the task queue will be drained).</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"8-L7KJVctVIonnZ5w4XyK"},"iteration":8,"hash":11,"saveVersion":2}],"summary":{"title":"How to Debug Browser-Javascript Tests","description":"When running the tests for our browser application with Jasmine, we have a slightly different approach to debugging. There is the good old `console.log` as well as the browser developer tools. In this lesson, we'll look at how to set up logging out to the node.js console, what's getting logged in the browser console, and how to start a debugging session with Jasmine using the browser developer tools.","tags":["debug","javascript","browser"],"titleUpdated":true}}