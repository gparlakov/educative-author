{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"\nDebugging our unit tests is very important. There are a few techniques for doing that.\n\n## Run a single test\n\nIsolating a single test allows us to focus on it and make sure the issue we are debugging is indeed caused by this test. Jasmine provides the `fit` capability for focusing on a single test and only running it, skipping all the rest.\n\n```js\nfit('this is the only test that will run', () => {...})\n```\n\nIt works for multiple `fit`-s too. See the example below.\n\n```js\nfit('this is the only test that will run', () => {...})\nfit('this is the only other test that will run', () => {...})\n```\n\n## Using the `console.log`\n\nThere's the `console.log` (and its sibling methods [info, table, ...](https://developer.mozilla.org/en-US/docs/Web/API/console#methods)). It allows us to log out states and markers at various stages of the execution of our tests. Let's see an example in the playground below.","mdHtml":"<p>Debugging our unit tests is very important. There are a few techniques for doing that.</p>\n<h2>Run a single test</h2>\n<p>Isolating a single test allows us to focus on it and make sure the issue we are debugging is indeed caused by this test. Jasmine provides the <code>fit</code> capability for focusing on a single test and only running it, skipping all the rest.</p>\n<pre><code class=\"language-js\">fit('this is the only test that will run', () =&gt; {...})\n</code></pre>\n<p>It works for multiple <code>fit</code>-s too. See the example below.</p>\n<pre><code class=\"language-js\">fit('this is the only test that will run', () =&gt; {...})\nfit('this is the only other test that will run', () =&gt; {...})\n</code></pre>\n<h2>Using the <code>console.log</code></h2>\n<p>There’s the <code>console.log</code> (and its sibling methods <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console#methods\">info, table, …</a>). It allows us to log out states and markers at various stages of the execution of our tests. Let’s see an example in the playground below.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"n39IJSor03071VxcHYzK4"},"iteration":1,"hash":1,"saveVersion":5},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":1014200882652,"maxId":7540401272341,"children":[{"id":5113543508377,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":2843545265413,"module":"support","leaf":false,"collapsed":true,"children":[{"id":930593513924,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":9722115950550,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}]},{"id":7540401272341,"module":"src","leaf":false,"collapsed":true,"children":[{"id":3957020838593,"module":"days-ago.js","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexports.daysAgo = function(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = agoMilliseconds / millisecondsInADay;\n  console.log('--------', 'ago', daysAgo, 'msAgo', agoMilliseconds);\n  return Math.round(daysAgo);\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":1014200882652,"module":"days-ago.spec.js","leaf":true,"data":{"content":"const { daysAgo } = require('./days-ago.js');\n\ndescribe('daysAgo', () => {\n  it('should return 7 for a date 7 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3));\n    console.log('------------{0} expecting 7, got', ago);\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 6 and 3/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n    console.log('------------{1} expecting 7, got', ago);\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 7 and 1/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n    console.log('------------{2} expecting 7, got', ago);\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/4.1.debug-nodejs","foldersState":{"/spec/":true,"/spec/support/":true,"/src/":true}},"dockerJob":{"key":"1rdAFmLSAtok1ys3d614r","name":"Run jasmine","inputFileName":"index.js","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** . && npx jasmine","jobType":"Default","runInLiveContainer":false},"appUrl":":9876","comp_id":"2C28V5_FQij0zsC7Ti7cT","caption":"Example of using console.log to log out state from the code and tests."},"iteration":0,"hash":2,"saveVersion":3},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"Notice logging in the `src/days-ago.js` and the `src/days-ago.spec.js`:\n\n- ```js\n  console.log('--------', 'ago', daysAgo, 'msAgo', agoMilliseconds);\n  ```\n\n  This prints out a marker (makes the log easy to discern) and then, separated by commas, prints out the name of the variable and its value.\n\n- ```js\n  console.log('------------{2} expecting 7, got', ago);\n  ```\n\n  This is similar to the above, only on the spec side.\n\n## Live debug\n\nWe can use a debugger that understands javascript debugging. That includes browsers, IDEs like VS Code, WebStorm, IntelliJ... Let's see a demo of browser-based debugging:\n","mdHtml":"<p>Notice logging in the <code>src/days-ago.js</code> and the <code>src/days-ago.spec.js</code>:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">console.log('--------', 'ago', daysAgo, 'msAgo', agoMilliseconds);\n</code></pre>\n<p>This prints out a marker (makes the log easy to discern) and then, separated by commas, prints out the name of the variable and its value.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">console.log('------------{2} expecting 7, got', ago);\n</code></pre>\n<p>This is similar to the above, only on the spec side.</p>\n</li>\n</ul>\n<h2>Live debug</h2>\n<p>We can use a debugger that understands javascript debugging. That includes browsers, IDEs like VS Code, WebStorm, IntelliJ… Let’s see a demo of browser-based debugging:</p>\n","cursorPosition":612,"comp_id":"N0kt-FBnZ8k_pA3_95_2Y"},"iteration":0,"hash":3},{"type":"Video","mode":"edit","content":{"version":"1.0","height":"450px","url":"https://youtu.be/RteTmXjKj5g","caption":"Demo of step-by-step debugging node.js process from a browser","comp_id":"bI3L-Z3ffx_Cq9T-TtNlJ"},"iteration":0,"hash":4,"saveVersion":1},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"In that demo we :\n\n- ```sh\n  node --inspect-brk ../node_modules/jasmine/bin/jasmine.js\n  ```\n\n  Start the Jasmine script in debug mode (aka inspect mode) and outputs the WebSocket address, port, and id : `Debugger listening on ws://127.0.0.1:9229/11bc3c5b-4703-4a09-926d-6f03d5c4ef00`. `--inspect-brk` means that the debugger server will break on the first line of the script and wait for a debugger client (in this case the browser) to attach.\n  _In the example the node_modules are one folder up - `../node_modules`. Usually, it's `./node_modules` like in the example below._\n\n- Then, we show the browser and navigate to `edge://inspect` (for chrome it would be `chrome://inspect`).\n- In the inspect tab we select the node process which is automatically shown based on the default config - localhost and port 9229. The `Configuration` button allows for adding other addresses or ports to search (although it seems using another port e.g. 9876 does not work).\n- After the browser (debug client) attaches we see the first line of the script - Jasmine.\n- Clicking on the `Resume` button we continue to a `debugger` statement in our code.\n- At this point we are debugging our script. We can add breakpoints, remove breakpoints, evaluate expressions in the console that run in the context of the current scope i.e. wherever the script breaks and whatever it sees we can use in the evaluation. There's a bunch of stuff that the debugger allows - [Edge](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/) [Chrome](https://developer.chrome.com/docs/devtools/javascript/).\n- After we finish debugging and allow the script to run its course and end the debugger server waits for the debugger client to disconnect `Waiting for the debugger to disconnect...` and then closes the WebSocket and exits.\n\n## Exercise debugger\n\nThe code for the demo is in the next code playground. I urge you to try running the debugger yourself: download the code from the playground, and run `npm i`, and then start `node --inspect-brk ./node_modules/jasmine/bin/jasmine.js`, and debug away. (already added a `debugger;` statement)\n\n\n","mdHtml":"<p>In that demo we :</p>\n<ul>\n<li>\n<pre><code class=\"language-sh\">node --inspect-brk ../node_modules/jasmine/bin/jasmine.js\n</code></pre>\n<p>Start the Jasmine script in debug mode (aka inspect mode) and outputs the WebSocket address, port, and id : <code>Debugger listening on ws://127.0.0.1:9229/11bc3c5b-4703-4a09-926d-6f03d5c4ef00</code>. <code>--inspect-brk</code> means that the debugger server will break on the first line of the script and wait for a debugger client (in this case the browser) to attach.\n<em>In the example the node_modules are one folder up - <code>../node_modules</code>. Usually, it’s <code>./node_modules</code> like in the example below.</em></p>\n</li>\n<li>\n<p>Then, we show the browser and navigate to <code>edge://inspect</code> (for chrome it would be <code>chrome://inspect</code>).</p>\n</li>\n<li>\n<p>In the inspect tab we select the node process which is automatically shown based on the default config - localhost and port 9229. The <code>Configuration</code> button allows for adding other addresses or ports to search (although it seems using another port e.g. 9876 does not work).</p>\n</li>\n<li>\n<p>After the browser (debug client) attaches we see the first line of the script - Jasmine.</p>\n</li>\n<li>\n<p>Clicking on the <code>Resume</code> button we continue to a <code>debugger</code> statement in our code.</p>\n</li>\n<li>\n<p>At this point we are debugging our script. We can add breakpoints, remove breakpoints, evaluate expressions in the console that run in the context of the current scope i.e. wherever the script breaks and whatever it sees we can use in the evaluation. There’s a bunch of stuff that the debugger allows - <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/\">Edge</a> <a href=\"https://developer.chrome.com/docs/devtools/javascript/\">Chrome</a>.</p>\n</li>\n<li>\n<p>After we finish debugging and allow the script to run its course and end the debugger server waits for the debugger client to disconnect <code>Waiting for the debugger to disconnect...</code> and then closes the WebSocket and exits.</p>\n</li>\n</ul>\n<h2>Exercise debugger</h2>\n<p>The code for the demo is in the next code playground. I urge you to try running the debugger yourself: download the code from the playground, and run <code>npm i</code>, and then start <code>node --inspect-brk ./node_modules/jasmine/bin/jasmine.js</code>, and debug away. (already added a <code>debugger;</code> statement)</p>\n","cursorPosition":2127,"comp_id":"SdmDCNLDcllpBN_GuR_g2"},"iteration":0,"hash":5},{"type":"Image","mode":"edit","content":{"image_id":4844982449471488,"style":"original","caption":"Where is the download button?","page_id":"6033274961395712","borderColor":"#e6b8af","hasBorder":true,"page_type":"collection","auth_id":"6379329146060800","col_id":"5814889438773248","file":null,"metadata":{"width":1076,"height":230,"sizeInBytes":48613,"name":"download-button.png"},"comp_id":"Di3Cjia-98_8In100rQfC"},"iteration":0,"hash":12,"saveVersion":3},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":33937594296,"maxId":33937594296,"children":[{"id":9030835737177,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":5677589540059,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8279123838571,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5677589540059},{"id":588595521057,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5677589540059}],"parentId":9030835737177}],"parentId":0},{"id":510130982371,"module":"src","leaf":false,"collapsed":true,"children":[{"id":9690773963757,"module":"article-controller.js","leaf":true,"data":{"content":"class ArticleController {\n  db;\n\n  constructor(db) {\n    this.db = db;\n  }\n\n  async get(id) {\n    try {\n      const a = await this.db.collection('Article').findOne({ id: id });\n      return a;\n    } catch (e) {\n      throw { status: 'not found', message: `Article with id \"${id}\" was not found.` };\n    }\n  }\n}\n\nexports.ArticleApiController = ArticleController;\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":510130982371},{"id":330123162105,"module":"article-controller.spec.js","leaf":true,"data":{"content":"const { ArticleApiController } = require('./article-controller.js');\n\ndescribe('ArticleApiController', () => {\n  let db;\n  let articleCollection;\n  let articleController;\n\n  beforeEach(() => {\n    articleCollection = jasmine.createSpyObj('collection', ['findOne', 'delete']);\n    db = jasmine.createSpyObj('db mock', {\n      collection: articleCollection,\n    });\n    articleController = new ArticleApiController(db);\n  });\n\n  describe('when get called', () => {\n    debugger;\n    it('should search the article collection and resolve with the article when found', async () => {\n      // arrange\n      articleCollection.findOne.and.returnValue(Promise.resolve({ id: 1, title: 'Article', content: 'The lorem ipsum ...' }));\n      // act\n      const a = await articleController.get(1);\n      // assert\n      expect(articleCollection.findOne).toHaveBeenCalledOnceWith({ id: 1 });\n      expect(a).toEqual(jasmine.objectContaining({ id: 1 }));\n    });\n\n    it('should search the article collection and reject with an object with status and message', async () => {\n      // arrange\n      articleCollection.findOne.and.returnValue(Promise.reject({ error: 'eee' }));\n      // act\n      // assert\n      await expectAsync(articleController.get(1)).toBeRejectedWith({\n        status: 'not found',\n        message: 'Article with id \"1\" was not found.',\n      });\n    });\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":510130982371}],"parentId":0},{"id":33937594296,"module":"package.json","leaf":true,"data":{"content":"{\n  \"name\": \"test-app\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"devDependencies\": {\n    \"@types/jasmine\": \"~3.6.0\",\n    \"@types/node\": \"^12.11.1\",\n    \"jasmine\": \"^3.7.0\",\n    \"jasmine-browser-runner\": \"^0.7.0\",\n    \"jasmine-core\": \"~3.6.0\",\n    \"jasmine-spec-reporter\": \"~5.0.0\",\n    \"nodemon\": \"^2.0.13\",\n    \"pre-commit\": \"^1.2.2\",\n    \"ts-node\": \"~8.3.0\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~4.1.5\"\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/4.1.debug-nodejs-browser-demo","foldersState":{},"judge":{"judgeActive":false}},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Code to try debugging locally - download and npm i and node --inspect-brk....","comp_id":"hwWcdP0l6qPRfr-yjXagx"},"iteration":0,"hash":6,"saveVersion":2},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Exercise\n\nThe following code playground has some broken tests. Let's fix them and use the debugging techniques from the lesson: `fit`, `console`, or debugger (you'd have to download the code for that).\n\nFair warning - we've added a few of the previous lesson tests in one place to make it more crowded and more like real-world test debugging. There is a catch so - good luck.\n_If you choose to download the code you'd need to run `npm i` before starting `node --inspect-brk ...`._\n","mdHtml":"<h2>Exercise</h2>\n<p>The following code playground has some broken tests. Let’s fix them and use the debugging techniques from the lesson: <code>fit</code>, <code>console</code>, or debugger (you’d have to download the code for that).</p>\n<p>Fair warning - we’ve added a few of the previous lesson tests in one place to make it more crowded and more like real-world test debugging. There is a catch so - good luck.\n<em>If you choose to download the code you’d need to run <code>npm i</code> before starting <code>node --inspect-brk ...</code>.</em></p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"Nl6u823bRQcDU4ge3rdrU"},"iteration":0,"hash":7,"saveVersion":1},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":73835572198,"maxId":73835572198,"children":[{"id":9691434007290,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":664983717578,"module":"support","leaf":false,"collapsed":true,"children":[{"id":9313192988638,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":664983717578},{"id":2289345997387,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":664983717578}],"parentId":9691434007290}],"parentId":0},{"id":2407068988910,"module":"src","leaf":false,"collapsed":true,"children":[{"id":3273085916137,"module":"article-controller.js","leaf":true,"data":{"content":"class ArticleController {\n  db;\n\n  constructor(db) {\n    this.db = db;\n  }\n\n  async get(id) {\n    try {\n      const a = await this.db.collection('Article').findOne({ id: id });\n      return a;\n    } catch (e) {\n      throw { status: 'not found', message: `Article with id \"${id}\" was not found.` };\n    }\n  }\n}\n\nexports.ArticleApiController = ArticleController;\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":7241351584321,"module":"article-controller.spec.js","leaf":true,"data":{"content":"const { ArticleApiController } = require('./article-controller.js');\n\ndescribe('ArticleApiController', () => {\n  let db;\n  let articleCollection;\n  let articleController;\n\n  beforeEach(() => {\n    articleCollection = jasmine.createSpyObj('collection', ['findOne', 'delete']);\n    db = jasmine.createSpyObj('db mock', {\n      collection: articleCollection,\n    });\n    articleController = new ArticleApiController(db);\n  });\n\n  describe('when get called', () => {\n    debugger;\n    it('should search the article collection and resolve with the article when found', async () => {\n      // arrange\n      articleCollection.findOne.and.returnValue(Promise.resolve({ id: 1, title: 'Article', content: 'The lorem ipsum ...' }));\n      // act\n      const a = await articleController.get(1);\n      // assert\n      expect(articleCollection.findOne).toHaveBeenCalledOnceWith({ id: 1 });\n      expect(a).toEqual(jasmine.objectContaining({ id: 1 }));\n    });\n\n    it('should search the article collection and reject with an object with status and message', async () => {\n      // arrange\n      articleCollection.findOne.and.returnValue(Promise.reject({ error: 'eee' }));\n      // act\n      // assert\n      await expectAsync(articleController.get(1)).toBeRejectedWith({\n        status: 'not found',\n        message: 'Article with id \"1\" was not found.',\n      });\n    });\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":7911114842512,"module":"days-ago.js","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexports.daysAgo = function(date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const agoMilliseconds = nowMilliseconds - dateMilliseconds;\n\n  const millisecondsInADay = 84200000;\n  const daysAgo = agoMilliseconds / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":9380890744506,"module":"days-ago.spec.js","leaf":true,"data":{"content":"const { daysAgo } = require('./days-ago.js');\n\ndescribe('daysAgo', () => {\n  it('should return 7 for a date 7 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 6 and 3/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 3, 6, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 7 for a date 7 and 1/4 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 10));\n\n    // act\n    const ago = daysAgo(new Date(2021, 8, 2, 18, 0, 0));\n\n    // assert\n    expect(ago).toBe(7);\n\n    clock.uninstall();\n  });\n\n  it('should return 70 for a date 70 days ago', () => {\n    // arrange\n    const clock = jasmine.clock();\n    clock.install().mockDate(new Date(2021, 8, 25));\n\n    // act\n    const ago = daysAgo(new Date(2021, 6, 15));\n\n    // assert\n    expect(ago).toBe(70);\n\n    clock.uninstall();\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":3087539028688,"module":"days-until.js","leaf":true,"data":{"content":"/**\n * How many days ago was a date\n * @param {Date} date\n */\nexports.daysUntil = function (date) {\n  const nowMilliseconds = Date.now();\n  const dateMilliseconds = date.valueOf();\n\n  const until = dateMilliseconds - nowMilliseconds;\n\n  const millisecondsInADay = 1000 * 60 * 60 * 24;\n  const daysAgo = until / millisecondsInADay;\n  return Math.round(daysAgo);\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":5806063616440,"module":"days-until.spec.js","leaf":true,"data":{"content":"const { daysUntil } = require('./days-until.js');\n\ndescribe('daysUntil', () => {\n  it('should return 5 for a date 5 days in the future', () => {\n    pending('replace with logic for 5 days in the future');\n  });\n\n  it('should return 5 for a date 5 and 1/4 days in the future', () => {\n    pending('replace with logic for 5 and 1/4 days in the future');\n\n  });\n\n  it('should return 5 for a date 4 and 3/4 days in the future', () => {\n    pending('replace with logic for 4 and 3/4 days in the future');\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":2654700988739,"module":"first-n-chars.js","leaf":true,"data":{"content":"/**\n *\n * @param {string} text\n * @param {number} n\n * @returns string\n */\nexports.firstNChars = function firstNChars(text, n) {\n  /**\n   * part 2\n   */\n  if (text === null || text === undefined) {\n    throw new Error('Unexpected \"text\" type. Expected \"string\" got: ' + text);\n  }\n  if (typeof text !== 'string') {\n    throw new Error(`Unexpected \"text\" type. Expected \"string\" got: ${typeof text}`);\n  }\n  /**\n   * part 3\n   */\n  if (n === null || n === undefined) {\n    throw new Error('Unexpected \"n\" type. Expected \"number\" got: ' + n);\n  }\n  if (typeof n !== 'number') {\n    throw new Error(`Unexpected \"n\" type. Expected \"number\" got: ${typeof n}`);\n  }\n  if(n <= 0) {\n    throw new Error(`Unexpected \"n\" value. Expected positive number got: ${n}`)\n  }\n  /**\n   * part 1\n   */\n  return text.slice(0, n);\n};\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":5717897737486,"module":"first-n-chars.spec.js","leaf":true,"data":{"content":"const { firstNChars } = require('./first-n-chars');\n\ndescribe('firstNChars', () => {\n  /**\n   * part 1\n   */\n  it('should return first 10 chars from the string', () => {\n    const actual = firstNChars('a veery long string that should be shortened', 10);\n    const expected = 'a veery lo';\n    expect(actual).toEqual(expected);\n  });\n\n  // part 2\n  it('should throw error expected text to be string got null or undefined', () => {\n    expect(() => firstNChars(null, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: null'));\n    expect(() => firstNChars(undefined, 10)).toThrow(\n      new Error('Unexpected \"text\" type. Expected \"string\" got: undefined')\n    );\n  });\n  it('should throw error expected text to be string got other type', () => {\n    expect(() => firstNChars(1, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: number'));\n    expect(() => firstNChars({}, 10)).toThrow(new Error('Unexpected \"text\" type. Expected \"string\" got: object'));\n  });\n\n  // part 3\n  it('should throw error n expected number got null or undefined', () => {\n    expect(() => firstNChars('test', null)).toThrow(new Error('Unexpected \"n\" type. Expected \"number\" got: null'));\n    expect(() => firstNChars('test', undefined)).toThrow(\n      new Error('Unexpected \"n\" type. Expected \"number\" got: undefined')\n    );\n  });\n\n  it('should throw error n expected number got other type', () => {\n    expect(() => firstNChars('test', '1')).toThrow(new Error('Unexpected \"n\" type. Expected \"number\" got: string'));\n    expect(() => firstNChars('test', {})).toThrow(new Error('Unexpected \"n\" type. Expected \"number\" got: object'));\n  });\n\n  it('should throw error n expected positive number got negative or 0', () => {\n    expect(() => firstNChars('test', -1)).toThrow(new Error('Unexpected \"n\" value. Expected positive number got: -1'));\n    expect(() => firstNChars('test', 0)).toThrow(new Error('Unexpected \"n\" value. Expected positive number got: 0'));\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":9742931318436,"module":"maybe-string.js","leaf":true,"data":{"content":"/**\n * @param {string} str\n * @param {(s: string) => any} callback\n */\nexports.maybeString = function maybeString(str, callback) {\n  if(typeof str === 'string' && typeof callback === 'function') {\n    return callback(str);\n  }\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910},{"id":813451408625,"module":"maybe-string.spec.js","leaf":true,"data":{"content":"// @ts-nocheck\nconst { maybeString } = require('./maybe-string');\n\ndescribe('maybe-string', () => {\n\n  it('should call the callback if string passed in', () => {\n    const spy = jasmine.createSpy('callback');\n    maybeString('s', spy);\n\n    expect(spy).toHaveBeenCalled();\n    expect(spy).toHaveBeenCalledTimes(1);\n    expect(spy).toHaveBeenCalledWith('s');\n  });\n\n  it('should not call the callback if no null, number or object passed in', () => {\n    const spy = jasmine.createSpy('callback');\n    maybeString(null, spy);\n    maybeString(undefined, spy);\n    maybeString(1, spy);\n    maybeString({}, spy);\n\n    expect(spy).not.toHaveBeenCalled();\n  });\n\n  it('should return the result of callback when string', () => {\n    const actual = maybeString('my string', s => s.length);\n\n    expect(actual).toBe(9);\n  });\n\n  it('should call the callback if string passed in', () => {\n    const spy = jasmine.createSpy('callback');\n    maybeString('S', spy);\n\n    expect(spy).toHaveBeenCalled();\n    expect(spy).toHaveBeenCalledTimes(1);\n    expect(spy).toHaveBeenCalledWith('s');\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2407068988910}],"parentId":0},{"id":73835572198,"module":"package.json","leaf":true,"data":{"content":"{\n  \"name\": \"test-app\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"devDependencies\": {\n    \"@types/jasmine\": \"~3.6.0\",\n    \"@types/node\": \"^12.11.1\",\n    \"jasmine\": \"^3.7.0\",\n    \"jasmine-browser-runner\": \"^0.7.0\",\n    \"jasmine-core\": \"~3.6.0\",\n    \"jasmine-spec-reporter\": \"~5.0.0\",\n    \"nodemon\": \"^2.0.13\",\n    \"pre-commit\": \"^1.2.2\",\n    \"ts-node\": \"~8.3.0\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~4.1.5\"\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/4.1.debug-nodejs-exercise","foldersState":{},"judge":{"judgeActive":false}},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Exercise. Can download for local debug.","comp_id":"ouo7Bvy1JBnfD5OxiWXcj","isCopied":true},"iteration":0,"hash":8,"saveVersion":2},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"\nThere are two tests with the same name and debugging the first will not fix the broken test.\n","mdHtml":"<p>There are two tests with the same name and debugging the first will not fix the broken test.</p>\n","showHintText":"Show Hint for maybe-string","hideHintText":"Hide Hint","showIcon":true,"comp_id":"YX2UARdEeKjZ-9LAx0npf"},"iteration":1,"hash":9},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"Make sure you check the number of milliseconds in a day. For example `console.log('is right amount of millis', 24*60*60*1000 === 84200000)`","mdHtml":"<p>Make sure you check the number of milliseconds in a day. For example <code>console.log('is right amount of millis', 24*60*60*1000 === 84200000)</code></p>\n","showHintText":"Show Hint for days-ago","hideHintText":"Hide Hint","showIcon":true,"comp_id":"GGXC-rwhczJSObA0C6lgW"},"iteration":1,"hash":10,"saveVersion":3}],"summary":{"title":"How to Debug Node.js Unit Tests","titleUpdated":true,"description":"In this lesson we'll look at a few techniques that enable and facilitate debugging like focusing on a single test, using the `console.log` and a debugger.","tags":["debug","unit test","Node.js"]}}