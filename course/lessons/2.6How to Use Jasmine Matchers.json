{"components":[{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"For functions with the random output, unit testing becomes a little bit harder. For example:\n\n```js\nfunction random() {\n  return Math.random() > 0.5 ? 'a string' : 'another string';\n}\n\n// unit test\nit('should verify function returns a random string', () => {\n  expect(random()).toEqual('a string');\n});\n```\n\nThe above test will fail 50% of the time as the `random` function will get a `Math.random` value, which is anywhere between 0 and 1, and based on that will decide which string to return one string or the other.\n\nThis is where `jasmine.any` comes in. It allows the `toEqual` to verify that the `expected` is an instance of the constructor function that is passed in `jasmine.any`. In the example above:\n\n```js\n// unit test\nit('should verify function returns a random string', () => {\n  expect(random()).toEqual(jasmine.any(String));\n});\n```\n\nThat is to say: Hey, Jasmine, make sure that the `expected` is an of the type that calling `String` yields, or fail the test.\n\n> Notice the uppercase **String**. That's the run-time available Function object `String`. E.g. `typeof 'my string' === 'string'` and `typeof String('my string') === 'string'` are both `true`.\n> But `typeof new String('my string') === 'object'`. _Notice the use of `new` keyword creates an object._\n\nUnit testing example:","mdHtml":"<p>For functions with the random output, unit testing becomes a little bit harder. For example:</p>\n<pre><code class=\"language-js\">function random() {\n  return Math.random() &gt; 0.5 ? 'a string' : 'another string';\n}\n\n// unit test\nit('should verify function returns a random string', () =&gt; {\n  expect(random()).toEqual('a string');\n});\n</code></pre>\n<p>The above test will fail 50% of the time as the <code>random</code> function will get a <code>Math.random</code> value, which is anywhere between 0 and 1, and based on that will decide which string to return one string or the other.</p>\n<p>This is where <code>jasmine.any</code> comes in. It allows the <code>toEqual</code> to verify that the <code>expected</code> is an instance of the constructor function that is passed in <code>jasmine.any</code>. In the example above:</p>\n<pre><code class=\"language-js\">// unit test\nit('should verify function returns a random string', () =&gt; {\n  expect(random()).toEqual(jasmine.any(String));\n});\n</code></pre>\n<p>That is to say: Hey, Jasmine, make sure that the <code>expected</code> is an of the type that calling <code>String</code> yields, or fail the test.</p>\n<blockquote>\n<p>Notice the uppercase <strong>String</strong>. That’s the run-time available Function object <code>String</code>. E.g. <code>typeof 'my string' === 'string'</code> and <code>typeof String('my string') === 'string'</code> are both <code>true</code>.\nBut <code>typeof new String('my string') === 'object'</code>. <em>Notice the use of <code>new</code> keyword creates an object.</em></p>\n</blockquote>\n<p>Unit testing example:</p>\n","comp_id":"TlJ4CGq2ZGTXG0pudt_hG"},"iteration":2,"hash":10,"saveVersion":22},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":"300","selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":7853943343311,"maxId":2833864071123,"children":[{"id":6758223276815,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":6204892912891,"module":"support","leaf":false,"collapsed":true,"children":[{"id":3375477572762,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6204892912891},{"id":6503445175962,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6204892912891}],"parentId":6758223276815}],"parentId":0},{"id":2833864071123,"module":"src","leaf":false,"collapsed":true,"children":[{"id":3058654648502,"module":"random.js","leaf":true,"data":{"content":"function getRandomNumberUpTo(max) {\n return Math.floor(Math.random()*max);\n}\n\nexports.randomString = function () {\n  const random = getRandomNumberUpTo(5);\n  return ['one', 'two', 'three', 'four', 'five'][random];\n}\n\nexports.randomNumber = function (max) {\n  return getRandomNumberUpTo(max || 100);\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2833864071123},{"id":7853943343311,"module":"random.spec.js","leaf":true,"data":{"content":"const { randomString, randomNumber } = require('./random');\n\ndescribe('firstNChars', () => {\n\n  it('should return a random string - 5 attempts', () => {\n    expect(randomString()).toEqual(jasmine.any(String));\n    expect(randomString()).toEqual(jasmine.any(String));\n    expect(randomString()).toEqual(jasmine.any(String));\n    expect(randomString()).toEqual(jasmine.any(String));\n    expect(randomString()).toEqual(jasmine.any(String));\n  });\n\n  it('should return a random number - 5 attempts', () => {\n    expect(randomNumber(5)).toEqual(jasmine.any(Number));\n    expect(randomNumber(5)).toEqual(jasmine.any(Number));\n    expect(randomNumber(5)).toEqual(jasmine.any(Number));\n    expect(randomNumber(5)).toEqual(jasmine.any(Number));\n    expect(randomNumber(5)).toEqual(jasmine.any(Number));\n  });\n\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2833864071123}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/using-mock-values","judge":{"judgeActive":false}},"caption":"Testing random functions","comp_id":"kYA7y5A-64HKbrj_c3WCE","dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"isCopied":true,"codePanelHeight":"600"},"saveVersion":25,"iteration":0,"hash":8},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown random functions\n\nThere are 2 random functions in `src/random.js`:\n\n- `randomNumber` - returning a random number between 0 and 100\n- `randomString` - returning random string from 5 hardcoded. In a real app this could be a `randomQuote` function - randomly providing an interesting quote from a famous person:\n  > \"Unit testing is hard but fulfilling\" - W. Churchill ;)\n\nTo test them we can use the `jasmine.any` to make sure that the returned values have the type expected, regardless of the concrete values.\n\n- `expect(randomString()).toEqual(jasmine.any(String))` will pass if the `expected` is a string\n- `expect(randomNumber()).toEqual(jasmine.any(Number))` will pass if the `expected` is a number\n\n## Multiple expectations\n\nRunning the expectation multiple times in a row increases the chance that we catch a deviant case. The chance is increased but does not reach 100%. That is to say, these tests will always leave some room for error. That's OK as that is the nature of randomness.\n\n## Jasmine Matchers\n\n- `jasmine.any` (example above)\n- `jasmine.stringMatching`\n- `jasmine.arrayContaining`\n- `jasmine.objectContaining`\n- `jasmine.setContaining`\n  These are the matchers and we'll show an example of each of those below.\n\n## String matching\n\nJasmine supports `expected` conditions that can match a string. See `src/string-matching.spec.js` below:","mdHtml":"<h2>Breakdown random functions</h2>\n<p>There are 2 random functions in <code>src/random.js</code>:</p>\n<ul>\n<li><code>randomNumber</code> - returning a random number between 0 and 100</li>\n<li><code>randomString</code> - returning random string from 5 hardcoded. In a real app this could be a <code>randomQuote</code> function - randomly providing an interesting quote from a famous person:\n<blockquote>\n<p>“Unit testing is hard but fulfilling” - W. Churchill ;)</p>\n</blockquote>\n</li>\n</ul>\n<p>To test them we can use the <code>jasmine.any</code> to make sure that the returned values have the type expected, regardless of the concrete values.</p>\n<ul>\n<li><code>expect(randomString()).toEqual(jasmine.any(String))</code> will pass if the <code>expected</code> is a string</li>\n<li><code>expect(randomNumber()).toEqual(jasmine.any(Number))</code> will pass if the <code>expected</code> is a number</li>\n</ul>\n<h2>Multiple expectations</h2>\n<p>Running the expectation multiple times in a row increases the chance that we catch a deviant case. The chance is increased but does not reach 100%. That is to say, these tests will always leave some room for error. That’s OK as that is the nature of randomness.</p>\n<h2>Jasmine Matchers</h2>\n<ul>\n<li><code>jasmine.any</code> (example above)</li>\n<li><code>jasmine.stringMatching</code></li>\n<li><code>jasmine.arrayContaining</code></li>\n<li><code>jasmine.objectContaining</code></li>\n<li><code>jasmine.setContaining</code>\nThese are the matchers and we’ll show an example of each of those below.</li>\n</ul>\n<h2>String matching</h2>\n<p>Jasmine supports <code>expected</code> conditions that can match a string. See <code>src/string-matching.spec.js</code> below:</p>\n","cursorPosition":0,"comp_id":"u3oALJRhB0SZ8jh7mI51q"},"iteration":0,"hash":11,"saveVersion":12},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":7349048699761,"maxId":2588133355061,"children":[{"id":3886936451432,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":2896483305407,"module":"support","leaf":false,"collapsed":true,"children":[{"id":4529031799883,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2896483305407},{"id":4544484762223,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2896483305407}],"parentId":3886936451432}],"parentId":0},{"id":2588133355061,"module":"src","leaf":false,"collapsed":true,"children":[{"id":7349048699761,"module":"string-matching.spec.js","leaf":true,"data":{"content":"describe('firstNChars', () => {\n\n  // part 2 - string matching\n  it('showcase the jasmine.stringMatching', () => {\n    expect('a string').toEqual(jasmine.stringMatching('string'));\n    expect('a string').toEqual(jasmine.stringMatching('strin'));\n    expect('a string').toEqual(jasmine.stringMatching('stri'));\n    expect('a string').toEqual(jasmine.stringMatching('a'));\n    expect('a string').toEqual(jasmine.stringMatching(' '));\n  });\n\n  it('showcase the jasmine.stringMatching failing case', () => {\n    expect('a string').toEqual(jasmine.stringMatching('not this'));\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2588133355061}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/using-mock-values","judge":{"judgeActive":false}},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && rm -rf src && rm -rf spec &&  cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"fPUZ7qyOVYtG5p-oKifZM"},"iteration":0,"hash":12,"saveVersion":7},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown `stringMatching`\n\nThe method `jasmine.stringMatching` allows us to match a part of the `expected` string instead of the whole thing.\n\n- The file `src/string-matching.spec.js` contains a showcase of its passing and failing cases.\n- The line `expect('a string').toEqual(jasmine.stringMatching('string'));` matches `'a string'` with `'string'` and since the latter is part of the former it passes the test\n- Similarly for `'strin'` and `'stri'`.\n- An `'a'` is also a part of `'a string'` so the test passes.\n- An `' '`(space) is also found in `'a string'` hence this expectation passes too.\n\n### Failing case `stringMatching`\n\nThe line `expect('a string').toEqual(jasmine.stringMatching('not this'));` tries to match the `'a string'` to `'not this'` and since there is no match i.e. the latter is not contained in the former, this expectation fails.\n\n## Object containing\n\nThe method `jasmine.objectContaining` can be used to match against an object and verify a set of properties are part of it. See `src/object-containing.spec.js` below:\n","mdHtml":"<h2>Breakdown <code>stringMatching</code></h2>\n<p>The method <code>jasmine.stringMatching</code> allows us to match a part of the <code>expected</code> string instead of the whole thing.</p>\n<ul>\n<li>The file <code>src/string-matching.spec.js</code> contains a showcase of its passing and failing cases.</li>\n<li>The line <code>expect('a string').toEqual(jasmine.stringMatching('string'));</code> matches <code>'a string'</code> with <code>'string'</code> and since the latter is part of the former it passes the test</li>\n<li>Similarly for <code>'strin'</code> and <code>'stri'</code>.</li>\n<li>An <code>'a'</code> is also a part of <code>'a string'</code> so the test passes.</li>\n<li>An <code>' '</code>(space) is also found in <code>'a string'</code> hence this expectation passes too.</li>\n</ul>\n<h3>Failing case <code>stringMatching</code></h3>\n<p>The line <code>expect('a string').toEqual(jasmine.stringMatching('not this'));</code> tries to match the <code>'a string'</code> to <code>'not this'</code> and since there is no match i.e. the latter is not contained in the former, this expectation fails.</p>\n<h2>Object containing</h2>\n<p>The method <code>jasmine.objectContaining</code> can be used to match against an object and verify a set of properties are part of it. See <code>src/object-containing.spec.js</code> below:</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"brVr_BVs_3IDugVUm1KRV"},"iteration":0,"hash":13,"saveVersion":11},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":false,"hideOutputUrl":false,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":2154153946677,"maxId":3509005601364,"children":[{"id":6047966848207,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":9919456151887,"module":"support","leaf":false,"collapsed":true,"children":[{"id":5608294570206,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":9919456151887},{"id":5576600580697,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":9919456151887}],"parentId":6047966848207}],"parentId":0},{"id":3509005601363,"module":"src","leaf":false,"collapsed":true,"children":[{"id":2154153946677,"module":"object-containing.spec.js","leaf":true,"data":{"content":"describe('objectContaining', () => {\n\n  // part 3 object containing\n  it('showcase jasmine.objectContaining', () => {\n    expect({ x: 1, y: 2 }).toEqual(jasmine.objectContaining({ x: 1 }));\n    expect({ x: 1 }).toEqual(jasmine.objectContaining({ x: 1 }));\n    expect(Object.assign({ x: 1 }, { y: 2 })).toEqual(jasmine.objectContaining({ x: 1 }));\n  });\n\n  it('showcase jasmine.objectContaining failing a test', () => {\n    expect({ xx: 1, y: 2 }).toEqual(jasmine.objectContaining({ x: 1 }));\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3509005601363}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/using-mock-values"},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","runInLiveContainer":true},"comp_id":"qYw0CTVQYu9THcwhxqKIL","isCopied":true},"saveVersion":11,"iteration":0,"hash":14},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown `objectContaining`\n\nThe method `jasmine.objectContaining` allows us to match a part of the `expected` object instead of the whole thing.\n\n- The file `src/object-containing.spec.js` contains a showcase of its passing and failing cases.\n- The line `expect({ x: 1, y: 2 }).toEqual(jasmine.objectContaining({ x: 1 }));` matches the object `{ x: 1, y: 2 }` with an object having a property with key of `x` and a value of `1` -> `{ x: 1 }`. The `actual` has that property key and value so the expectation passes.\n- Similarly for `{ x: 1 }` and `{ x: 1 }`.\n- `Object.assign({ x: 1 }, {})` merges the second object's properties to the first in this case `{ y: 2 }` is merged in `{ x: 1 }` resulting in `{ x: 1, y: 2 }` which in turn passes the expectation as that object still contains the property `x` with value `1`.\n\n### Failing case `objectContaining`\n\nThe expectation `expect({ xx: 1, y: 2 }).toEqual(jasmine.objectContaining({ x: 1 }));` tries to match an object missing a `x` property to one having it so it fails.\n\n## Array and Set matchers\n\nThe following example shows array and set matchers that have similar functionality to `objectContaining`.\n\nNamely `arrayContaining` and `setContaining`.","mdHtml":"<h2>Breakdown <code>objectContaining</code></h2>\n<p>The method <code>jasmine.objectContaining</code> allows us to match a part of the <code>expected</code> object instead of the whole thing.</p>\n<ul>\n<li>The file <code>src/object-containing.spec.js</code> contains a showcase of its passing and failing cases.</li>\n<li>The line <code>expect({ x: 1, y: 2 }).toEqual(jasmine.objectContaining({ x: 1 }));</code> matches the object <code>{ x: 1, y: 2 }</code> with an object having a property with key of <code>x</code> and a value of <code>1</code> -&gt; <code>{ x: 1 }</code>. The <code>actual</code> has that property key and value so the expectation passes.</li>\n<li>Similarly for <code>{ x: 1 }</code> and <code>{ x: 1 }</code>.</li>\n<li><code>Object.assign({ x: 1 }, {})</code> merges the second object’s properties to the first in this case <code>{ y: 2 }</code> is merged in <code>{ x: 1 }</code> resulting in <code>{ x: 1, y: 2 }</code> which in turn passes the expectation as that object still contains the property <code>x</code> with value <code>1</code>.</li>\n</ul>\n<h3>Failing case <code>objectContaining</code></h3>\n<p>The expectation <code>expect({ xx: 1, y: 2 }).toEqual(jasmine.objectContaining({ x: 1 }));</code> tries to match an object missing a <code>x</code> property to one having it so it fails.</p>\n<h2>Array and Set matchers</h2>\n<p>The following example shows array and set matchers that have similar functionality to <code>objectContaining</code>.</p>\n<p>Namely <code>arrayContaining</code> and <code>setContaining</code>.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"cGiY_EpT13o1tZYfitO7S"},"iteration":0,"hash":15,"saveVersion":14},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":false,"hideOutputUrl":false,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":3271279549017,"maxId":3908128121557,"children":[{"id":3760932133959,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":4990782890562,"module":"support","leaf":false,"collapsed":true,"children":[{"id":7868969861010,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4990782890562},{"id":5874098090307,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4990782890562}],"parentId":3760932133959}],"parentId":0},{"id":3908128121557,"module":"src","leaf":false,"collapsed":true,"children":[{"id":2327396863312,"module":"array-containing.spec.js","leaf":true,"data":{"content":"describe('arrayContaining', () => {\n\n  it('showcase jasmine.arrayContaining', () => {\n    expect([1,2,3,4,5]).toEqual(jasmine.arrayContaining([2,5]));\n    expect([2,5]).toEqual(jasmine.arrayContaining([2,5]));\n    expect([1,2,3,4,5]).toEqual(jasmine.arrayContaining([5]));\n  });\n\n  it('showcase jasmine.arrayContaining failing case', () => {\n    expect([1,2,3,4,5]).toEqual(jasmine.arrayContaining([6]));\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3908128121557},{"id":3271279549017,"module":"set-containing.spec.js","leaf":true,"data":{"content":"describe('setContaining', () => {\n  // part 4 setContaining\n  it('showcase jasmine.setContaining', () => {\n    expect(new Set(['one', 'two', 'three'])).toEqual(jasmine.setContaining(new Set(['one', 'two'])));\n  });\n\n  it('showcase jasmine.setContaining failing case', () => {\n    expect(new Set(['one', 'three'])).toEqual(jasmine.setContaining(new Set(['one', 'two'])));\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":3908128121557}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/using-mock-values"},"dockerJob":{"key":"7IgoXRRQCavQ48Yy3YCL0","name":"live Jasmine","inputFileName":"src/main.ts","runScript":"cd /usr/local/educative/unit-testing-course && cp -r /usercode/** .","ports":"9876","startScript":"cd /usr/local/educative/unit-testing-course && cp -r /usercode/** . && node_modules/.bin/nodemon -w ../unit-testing-course/ ./node_modules/.bin/jasmine","jobType":"Live","runInLiveContainer":true},"comp_id":"WhFICSfMrLTeqL1Bvf6JK","isCopied":true},"saveVersion":12,"iteration":0,"hash":16},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Breakdown `arrayContaining` and `setContaining`\n\nThe examples follow the pattern with passing and failing case examples.\n\n### arrayContaining\n\nThe `actual` needs to have the array members from `expected` to pass the expectation.\n\n### setContaining\n\nThe `actual` set needs to have the set members from `expected` to pass the expectation.\n\n## Exercise\n\nUsing the following example make the tests pass:","mdHtml":"<h2>Breakdown <code>arrayContaining</code> and <code>setContaining</code></h2>\n<p>The examples follow the pattern with passing and failing case examples.</p>\n<h3>arrayContaining</h3>\n<p>The <code>actual</code> needs to have the array members from <code>expected</code> to pass the expectation.</p>\n<h3>setContaining</h3>\n<p>The <code>actual</code> set needs to have the set members from <code>expected</code> to pass the expectation.</p>\n<h2>Exercise</h2>\n<p>Using the following example make the tests pass:</p>\n","cursorPosition":356,"comp_id":"GB1qKA3YYcwPovPGX6OKr"},"iteration":0,"hash":17,"saveVersion":6},{"type":"WebpackBin","mode":"view","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":false,"hideOutputUrl":false,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":1108498245154,"maxId":6982657522582,"children":[{"id":3523905167218,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":2660065833198,"module":"support","leaf":false,"collapsed":true,"children":[{"id":2562257472836,"module":"jasmine.config.js","leaf":true,"data":{"content":"const SpecReporter = require('jasmine-spec-reporter').SpecReporter\r\n\r\njasmine.getEnv().clearReporters();\r\n\r\njasmine.getEnv().addReporter(\r\n  new SpecReporter({\r\n    // add jasmine-spec-reporter\r\n    spec: {\r\n      displayPending: true,\r\n    },\r\n  })\r\n)\r\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2660065833198},{"id":9626748129672,"module":"jasmine.json","leaf":true,"data":{"content":"{\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"../spec/support/jasmine.config.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2660065833198}],"parentId":3523905167218}],"parentId":0},{"id":6982657522582,"module":"src","leaf":false,"collapsed":true,"children":[{"id":1108498245154,"module":"tasks.spec.js","leaf":true,"data":{"content":"describe('tasks', () => {\n\n  it('should match a random object', () => {\n    var actual;// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.any(Object));\n  });\n\n  it('jasmine.stringMatching matches a part of a string', () => {\n    var actual;// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.stringMatching('my'));\n    expect(actual).toEqual(jasmine.stringMatching(' '));\n    expect(actual).toEqual(jasmine.stringMatching('task'));\n  });\n\n\n  it('jasmine.arrayContaining does not take order into account', () => {\n    var actual;// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.arrayContaining(['my', 'task']));\n    expect(actual).toEqual(jasmine.arrayContaining(['task', 'my']));\n  });\n\n  it('jasmine.objectContaining matches objects', () => {\n    expect({}).toEqual(jasmine.objectContaining({ task: 'my' }));\n  });\n\n  it('jasmine.setContaining matches a set', () => {\n    var actual; // 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.setContaining(new Set(['my', 'task'])));\n  });\n});\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":6982657522582}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/using-jasmine-and-karma-to-unit-test-your-angular-app/tree/main/using-mock-values"},"comp_id":"47e2Nj_9vjcNIOOucAUTK","isCopied":true},"saveVersion":14,"iteration":0,"hash":18},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Exercise guide\n\n- Focus on a single test and make it pass.\n- Don't worry about a lot of red in the terminal when focusing on a single test.\n- If it's too distracting use one of the following methods to disable other tests:\n  - Comment out the `it` cases that are not yet passing and work on one until it passes, then uncomment another, and so on.\n  - Use `xit` to disable pending tests `xit('my pending test, () => {...})` or `pending()` inside of the body of the test `it('my pending test, () => { pending(); ...})`.\n- Using a `fit` can help - it focuses Jasmine i.e. makes it run only tests that have `fit` e.g. `fit('this test is the only one that will run`, () => {`.\n","mdHtml":"<h2>Exercise guide</h2>\n<ul>\n<li>Focus on a single test and make it pass.</li>\n<li>Don’t worry about a lot of red in the terminal when focusing on a single test.</li>\n<li>If it’s too distracting use one of the following methods to disable other tests:\n<ul>\n<li>Comment out the <code>it</code> cases that are not yet passing and work on one until it passes, then uncomment another, and so on.</li>\n<li>Use <code>xit</code> to disable pending tests <code>xit('my pending test, () =&gt; {...})</code> or <code>pending()</code> inside of the body of the test <code>it('my pending test, () =&gt; { pending(); ...})</code>.</li>\n</ul>\n</li>\n<li>Using a <code>fit</code> can help - it focuses Jasmine i.e. makes it run only tests that have <code>fit</code> e.g. <code>fit('this test is the only one that will run</code>, () =&gt; {`.</li>\n</ul>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"cn36Bzx7YOtx8umls3DaA"},"iteration":0,"hash":19,"saveVersion":5},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\ndescribe('tasks', () => {\n\n  it('should match a random object', () => {\n    var actual = {my: 'task'};// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.any(Object));\n  });\n\n  it('jasmine.stringMatching matches a part of a string', () => {\n    var actual = 'my task';// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.stringMatching('my'));\n    expect(actual).toEqual(jasmine.stringMatching(' '));\n    expect(actual).toEqual(jasmine.stringMatching('task'));\n  });\n\n\n  it('jasmine.arrayContaining does not take order into account', () => {\n    var actual = ['task', 'my'];// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.arrayContaining(['my', 'task']));\n    expect(actual).toEqual(jasmine.arrayContaining(['task', 'my']));\n  });\n\n  it('jasmine.objectContaining matches objects', () => {\n    expect({task: 'my'}).toEqual(jasmine.objectContaining({ task: 'my' }));\n  });\n\n  it('jasmine.setContaining matches a set', () => {\n    var actual = new Set(['task', 'my', 'another']); // 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.setContaining(new Set(['my', 'task'])));\n  });\n});\n\n```","mdHtml":"<pre><code class=\"language-js\">describe('tasks', () =&gt; {\n\n  it('should match a random object', () =&gt; {\n    var actual = {my: 'task'};// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.any(Object));\n  });\n\n  it('jasmine.stringMatching matches a part of a string', () =&gt; {\n    var actual = 'my task';// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.stringMatching('my'));\n    expect(actual).toEqual(jasmine.stringMatching(' '));\n    expect(actual).toEqual(jasmine.stringMatching('task'));\n  });\n\n\n  it('jasmine.arrayContaining does not take order into account', () =&gt; {\n    var actual = ['task', 'my'];// 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.arrayContaining(['my', 'task']));\n    expect(actual).toEqual(jasmine.arrayContaining(['task', 'my']));\n  });\n\n  it('jasmine.objectContaining matches objects', () =&gt; {\n    expect({task: 'my'}).toEqual(jasmine.objectContaining({ task: 'my' }));\n  });\n\n  it('jasmine.setContaining matches a set', () =&gt; {\n    var actual = new Set(['task', 'my', 'another']); // 👈 edit here\n\n    // do not edit below this line\n    expect(actual).toEqual(jasmine.setContaining(new Set(['my', 'task'])));\n  });\n});\n\n</code></pre>\n","showHintText":"Show Hint","hideHintText":"Hide Hint","showIcon":true,"comp_id":"60XOnA-VFVif7F32-nrN0"},"iteration":2,"hash":20,"saveVersion":2}],"summary":{"title":"How to Use Jasmine Matchers","description":"In this lesson, we'll look at jasmine matchers that allow us to fuzzy match objects, strings, sets, and arrays. We'll also see how to make Jasmine focus on a single test and only run and report it.","tags":["jasmine.any","jasmine.stringMatching","jasmine.arrayContaining"],"titleUpdated":true}}