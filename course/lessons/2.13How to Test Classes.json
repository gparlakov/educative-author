{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"In everyday work, we often need to deal with classes ([MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)). Some examples might be \n - a node.js API endpoint handler (server-side)\n - a SPA Component class (client-side) \n\nThese often include dependencies that are injected in the constructor and used throughout the methods in the class instance.\n\nWe'll look into a class with one dependency and one method that uses that dependency. \n\n## The Article class\n\nWhat follows is a very simplified example of a class that handles deleting articles in a browser application. It will accept some input and make a request to a server API if conditions are met.    ","mdHtml":"<p>In everyday work, we often need to deal with classes (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">MDN article</a>). Some examples might be</p>\n<ul>\n<li>a node.js API endpoint handler (server-side)</li>\n<li>a SPA Component class (client-side)</li>\n</ul>\n<p>These often include dependencies that are injected in the constructor and used throughout the methods in the class instance.</p>\n<p>Weâ€™ll look into a class with one dependency and one method that uses that dependency.</p>\n<h2>The Article class</h2>\n<p>What follows is a very simplified example of a class that handles deleting articles in a browser application. It will accept some input and make a request to a server API if conditions are met.</p>\n","cursorPosition":{"line":0,"ch":0},"comp_id":"vsJgUGhUitjeMEV-mYukZ"},"iteration":1,"hash":1,"saveVersion":7},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":4546728777838,"maxId":7007114404812,"children":[{"id":4383769924425,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":5856024201123,"module":"support","leaf":false,"collapsed":true,"children":[{"id":7691147233562,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":5856024201123}],"parentId":4383769924425},{"id":3564286279443,"module":"article-delete.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, () => {\n    // arrange\n    // act\n    const result = article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n    expect(result).toEqual('article deleted: \"the first article\"');\n  });\n\n  it(`should return no article to delete when that's the case`, () => {\n    // arrange\n    // act\n    const result = article.delete();\n    // assert\n    expect(result).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":4383769924425}],"parentId":0},{"id":7007114404812,"module":"src","leaf":false,"collapsed":true,"children":[{"id":3567839896681,"module":"article-api.mjs","leaf":true,"data":{"content":"\nexport class ArticleAPI {\n    delete(id) {\n      // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    }\n  }\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":7007114404812},{"id":4546728777838,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  delete(a) {\n    if (a != null && a.id != null) {\n      this.articleAPI.delete(a.id);\n      return `article deleted: \"${a.title}\"`;\n    }\n\n    return 'no article to delete';\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":7007114404812}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/2.12.testing-classes"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"codePanelHeight":"600","comp_id":"cbGBe4b_UTpF6XSKyxTxz","caption":"ArticleDelete class tests"},"iteration":2,"hash":2,"saveVersion":4},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## Class breakdown\n\nThe `ArticleDelete` class is relies on a `ArticleAPI` class to make a `DELETE /api/article/:id` call if conditions are met.\n\n- `ArticleAPI` is a class that implements the server API call. _It is empty as that's outside of the current lesson scope, and we'll be mocking its responses for the tests._\n- `ArticleDelete` is the main class:\n\n  - ```js\n    import { ArticleAPI } from './article-api.mjs';\n    ```\n\n    This line imports the ArticleAPI dependency from the adjacent module in the current folder `article-api.mjs`.\n\n  - ```js\n    export class ArticleDelete {\n    ```\n\n    This line exports the class to be used in other modules.\n\n  - ```js\n      /** @type {ArticleAPI} */\n      articleAPI;\n\n      /**\n       * @param { ArticleAPI } article the article api\n       */\n      constructor(articleApi) {\n        this.articleAPI = articleApi;\n      }\n    ```\n\n    These lines are the declaration of the `articleAPI` property and populating it in the `constructor`. In other words, constructing an instance of the `ArticleDelete` class requires an instance of the `ArticleAPI` class.\n\n  - ```js\n      delete(a) {\n        if (a != null && a.id != null) {\n          this.articleAPI.delete(a.id);\n          return `article deleted: \"${a.title}\"`;\n        }\n\n        return 'no article to delete';\n      }\n    ```\n\n    This `delete` method will only delete an article that has an `id`. Otherwise will inform the caller of the issue.\n\n## Test breakdown\n\nLooking at the `spec/article-delete.spec.mjs` file we have:\n\n- ```js\n  import { ArticleDelete } from '../__src__/article-delete.mjs';\n\n  describe('ArticleDelete', () => {\n  ```\n\n  Here we start with `import`ing the `ArticleDelete` class and declaring a test suite for it `describe('ArticleDelete', () => {`\n\n- ```js\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n  ```\n\n  Knowing that we need an instance of the `ArticleAPI` we create a spy object with a spy on the `delete` method as that's the only method we use in the logic of the `ArticleDelete` class. Then on the next line, we instantiate an `ArticleDelete` instance. These two instances will get renewed `beforeEach` test so that each test executes in isolation from the others and no one test influences the others.\n\n- ```js\n  it(`should call the articleAPI delete and return the deleted article title`, () => {\n    // arrange\n    // act\n    const result = article.delete({ id: 1, title: 'the first article' });\n    // assert\n    expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n    expect(result).toEqual('article deleted: \"the first article\"');\n  });\n  ```\n\n  In the first test, we run the `article.delete` passing in the expected article object with an `id` and a `title`. Then, we assert that the dependency's `delete` method has been called with the argument expected (`1`) and the result is the expected string (`'article deleted: \"the first article\"'`).\n\n- ```js\n  it(`should return no article to delete when that's the case`, () => {\n    // arrange\n    // act\n    const result = article.delete();\n    // assert\n    expect(result).toEqual('no article to delete');\n  });\n  ```\n\n  In the second test, we make sure that when the `delete` method is called without an article, it will return the expected string - `'no article to delete'`.\n\n## Exercise\n\nFor this exercise, we'll use the `src/article-create.mjs` in the code playground below. The `ArticleCreate` class is very similar to `ArticleDelete` with the difference being the `create` method:\n\n- ```js\n  create(title, content) {\n    if (typeof title === 'string' && typeof content === 'string') {\n      this.articleAPI.create(title, content);\n      return `article created: \"${title}\" with content \"${content}\"`;\n    }\n\n    return `expected string title and content but received title: \"${title}\" content: \"${content}\"`;\n  }\n  ```\n\n  It takes 2 parameters: `title` and `content` to create the article. And it invokes the `ArticleAPI`'s `create` method. The returned strings confirm the creation of the article or inform of an error.\n\nLet's create the 2 specs for the above logic:\n\n- When called with a title and content it invokes the `ArticleAPI`'s method `create`.\n- When called without a title or content, it returns an error explanation.","mdHtml":"<h2>Class breakdown</h2>\n<p>The <code>ArticleDelete</code> class is relies on a <code>ArticleAPI</code> class to make a <code>DELETE /api/article/:id</code> call if conditions are met.</p>\n<ul>\n<li>\n<p><code>ArticleAPI</code> is a class that implements the server API call. <em>It is empty as thatâ€™s outside of the current lesson scope, and weâ€™ll be mocking its responses for the tests.</em></p>\n</li>\n<li>\n<p><code>ArticleDelete</code> is the main class:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">import { ArticleAPI } from './article-api.mjs';\n</code></pre>\n<p>This line imports the ArticleAPI dependency from the adjacent module in the current folder <code>article-api.mjs</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">export class ArticleDelete {\n</code></pre>\n<p>This line exports the class to be used in other modules.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n</code></pre>\n<p>These lines are the declaration of the <code>articleAPI</code> property and populating it in the <code>constructor</code>. In other words, constructing an instance of the <code>ArticleDelete</code> class requires an instance of the <code>ArticleAPI</code> class.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">  delete(a) {\n    if (a != null &amp;&amp; a.id != null) {\n      this.articleAPI.delete(a.id);\n      return `article deleted: &quot;${a.title}&quot;`;\n    }\n\n    return 'no article to delete';\n  }\n</code></pre>\n<p>This <code>delete</code> method will only delete an article that has an <code>id</code>. Otherwise will inform the caller of the issue.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Test breakdown</h2>\n<p>Looking at the <code>spec/article-delete.spec.mjs</code> file we have:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () =&gt; {\n</code></pre>\n<p>Here we start with <code>import</code>ing the <code>ArticleDelete</code> class and declaring a test suite for it <code>describe('ArticleDelete', () =&gt; {</code></p>\n</li>\n<li>\n<pre><code class=\"language-js\">let article;\nlet articleAPI;\n\nbeforeEach(() =&gt; {\n  articleAPI = jasmine.createSpyObj('article API', ['delete']);\n  article = new ArticleDelete(articleAPI);\n});\n</code></pre>\n<p>Knowing that we need an instance of the <code>ArticleAPI</code> we create a spy object with a spy on the <code>delete</code> method as thatâ€™s the only method we use in the logic of the <code>ArticleDelete</code> class. Then on the next line, we instantiate an <code>ArticleDelete</code> instance. These two instances will get renewed <code>beforeEach</code> test so that each test executes in isolation from the others and no one test influences the others.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">it(`should call the articleAPI delete and return the deleted article title`, () =&gt; {\n  // arrange\n  // act\n  const result = article.delete({ id: 1, title: 'the first article' });\n  // assert\n  expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n  expect(result).toEqual('article deleted: &quot;the first article&quot;');\n});\n</code></pre>\n<p>In the first test, we run the <code>article.delete</code> passing in the expected article object with an <code>id</code> and a <code>title</code>. Then, we assert that the dependencyâ€™s <code>delete</code> method has been called with the argument expected (<code>1</code>) and the result is the expected string (<code>'article deleted: &quot;the first article&quot;'</code>).</p>\n</li>\n<li>\n<pre><code class=\"language-js\">it(`should return no article to delete when that's the case`, () =&gt; {\n  // arrange\n  // act\n  const result = article.delete();\n  // assert\n  expect(result).toEqual('no article to delete');\n});\n</code></pre>\n<p>In the second test, we make sure that when the <code>delete</code> method is called without an article, it will return the expected string - <code>'no article to delete'</code>.</p>\n</li>\n</ul>\n<h2>Exercise</h2>\n<p>For this exercise, weâ€™ll use the <code>src/article-create.mjs</code> in the code playground below. The <code>ArticleCreate</code> class is very similar to <code>ArticleDelete</code> with the difference being the <code>create</code> method:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">create(title, content) {\n  if (typeof title === 'string' &amp;&amp; typeof content === 'string') {\n    this.articleAPI.create(title, content);\n    return `article created: &quot;${title}&quot; with content &quot;${content}&quot;`;\n  }\n\n  return `expected string title and content but received title: &quot;${title}&quot; content: &quot;${content}&quot;`;\n}\n</code></pre>\n<p>It takes 2 parameters: <code>title</code> and <code>content</code> to create the article. And it invokes the <code>ArticleAPI</code>'s <code>create</code> method. The returned strings confirm the creation of the article or inform of an error.</p>\n</li>\n</ul>\n<p>Letâ€™s create the 2 specs for the above logic:</p>\n<ul>\n<li>When called with a title and content it invokes the <code>ArticleAPI</code>'s method <code>create</code>.</li>\n<li>When called without a title or content, it returns an error explanation.</li>\n</ul>\n","cursorPosition":10,"comp_id":"eDRus8en5TzZpB75e0KiS"},"iteration":2,"hash":3,"saveVersion":10},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":4952897769184,"maxId":9612229158727,"children":[{"id":7078059261918,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":7482549664406,"module":"support","leaf":false,"collapsed":true,"children":[{"id":378813159088,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":4952897769184,"module":"article-create.spec.mjs","leaf":true,"data":{"content":"import { ArticleCreate } from '../__src__/article-create.mjs';\n\ndescribe('ArticleCreate', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['create']);\n    article = new ArticleCreate(articleAPI);\n  });\n\n  it(`should call the articleAPI create and return the created article title and content`, () => {\n    pending('call create with a name and a title and assert expected call and return value')\n    // arrange\n    // act\n    // assert\n  });\n\n  it(`should return what was expected and what was received when missing parameters or not string`, () => {\n    pending('call create without a name and with a title and assert expected return value')\n    // arrange\n    // act\n    // assert\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":9612229158727,"module":"src","leaf":false,"collapsed":true,"children":[{"id":1007193966043,"module":"article-api.mjs","leaf":true,"data":{"content":"\nexport class ArticleAPI {\n    delete(id) {\n      // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    }\n\n    create(title, content) {\n      // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    }\n  }\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":6445332020617,"module":"article-create.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleCreate {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  create(title, content) {\n    if (typeof title === 'string' && typeof content === 'string') {\n      this.articleAPI.create(title, content);\n      return `article created: \"${title}\" with content \"${content}\"`;\n    }\n\n    return `expected string title and content but recived title: \"${title}\" content: \"${content}\"`;\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":1827450478461,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  delete(a) {\n    if (a != null && a.id != null) {\n      this.articleAPI.delete(a.id);\n      return `article deleted: \"${a.title}\"`;\n    }\n\n    return 'no article to delete';\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/2.12.testing-classes-exercise"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Testing classes exercise - test the ArticleCreate create method. ","comp_id":"_s87gJlnqF4DBC2n4l4mg"},"iteration":2,"hash":6,"saveVersion":2},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js \n  it(`should call the articleAPI create and return the created article title and content`, () => {\n    // arrange\n    // act\n    const result = article.create('the first article', 'some content here');\n    // assert\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('the first article', 'some content here');\n    expect(result).toEqual('article created: \"the first article\" with content \"some content here\"');\n  });\n});\n```\n","mdHtml":"<pre><code class=\"language-js\">  it(`should call the articleAPI create and return the created article title and content`, () =&gt; {\n    // arrange\n    // act\n    const result = article.create('the first article', 'some content here');\n    // assert\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('the first article', 'some content here');\n    expect(result).toEqual('article created: &quot;the first article&quot; with content &quot;some content here&quot;');\n  });\n});\n</code></pre>\n","showHintText":"Show Hint for `should call the articleAPI create and return the created article title and content`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"FAbMP7ckR69AJNwTW6BzK"},"iteration":2,"hash":7,"saveVersion":4},{"type":"SpoilerEditor","mode":"view","content":{"version":"3.0","text":"```js \n  it(`should return what was expected and what was received when missing parameters or not string`, () => {\n    // arrange\n    // act\n    const result = article.create();\n    // assert\n    expect(result).toEqual('expected string title and content but recived title: \"undefined\" content: \"undefined\"');\n  });\n```\n","mdHtml":"<pre><code class=\"language-js\">  it(`should return what was expected and what was received when missing parameters or not string`, () =&gt; {\n    // arrange\n    // act\n    const result = article.create();\n    // assert\n    expect(result).toEqual('expected string title and content but recived title: &quot;undefined&quot; content: &quot;undefined&quot;');\n  });\n</code></pre>\n","showHintText":"Show Hint for `should return what was expected and what was received when missing parameters or not string`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"-VLyhFozmoVSdU3HqO-JW","isCopied":true},"iteration":2,"hash":8,"saveVersion":3}],"summary":{"title":"How to Unit Test JS Classes","description":"In this lesson, we'll look into the difference between testing classes vs testing functions.","titleUpdated":true,"tags":["javascript","class","unit testing"]}}