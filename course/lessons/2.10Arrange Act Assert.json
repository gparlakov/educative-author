{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"## A lot going on\n\nLet's take a look at the unit test from the previous lesson:\n\n```js\nit('should create canvas, append it in the element, get a 2d context and draw the square', () => {\n  const contextMock = { rect: jasmine.createSpy('rect') };\n  const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n  canvasMock.getContext.and.returnValue(contextMock);\n  const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n  const element = { appendChild: jasmine.createSpy('appendChild') };\n\n  drawSquare(element, 10);\n\n  expect(documentSpy).toHaveBeenCalledTimes(1);\n  expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n  expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n  expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n});\n```\n\nEven though some separation is done using spacing, a lot is going on and it could be difficult to follow. Let's see how it looks like using some comments:\n\n```js\nit('should create canvas, append it in the element, get a 2d context and draw the square', () => {\n  // setting up the mock environment and input\n  const contextMock = { rect: jasmine.createSpy('rect') };\n  const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n  canvasMock.getContext.and.returnValue(contextMock);\n  const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n  const element = { appendChild: jasmine.createSpy('appendChild') };\n  // running the function-under-test\n  drawSquare(element, 10);\n  // asserting expectations\n  expect(documentSpy).toHaveBeenCalledTimes(1);\n  expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n  expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n  expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n});\n```\n\nAll we did, is add a bit of meta-data about our tests. It helps but also adds more work for the reader and the author of the tests. It turns out there's a convention used around to convey the same in a shorter style.\n\n## A succinct message\n\nArrange - Act - Assert\n\n- Arrange - set up dependencies and input, etc.\n- Act - perform the action.\n- Assert - make the assertions.\n\nThis is how it looks like after it's applied on the above spec:\n\n```js\nit('should create canvas, append it in the element, get a 2d context and draw the square', () => {\n  // arrange\n  const contextMock = { rect: jasmine.createSpy('rect') };\n  const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n  canvasMock.getContext.and.returnValue(contextMock);\n  const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n  const element = { appendChild: jasmine.createSpy('appendChild') };\n  // act\n  drawSquare(element, 10);\n  // assert\n  expect(documentSpy).toHaveBeenCalledTimes(1);\n  expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n  expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n  expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n});\n```\n\n## Redundant!?\n\nYes, it looked redundant and unnecessary to me too, at first. Now, I find looking at tests without that is hard. It's like grammar for tests (e.g. the space after the comma `, next word`) - it makes reading that much **easier on the eye**.\n\n## Optional\n\nThis is optional and just a recommendation. This is not the only test convention. Find yours and stick with it.\n\n## Exercise\n\nGo ahead and try to add the Arrange-Act-Assert to one test case here. Use the code from the previous exercise:\n","mdHtml":"<h2>A lot going on</h2>\n<p>Let’s take a look at the unit test from the previous lesson:</p>\n<pre><code class=\"language-js\">it('should create canvas, append it in the element, get a 2d context and draw the square', () =&gt; {\n  const contextMock = { rect: jasmine.createSpy('rect') };\n  const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n  canvasMock.getContext.and.returnValue(contextMock);\n  const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n  const element = { appendChild: jasmine.createSpy('appendChild') };\n\n  drawSquare(element, 10);\n\n  expect(documentSpy).toHaveBeenCalledTimes(1);\n  expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n  expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n  expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n});\n</code></pre>\n<p>Even though some separation is done using spacing, a lot is going on and it could be difficult to follow. Let’s see how it looks like using some comments:</p>\n<pre><code class=\"language-js\">it('should create canvas, append it in the element, get a 2d context and draw the square', () =&gt; {\n  // setting up the mock environment and input\n  const contextMock = { rect: jasmine.createSpy('rect') };\n  const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n  canvasMock.getContext.and.returnValue(contextMock);\n  const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n  const element = { appendChild: jasmine.createSpy('appendChild') };\n  // running the function-under-test\n  drawSquare(element, 10);\n  // asserting expectations\n  expect(documentSpy).toHaveBeenCalledTimes(1);\n  expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n  expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n  expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n});\n</code></pre>\n<p>All we did, is add a bit of meta-data about our tests. It helps but also adds more work for the reader and the author of the tests. It turns out there’s a convention used around to convey the same in a shorter style.</p>\n<h2>A succinct message</h2>\n<p>Arrange - Act - Assert</p>\n<ul>\n<li>Arrange - set up dependencies and input, etc.</li>\n<li>Act - perform the action.</li>\n<li>Assert - make the assertions.</li>\n</ul>\n<p>This is how it looks like after it’s applied on the above spec:</p>\n<pre><code class=\"language-js\">it('should create canvas, append it in the element, get a 2d context and draw the square', () =&gt; {\n  // arrange\n  const contextMock = { rect: jasmine.createSpy('rect') };\n  const canvasMock = { getContext: jasmine.createSpy('canvasMock') };\n  canvasMock.getContext.and.returnValue(contextMock);\n  const documentSpy = spyOn(document, 'createElement').and.returnValue(canvasMock);\n  const element = { appendChild: jasmine.createSpy('appendChild') };\n  // act\n  drawSquare(element, 10);\n  // assert\n  expect(documentSpy).toHaveBeenCalledTimes(1);\n  expect(element.appendChild).toHaveBeenCalledOnceWith(canvasMock);\n  expect(canvasMock.getContext).toHaveBeenCalledOnceWith('2d');\n  expect(contextMock.rect).toHaveBeenCalledOnceWith(0, 0, 10, 10);\n});\n</code></pre>\n<h2>Redundant!?</h2>\n<p>Yes, it looked redundant and unnecessary to me too, at first. Now, I find looking at tests without that is hard. It’s like grammar for tests (e.g. the space after the comma <code>, next word</code>) - it makes reading that much <strong>easier on the eye</strong>.</p>\n<h2>Optional</h2>\n<p>This is optional and just a recommendation. This is not the only test convention. Find yours and stick with it.</p>\n<h2>Exercise</h2>\n<p>Go ahead and try to add the Arrange-Act-Assert to one test case here. Use the code from the previous exercise:</p>\n","comp_id":"aqZ_CN4osT3F_nneDFjrq"},"iteration":3,"hash":1,"saveVersion":6},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":7573563881014,"maxId":9672919513618,"children":[{"id":2115207781770,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":766091384401,"module":"support","leaf":false,"collapsed":true,"children":[{"id":365193709547,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: true,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":766091384401}],"parentId":2115207781770},{"id":7573563881014,"module":"draw-circle.spec.mjs","leaf":true,"data":{"content":"import { drawCircle } from '/__src__/draw-circle.mjs';\n\ndescribe('drawCircle', () => {\n  it('should create canvas, append it in the element, get a 2d context and draw the circle', () => {\n    pending('test draw circle'); // replace this line with logic and Arrange Act Assert\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":2115207781770}],"parentId":0},{"id":9672919513618,"module":"src","leaf":false,"collapsed":true,"children":[{"id":735407690203,"module":"draw-circle.mjs","leaf":true,"data":{"content":"/**\n * Draw a circle within the element with a given radius\n * @param {HTMLElement} element\n * @param radius number\n */\n export function drawCircle(element, radius) {\n  const canvas = document.createElement('canvas');\n  element.appendChild(canvas);\n  const context = canvas.getContext('2d');\n  context.arc(radius, radius, radius, 0, 360);\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""},"parentId":9672919513618}],"parentId":0}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/blob/main/2.8.browser-api-exercise","judge":{"judgeActive":false}},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"comp_id":"W5o_-vVoEo9ssMV-Jvna3"},"iteration":8,"hash":2,"saveVersion":2},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\nimport { drawCircle } from '/__src__/draw-circle.mjs';\n\ndescribe('drawCircle', () => {\n  it('should create canvas, append it in the element, get a 2d context and draw the circle', () => {\n    // arrange\n    \n    // act \n\n    //assert\n  });\n});\n```","mdHtml":"<pre><code class=\"language-js\">import { drawCircle } from '/__src__/draw-circle.mjs';\n\ndescribe('drawCircle', () =&gt; {\n  it('should create canvas, append it in the element, get a 2d context and draw the circle', () =&gt; {\n    // arrange\n    \n    // act \n\n    //assert\n  });\n});\n</code></pre>\n","showHintText":"Show Hint","hideHintText":"Hide Hint","showIcon":true,"comp_id":"eKmNBsjznCBNxNfRtVqIv"},"iteration":15,"hash":3,"saveVersion":1}],"summary":{"title":"How to Use Arrange Act Assert for Clear Tests\n ","description":"This is an optional lesson that will look into what can we do about more complex and convoluted tests to improve readability.","tags":["Arrange Act Assert","unit tests","readability"]}}