{"components":[{"type":"MarkdownEditor","content":{"version":"2.0","text":"In everyday work, we often need to deal with Promises ([MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)). If the function we test is `async` (it returns a `Promise`), we can use `async` and `await` in our tests (see \"How to Test Promise-s Using async and await\").\n\nWhen the function is not returning a `Promise` and not using the `async` keyword but still relies on `Promise`-s, we can not use Jasmine's async testing capabilities directly. There are two approaches for testing such functions/methods that \"hide\" their `Promise`-s:\n\n- The `Done` function from Jasmine.\n- The `async` and `await` keywords with an assisting `Promise`.\n\nLet's start with the class that has this hidden-Promise method - the `ArticleDelete` class.\n\n## The hidden Promise\n\nWhat follows is a very simplified example of a class that handles deleting articles in a browser application. It accepts some input and makes a request to a server API if conditions are met.\n\n> For this lesson, the `delete` method is not `async`-chronous but still uses the `Promise` returning `ArticleAPI` and\n> works with `.then` and `.catch` callbacks ([Promise chain flow](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining)).\n> The Promise is not exposed hence it's \"hidden\".\n\nRun the code playground below and see the breakdown below.\n","mdHtml":"<p>In everyday work, we often need to deal with Promises (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">MDN article</a>). If the function we test is <code>async</code> (it returns a <code>Promise</code>), we can use <code>async</code> and <code>await</code> in our tests (see “How to Test Promise-s Using async and await”).</p>\n<p>When the function is not returning a <code>Promise</code> and not using the <code>async</code> keyword but still relies on <code>Promise</code>-s, we can not use Jasmine’s async testing capabilities directly. There are two approaches for testing such functions/methods that “hide” their <code>Promise</code>-s:</p>\n<ul>\n<li>The <code>Done</code> function from Jasmine.</li>\n<li>The <code>async</code> and <code>await</code> keywords with an assisting <code>Promise</code>.</li>\n</ul>\n<p>Let’s start with the class that has this hidden-Promise method - the <code>ArticleDelete</code> class.</p>\n<h2>The hidden Promise</h2>\n<p>What follows is a very simplified example of a class that handles deleting articles in a browser application. It accepts some input and makes a request to a server API if conditions are met.</p>\n<blockquote>\n<p>For this lesson, the <code>delete</code> method is not <code>async</code>-chronous but still uses the <code>Promise</code> returning <code>ArticleAPI</code> and\nworks with <code>.then</code> and <code>.catch</code> callbacks (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining\">Promise chain flow</a>).\nThe Promise is not exposed hence it’s “hidden”.</p>\n</blockquote>\n<p>Run the code playground below and see the breakdown below.</p>\n","cursorPosition":0,"comp_id":"XBpEhk0f2OsFqlXtVmtdS"},"iteration":2,"hash":1,"saveVersion":2},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":8433949523003,"maxId":7068848762004,"children":[{"id":207432823775,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":6042899307135,"module":"support","leaf":false,"collapsed":true,"children":[{"id":8533607560341,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":5666796786203,"module":"article-delete.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, (done) => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n    // act\n    article.delete({ id: 1, title: 'the first article' });\n    // assert\n    setTimeout(() => {\n      expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n      expect(article.deleteResult).toEqual('article deleted: \"the first article\"');\n      done();\n    });\n  });\n\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, (done) => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n    // act\n    article.delete({ id: 1, title: 'the first article' });\n    // assert\n    setTimeout(() => {\n      expect(article.deleteResult).toEqual('It looks like article \"the first article\" has alreay been deleted');\n      done();\n    });\n  });\n\n  it(`should return no article to delete when that's the case`, async () => {\n    // arrange\n    // act\n    article.delete();\n    await Promise.resolve();\n    // assert\n    expect(article.deleteResult).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":7068848762004,"module":"src","leaf":false,"collapsed":true,"children":[{"id":9121840788351,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":8433949523003,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /** @type {string} */\n  deleteResult;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  delete(a) {\n    this.deleteResult = undefined;\n    if (a != null && a.id != null) {\n      this.articleAPI\n        .delete(a.id)\n        .then(() => (this.deleteResult = `article deleted: \"${a.title}\"`))\n        .catch((e) => {\n          if (e && e.status === 404) {\n            this.deleteResult = `It looks like article \"${a.title}\" has alreay been deleted`;\n          } else {\n            this.deleteResult = `Unknown error trying to delete \"${a.title}\". Please try again.`;\n          }\n        });\n    } else {\n      this.deleteResult = 'no article to delete';\n    }\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/3.2.hidden-promises"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Example of testing the \"hidden\" Promise","comp_id":"wosU23mvScGAycS7k7UMu"},"iteration":2,"hash":2,"saveVersion":1},{"type":"MarkdownEditor","mode":"edit","content":{"version":"2.0","text":"## ArticleDelete class breakdown\n\nThe `ArticleDelete` class is relying on a `ArticleAPI` class to make a `DELETE /api/article/:id` call if conditions are met.\n\n- `ArticleAPI` is a class that would implement the server API call. _It is empty as that's outside of the current lesson's scope, and we'll be mocking its responses for the tests._\n- `ArticleDelete` is the main class.\n\n  - ```js\n    import { ArticleAPI } from './article-api.mjs';\n    ```\n\n    This line imports the ArticleAPI dependency from the adjacent module in the current folder `article-api.mjs`.\n\n  - ```js\n    export class ArticleDelete {\n    ```\n\n    This line exports the class for use in other modules.\n\n  - ```js\n      /** @type {ArticleAPI} */\n      articleAPI;\n      deleteResult;\n\n      /**\n       * @param { ArticleAPI } article the article api\n       */\n      constructor(articleApi) {\n        this.articleAPI = articleApi;\n      }\n    ```\n\n    These lines declare the `articleAPI` class instance property and populate it when an instance of the class gets constructed. In other words,  constructing an instance of the `ArticleDelete` class requires an instance of the `ArticleAPI` class.  The `deleteResult` gets declared to be used in the `delete` method.\n\n  - ```js\n    delete(a) {\n      // ...\n    }\n    ```\n\n    Notice the method is not preceded by the `await` keyword, and as we'll see below, it does not return a `Promise`. That means that `await`-ing it in a test will not do us any good as the `await` will only wait for a `Promise`.\n\n  - ```js\n    this.deleteResult = undefined;\n    ```\n\n    This line resets the `deleteResult` at the beginning of an article delete process. That class property will get used to communicating the result with the human user e.g. by showing it in a `<span>`.\n\n  - ```js\n    if (a != null && a.id != null) {\n      // ... see below\n    } else {\n      this.deleteResult = 'no article to delete';\n    }\n\n     When there's an article with an `id` passed in, it will continue and delete it, and if not, will return an explanatory string.\n\n  - ```js\n    this.articleAPI\n      .delete(a.id)\n      .then(() => (this.deleteResult = `article deleted: \"${a.title}\"`))\n      .catch(/*...see below*/);\n    ```\n\n    This logic calls the ArticleAPI `delete` method and attaches a `then` callback on the success i.e. `Promise` resolved. It fills in the `deleteResult`.\n\n  - ```js\n    (e) => {\n      if (e && e.status === 404) {\n        this.deleteResult = `It looks like article \"${a.title}\" has already been deleted`;\n      } else {\n        this.deleteResult = `Unknown error trying to delete \"${a.title}\". Please try again.`;\n      }\n    }\n    ```\n\n    The `catch` callback is called if the `delete` method returns a promise that gets rejected. `e` is the rejection data. It handles 2 cases:\n\n    - When the response has a status of `404 Not found` and sets the `deleteResult` to \"already deleted\".\n    - Otherwise, sets the `deleteResult` to \"unknown - please try again\".\n\n## Test breakdown\n\nLooking at the `spec/article-delete.spec.mjs` file we have:\n\n- ```js\n  import { ArticleDelete } from '../__src__/article-delete.mjs';\n\n  describe('ArticleDelete', () => {\n  ```\n\n  We start with `import`ing the `ArticleDelete` class and declaring a test suite for it `describe('ArticleDelete', () => {`.\n\n- ```js\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n  ```\n\n  Knowing that we need an instance of the `ArticleAPI` we create a spy object with a spy on the `delete` method as that's the only method we use in the logic of the `ArticleDelete` class. Then in the next line, we instantiate an `ArticleDelete` instance. These two instances will get renewed `beforeEach` test so that each test executes in isolation, from the others, and no one test influences the others.\n\n### Green path breakdown\n\nIn the test case `should call the articleAPI delete and return the deleted article title`, we focus on the so-called \"green path\" test AKA \"happy path\" [wiki article](https://en.wikipedia.org/wiki/Happy_path). That is testing for the case that the method receives what it expects and works as intended.\n\n- ```js\n  it(`should call the articleAPI delete and return the deleted article title`, (done) => {\n  ```\n\n  Notice the second parameter of `it` is not an `async` function. It takes the `done` parameter which comes from Jasmine and is a function that Jasmine will expect to get called before it considers a test finished. [Jasmine docs](https://jasmine.github.io/tutorials/async#callbacks) and [Jasmine types](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/39c90291062b269d2c4f19ca7d65369c210696aa/types/jasmine/index.d.ts#L169-L174).\n\n- ```js\n  // arrange\n  articleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n  ```\n\n  Using the mocking capabilities, we ensure that when the `delete` method of the `ArticleAPI` gets called, it returns a `Promise`. `Promise.resolve` returns a `Promise` that is resolved with the specified result - in this case `{id: 1}`.\n\n- ```js\n  // act\n  article.delete({ id: 1, title: 'the first article' });\n  ```\n\n  Then, we call the `delete` method. Since we can not `await` its response to get resolved, we'll start a timeout below.\n\n- ```js\n  // assert\n  setTimeout(() => {\n    expect(article.deleteResult).toEqual('It looks like article \"the first article\" has already been deleted');\n    done();\n  });\n  ```\n\n  We need the assertion to be executed after the \"hidden\" promise finishes. So we use `setTimeout`. It schedules the assertion in the next available event loop cycle ([event loop video](https://www.youtube.com/watch?v=8aGhZQkoFbQ&vl=en)), which ensures the `Promise` callback was executed before the expression `expect(article.deleteResult)....` gets called.\n\n  >Experiment: try commenting out the `setTimeout(() => {` and its closing brackets `});` and see the test failing.\n\n### 404 error test breakdown\n\nIn the test case `when the articleAPI delete returns status 404 it should return - already been deleted`, we'll make sure the behavior of the `ArticleDelete.delete` method is as expected for the case that a `404 Not found` is returned from the server.\n\n- ```js\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, (done) => {\n  ```\n\n  Using `it` with the `done` function parameter and not `async`.\n\n- ```js\n  // arrange\n  articleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n  ```\n\n  Using the mocking capabilities, we ensure that when the `delete` method of the `ArticleAPI` gets called, it returns a `Promise`. `Promise.reject` returns a `Promise` that is rejected with the specified result - in this case `{status: 404, message: 'not found'}`.\n\n  _Note: This is just an example of how a rejected Promise might look like ([axios](https://axios-http.com/docs/handling_errors)). Depending on the specific API or library used the rejection might not happen on a 404_\n\n- ```js\n  // act\n  article.delete({ id: 1, title: 'the first article' });\n  ```\n\n  Then, we call the `delete` method.\n\n- ```js\n  // assert\n  setTimeout(() => {\n    expect(article.deleteResult).toEqual('It looks like article \"the first article\" has already been deleted');\n    done();\n  });\n  ```\n\n  Finally, we assert that the `delete` gets called, and the `result` is as expected for the \"404\" case. This logic is using the `setTimeout` to ensure the `expect`-ation call is after the `.catch` callback from `ArticleDelete` line#23.\n\n## Exercise\n\nFor this exercise, we'll focus on `src/article-create.mjs` in the code playground below. The `ArticleCreate` class is very similar to `ArticleDelete`, with the main difference being the `create` method:\n\n- ```js\n  create(title, content) {\n    this.createResult = undefined;\n    if (typeof title === 'string' && typeof content === 'string') {\n      this.articleAPI\n        .create(title, content)\n        .then(() => (this.createResult = `article created: \"${title}\" with content \"${content}\"`))\n        .catch((e) => {\n          if (e && e.status === 409) {\n            this.createResult = `it appears that an article with that title \"${title}\" already exists`;\n          } else {\n            this.createResult = `failed creating article ${title} - please try again later`;\n          }\n        });\n    } else {\n      this.createResult = `expected string title and content but received title: \"${title}\" content: \"${content}\"`;\n    }\n  }\n  ```\n\n  - It takes two parameters: `title` and `content` to create the article, and it invokes the `ArticleAPI`'s `create` method.\n  - The `createResult` property is used to convey the result: success or an error.\n  - In the case of a status [409 Conflict](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409), it advises there is an article with such a title already.\n  - There is also the quick fail when the title or content is missing or not a string *Notice the Promise returning (AKA async) method does not get called for this case*.\n\nLet's create the four specs for the above logic:\n\n- When called with title and content, it invokes the `ArticleAPI`'s method `create`.\n- When the API returns a 409 Conflict, it should advise the caller such a title already exists.\n- When the API returns a generic error, it should advise the caller about the unknown error.\n- When called without a title or content, it returns an error explanation.\n\n>When `done` is not called tests timeout! If you opt to use the assisting Promise - remove `done` from the parameter list of the `it` callback function.\n\n_Note: the tests for `ArticleDelete` are part of the code playground too._\n","mdHtml":"<h2>ArticleDelete class breakdown</h2>\n<p>The <code>ArticleDelete</code> class is relying on a <code>ArticleAPI</code> class to make a <code>DELETE /api/article/:id</code> call if conditions are met.</p>\n<ul>\n<li>\n<p><code>ArticleAPI</code> is a class that would implement the server API call. <em>It is empty as that’s outside of the current lesson’s scope, and we’ll be mocking its responses for the tests.</em></p>\n</li>\n<li>\n<p><code>ArticleDelete</code> is the main class.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">import { ArticleAPI } from './article-api.mjs';\n</code></pre>\n<p>This line imports the ArticleAPI dependency from the adjacent module in the current folder <code>article-api.mjs</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">export class ArticleDelete {\n</code></pre>\n<p>This line exports the class for use in other modules.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">  /** @type {ArticleAPI} */\n  articleAPI;\n  deleteResult;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n</code></pre>\n<p>These lines declare the <code>articleAPI</code> class instance property and populate it when an instance of the class gets constructed. In other words,  constructing an instance of the <code>ArticleDelete</code> class requires an instance of the <code>ArticleAPI</code> class.  The <code>deleteResult</code> gets declared to be used in the <code>delete</code> method.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">delete(a) {\n  // ...\n}\n</code></pre>\n<p>Notice the method is not preceded by the <code>await</code> keyword, and as we’ll see below, it does not return a <code>Promise</code>. That means that <code>await</code>-ing it in a test will not do us any good as the <code>await</code> will only wait for a <code>Promise</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">this.deleteResult = undefined;\n</code></pre>\n<p>This line resets the <code>deleteResult</code> at the beginning of an article delete process. That class property will get used to communicating the result with the human user e.g. by showing it in a <code>&lt;span&gt;</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">if (a != null &amp;&amp; a.id != null) {\n  // ... see below\n} else {\n  this.deleteResult = 'no article to delete';\n}\n\n When there's an article with an `id` passed in, it will continue and delete it, and if not, will return an explanatory string.\n\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-js\">this.articleAPI\n  .delete(a.id)\n  .then(() =&gt; (this.deleteResult = `article deleted: &quot;${a.title}&quot;`))\n  .catch(/*...see below*/);\n</code></pre>\n<p>This logic calls the ArticleAPI <code>delete</code> method and attaches a <code>then</code> callback on the success i.e. <code>Promise</code> resolved. It fills in the <code>deleteResult</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">(e) =&gt; {\n  if (e &amp;&amp; e.status === 404) {\n    this.deleteResult = `It looks like article &quot;${a.title}&quot; has already been deleted`;\n  } else {\n    this.deleteResult = `Unknown error trying to delete &quot;${a.title}&quot;. Please try again.`;\n  }\n}\n</code></pre>\n<p>The <code>catch</code> callback is called if the <code>delete</code> method returns a promise that gets rejected. <code>e</code> is the rejection data. It handles 2 cases:</p>\n<ul>\n<li>When the response has a status of <code>404 Not found</code> and sets the <code>deleteResult</code> to “already deleted”.</li>\n<li>Otherwise, sets the <code>deleteResult</code> to “unknown - please try again”.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Test breakdown</h2>\n<p>Looking at the <code>spec/article-delete.spec.mjs</code> file we have:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () =&gt; {\n</code></pre>\n<p>We start with <code>import</code>ing the <code>ArticleDelete</code> class and declaring a test suite for it <code>describe('ArticleDelete', () =&gt; {</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">let article;\nlet articleAPI;\n\nbeforeEach(() =&gt; {\n  articleAPI = jasmine.createSpyObj('article API', ['delete']);\n  article = new ArticleDelete(articleAPI);\n});\n</code></pre>\n<p>Knowing that we need an instance of the <code>ArticleAPI</code> we create a spy object with a spy on the <code>delete</code> method as that’s the only method we use in the logic of the <code>ArticleDelete</code> class. Then in the next line, we instantiate an <code>ArticleDelete</code> instance. These two instances will get renewed <code>beforeEach</code> test so that each test executes in isolation, from the others, and no one test influences the others.</p>\n</li>\n</ul>\n<h3>Green path breakdown</h3>\n<p>In the test case <code>should call the articleAPI delete and return the deleted article title</code>, we focus on the so-called “green path” test AKA “happy path” <a href=\"https://en.wikipedia.org/wiki/Happy_path\">wiki article</a>. That is testing for the case that the method receives what it expects and works as intended.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">it(`should call the articleAPI delete and return the deleted article title`, (done) =&gt; {\n</code></pre>\n<p>Notice the second parameter of <code>it</code> is not an <code>async</code> function. It takes the <code>done</code> parameter which comes from Jasmine and is a function that Jasmine will expect to get called before it considers a test finished. <a href=\"https://jasmine.github.io/tutorials/async#callbacks\">Jasmine docs</a> and <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/39c90291062b269d2c4f19ca7d65369c210696aa/types/jasmine/index.d.ts#L169-L174\">Jasmine types</a>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// arrange\narticleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n</code></pre>\n<p>Using the mocking capabilities, we ensure that when the <code>delete</code> method of the <code>ArticleAPI</code> gets called, it returns a <code>Promise</code>. <code>Promise.resolve</code> returns a <code>Promise</code> that is resolved with the specified result - in this case <code>{id: 1}</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// act\narticle.delete({ id: 1, title: 'the first article' });\n</code></pre>\n<p>Then, we call the <code>delete</code> method. Since we can not <code>await</code> its response to get resolved, we’ll start a timeout below.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nsetTimeout(() =&gt; {\n  expect(article.deleteResult).toEqual('It looks like article &quot;the first article&quot; has already been deleted');\n  done();\n});\n</code></pre>\n<p>We need the assertion to be executed after the “hidden” promise finishes. So we use <code>setTimeout</code>. It schedules the assertion in the next available event loop cycle (<a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;vl=en\">event loop video</a>), which ensures the <code>Promise</code> callback was executed before the expression <code>expect(article.deleteResult)....</code> gets called.</p>\n<blockquote>\n<p>Experiment: try commenting out the <code>setTimeout(() =&gt; {</code> and its closing brackets <code>});</code> and see the test failing.</p>\n</blockquote>\n</li>\n</ul>\n<h3>404 error test breakdown</h3>\n<p>In the test case <code>when the articleAPI delete returns status 404 it should return - already been deleted</code>, we’ll make sure the behavior of the <code>ArticleDelete.delete</code> method is as expected for the case that a <code>404 Not found</code> is returned from the server.</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">it(`when the articleAPI delete returns status 404 it should return - already been deleted`, (done) =&gt; {\n</code></pre>\n<p>Using <code>it</code> with the <code>done</code> function parameter and not <code>async</code>.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// arrange\narticleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n</code></pre>\n<p>Using the mocking capabilities, we ensure that when the <code>delete</code> method of the <code>ArticleAPI</code> gets called, it returns a <code>Promise</code>. <code>Promise.reject</code> returns a <code>Promise</code> that is rejected with the specified result - in this case <code>{status: 404, message: 'not found'}</code>.</p>\n<p><em>Note: This is just an example of how a rejected Promise might look like (<a href=\"https://axios-http.com/docs/handling_errors\">axios</a>). Depending on the specific API or library used the rejection might not happen on a 404</em></p>\n</li>\n<li>\n<pre><code class=\"language-js\">// act\narticle.delete({ id: 1, title: 'the first article' });\n</code></pre>\n<p>Then, we call the <code>delete</code> method.</p>\n</li>\n<li>\n<pre><code class=\"language-js\">// assert\nsetTimeout(() =&gt; {\n  expect(article.deleteResult).toEqual('It looks like article &quot;the first article&quot; has already been deleted');\n  done();\n});\n</code></pre>\n<p>Finally, we assert that the <code>delete</code> gets called, and the <code>result</code> is as expected for the “404” case. This logic is using the <code>setTimeout</code> to ensure the <code>expect</code>-ation call is after the <code>.catch</code> callback from <code>ArticleDelete</code> line#23.</p>\n</li>\n</ul>\n<h2>Exercise</h2>\n<p>For this exercise, we’ll focus on <code>src/article-create.mjs</code> in the code playground below. The <code>ArticleCreate</code> class is very similar to <code>ArticleDelete</code>, with the main difference being the <code>create</code> method:</p>\n<ul>\n<li>\n<pre><code class=\"language-js\">create(title, content) {\n  this.createResult = undefined;\n  if (typeof title === 'string' &amp;&amp; typeof content === 'string') {\n    this.articleAPI\n      .create(title, content)\n      .then(() =&gt; (this.createResult = `article created: &quot;${title}&quot; with content &quot;${content}&quot;`))\n      .catch((e) =&gt; {\n        if (e &amp;&amp; e.status === 409) {\n          this.createResult = `it appears that an article with that title &quot;${title}&quot; already exists`;\n        } else {\n          this.createResult = `failed creating article ${title} - please try again later`;\n        }\n      });\n  } else {\n    this.createResult = `expected string title and content but received title: &quot;${title}&quot; content: &quot;${content}&quot;`;\n  }\n}\n</code></pre>\n<ul>\n<li>It takes two parameters: <code>title</code> and <code>content</code> to create the article, and it invokes the <code>ArticleAPI</code>'s <code>create</code> method.</li>\n<li>The <code>createResult</code> property is used to convey the result: success or an error.</li>\n<li>In the case of a status <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409\">409 Conflict</a>, it advises there is an article with such a title already.</li>\n<li>There is also the quick fail when the title or content is missing or not a string <em>Notice the Promise returning (AKA async) method does not get called for this case</em>.</li>\n</ul>\n</li>\n</ul>\n<p>Let’s create the four specs for the above logic:</p>\n<ul>\n<li>When called with title and content, it invokes the <code>ArticleAPI</code>'s method <code>create</code>.</li>\n<li>When the API returns a 409 Conflict, it should advise the caller such a title already exists.</li>\n<li>When the API returns a generic error, it should advise the caller about the unknown error.</li>\n<li>When called without a title or content, it returns an error explanation.</li>\n</ul>\n<blockquote>\n<p>When <code>done</code> is not called tests timeout! If you opt to use the assisting Promise - remove <code>done</code> from the parameter list of the <code>it</code> callback function.</p>\n</blockquote>\n<p><em>Note: the tests for <code>ArticleDelete</code> are part of the code playground too.</em></p>\n","cursorPosition":2919,"comp_id":"FaUN8THqxnTWuSGHsumrP"},"iteration":3,"hash":4,"saveVersion":1},{"type":"WebpackBin","mode":"edit","content":{"version":5,"theme":"default","showLineNumbers":true,"showConsole":false,"hideResultOutput":true,"hideOutputUrl":true,"hideCodeView":false,"loaders":{"babel":{"title":"React","config":{"es2015":true,"react":true},"enabled":true},"dart":{"title":"Dart","config":{"dart":true},"enabled":false},"ts-react":{"title":"Typescript React","config":{"ts-react":true},"enabled":false},"elm":{"title":"Elm","config":{"elm":true},"enabled":false},"vue":{"title":"Vue.js","config":{"vue":true},"enabled":false},"gojs-react":{"title":"GoJS React","config":{"gojs-react":true},"enabled":false}},"npmPackages":{"react":"15.6.1","react-dom":"15.6.1"},"outputHeight":300,"selectedApiKeys":{},"selectedEnvVars":{},"outputLayout":"desktop","codeContents":{"module":"/","id":0,"selectedId":null,"maxId":7159855639600,"children":[{"id":8244112798847,"module":"spec","leaf":false,"collapsed":true,"children":[{"id":3849119835660,"module":"support","leaf":false,"collapsed":true,"children":[{"id":3860024244802,"module":"jasmine-browser.js","leaf":true,"data":{"content":"const specReporter = require('jasmine-spec-reporter').SpecReporter\n\nmodule.exports = {\n  srcDir: \"src\",\n  srcFiles: [\n    \"**/*.?(m)js\"\n  ],\n  specDir: \"spec\",\n  specFiles: [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  helpers: [\n    \"helpers/**/*.?(m)js\"\n  ],\n  random: false,\n  stopSpecOnExpectationFailure: false,\n  browser: {\n    name: \"headlessChrome\"\n  },\n  reporters: [new specReporter()]\n}\n","language":"jsx","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":5127478256398,"module":"article-create.spec.mjs","leaf":true,"data":{"content":"import { ArticleCreate } from '../__src__/article-create.mjs';\n\ndescribe('ArticleCreate', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['create']);\n    article = new ArticleCreate(articleAPI);\n  });\n\n  it(`should call the articleAPI create and return the created article title and content`, (done) => {\n    pending('call create with a name and a title and assert expected call and return value');\n    // arrange\n    // act\n    // assert\n  });\n\n  it(`when the API returns a 409 Conflict it should advise caller such a title already exists`, (done) => {\n    pending(\n      'make sure the create returns a rejected promise with a status 409 and assert the return string is as expected'\n    );\n\n    // arrange\n    // act\n    // assert\n  });\n\n  it(`when the API returns an error it should advise caller of unknown error`, (done) => {\n    pending(\n      'make sure the create returns a rejected promise with a 500 (or any non-409) status and assert the return string is as expected'\n    );\n    // arrange\n    // act\n    // assert\n  });\n\n  it(`should return what was expected and what was received when missing parameters or not string`, () => {\n    pending('call create without a name and with a title and assert expected return value. Notice theres no need for done');\n    // arrange\n    // act\n    // assert\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":3692768510710,"module":"article-delete.spec.mjs","leaf":true,"data":{"content":"import { ArticleDelete } from '../__src__/article-delete.mjs';\n\ndescribe('ArticleDelete', () => {\n  let article;\n  let articleAPI;\n\n  beforeEach(() => {\n    articleAPI = jasmine.createSpyObj('article API', ['delete']);\n    article = new ArticleDelete(articleAPI);\n  });\n\n  it(`should call the articleAPI delete and return the deleted article title`, (done) => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.resolve({id: 1}));\n    // act\n    article.delete({ id: 1, title: 'the first article' });\n    // assert\n    setTimeout(() => {\n      expect(articleAPI.delete).toHaveBeenCalledOnceWith(1);\n      expect(article.deleteResult).toEqual('article deleted: \"the first article\"');\n      done();\n    });\n  });\n\n  it(`when the articleAPI delete returns status 404 it should return - already been deleted`, (done) => {\n    // arrange\n    articleAPI.delete.and.returnValue(Promise.reject({status: 404, message: 'not found'}));\n    // act\n    article.delete({ id: 1, title: 'the first article' });\n    // assert\n    setTimeout(() => {\n      expect(article.deleteResult).toEqual('It looks like article \"the first article\" has already been deleted');\n      done();\n    });\n  });\n\n  it(`should return no article to delete when that's the case`, async () => {\n    // arrange\n    // act\n    article.delete();\n    await Promise.resolve();\n    // assert\n    expect(article.deleteResult).toEqual('no article to delete');\n  });\n});\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]},{"id":7159855639600,"module":"src","leaf":false,"collapsed":true,"children":[{"id":8397112390586,"module":"article-api.mjs","leaf":true,"data":{"content":"export class ArticleAPI {\n  delete(id) {\n    // make a DELETE /api/article/:id request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n\n  create(title, content) {\n    // make a POST /api/article request (XMLHttpRequest/fetch/axios)\n    // and return a promise\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":8535385692590,"module":"article-create.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\nexport class ArticleCreate {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /** @type {string} */\n  createResult;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  create(title, content) {\n    this.createResult = undefined;\n    if (typeof title === 'string' && typeof content === 'string') {\n      this.articleAPI\n        .create(title, content)\n        .then(() => (this.createResult = `article created: \"${title}\" with content \"${content}\"`))\n        .catch((e) => {\n          if (e && e.status === 409) {\n            this.createResult = `it appears that an article with that title \"${title}\" already exists`;\n          } else {\n            this.createResult = `failed creating article ${title} - please try again later`;\n          }\n        });\n    } else {\n      this.createResult = `expected string title and content but received title: \"${title}\" content: \"${content}\"`;\n    }\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}},{"id":7459777232993,"module":"article-delete.mjs","leaf":true,"data":{"content":"import { ArticleAPI } from './article-api.mjs';\n\nexport class ArticleDelete {\n  /** @type {ArticleAPI} */\n  articleAPI;\n\n  /** @type {string} */\n  deleteResult;\n\n  /**\n   * @param { ArticleAPI } article the article api\n   */\n  constructor(articleApi) {\n    this.articleAPI = articleApi;\n  }\n\n  delete(a) {\n    this.deleteResult = undefined;\n    if (a != null && a.id != null) {\n      this.articleAPI\n        .delete(a.id)\n        .then(() => (this.deleteResult = `article deleted: \"${a.title}\"`))\n        .catch((e) => {\n          if (e && e.status === 404) {\n            this.deleteResult = `It looks like article \"${a.title}\" has already been deleted`;\n          } else {\n            this.deleteResult = `Unknown error trying to delete \"${a.title}\". Please try again.`;\n          }\n        });\n    } else {\n      this.deleteResult = 'no article to delete';\n    }\n  }\n}\n","language":"javascript","staticFile":false,"hidden":false,"highlightedLines":""}}]}],"importedGithubPath":"https://github.com/gparlakov/jasmine-educative/tree/main/3.2.hidden-promises-exercise"},"dockerJob":{"key":"MAg0aPm2NgdrpUzSEzwM0","name":"Run jasmine-browser-runner console","inputFileName":"index.js","runScript":"cp -r /usercode/** .","ports":"3000","startScript":"cd /usr/local/educative/unit-testing-course && \nnpx nodemon -w /usercode --exec \"cp -r /usercode/** . && npx jasmine-browser-runner runSpecs\"","jobType":"Live","forceRelaunchOnRun":false,"forceRelaunchOnCompChange":true,"runInLiveContainer":true},"caption":"Exercise testing the \"hidden\" Promise","comp_id":"yLwcLgLUYaZzquCy5uZ5F"},"iteration":2,"hash":7},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\nit(`should call the articleAPI create and return the created article title and content`, (done) => {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.resolve({ id: 1 }));\n  // act\n  article.create('title', 'content');\n  // assert\n  setTimeout(() => {\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('title', 'content');\n    expect(article.createResult).toEqual('article created: \"title\" with content \"content\"');\n    done();\n  });\n});\n```\n","mdHtml":"<pre><code class=\"language-js\">it(`should call the articleAPI create and return the created article title and content`, (done) =&gt; {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.resolve({ id: 1 }));\n  // act\n  article.create('title', 'content');\n  // assert\n  setTimeout(() =&gt; {\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('title', 'content');\n    expect(article.createResult).toEqual('article created: &quot;title&quot; with content &quot;content&quot;');\n    done();\n  });\n});\n</code></pre>\n","showHintText":"Show Hint for `should call the articleAPI create and return the created article title and content`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"v7a0FCqnvcvaiKvqkWt6A"},"iteration":2,"hash":8,"saveVersion":2},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\nit(`when the API returns a 409 Conflict it should advise caller such a title already exists`, (done) => {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.reject({ status: 409 }));\n  // act\n  article.create('title', 'content');\n  // assert\n  setTimeout(() => {\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('title', 'content');\n    expect(article.createResult).toEqual(`it appears that an article with that title \"title\" already exists`);\n    done();\n  });\n});\n```\n","mdHtml":"<pre><code class=\"language-js\">it(`when the API returns a 409 Conflict it should advise caller such a title already exists`, (done) =&gt; {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.reject({ status: 409 }));\n  // act\n  article.create('title', 'content');\n  // assert\n  setTimeout(() =&gt; {\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('title', 'content');\n    expect(article.createResult).toEqual(`it appears that an article with that title &quot;title&quot; already exists`);\n    done();\n  });\n});\n</code></pre>\n","showHintText":"Show Hint for `when the API returns a 409 Conflict it should advise caller such a title already exists`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"ydHp0wgVn_iihh8aU5-ep"},"iteration":2,"hash":9,"saveVersion":1},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\nit(`when the API returns an error it should advise caller of unknown error`, (done) => {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.reject({ status: 500 }));\n  // act\n  article.create('title', 'content');\n  // assert\n  setTimeout(() => {\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('title', 'content');\n    expect(article.createResult).toEqual(`failed creating article title - please try again later`);\n    done();\n  });\n});\n```","mdHtml":"<pre><code class=\"language-js\">it(`when the API returns an error it should advise caller of unknown error`, (done) =&gt; {\n  // arrange\n  articleAPI.create.and.returnValue(Promise.reject({ status: 500 }));\n  // act\n  article.create('title', 'content');\n  // assert\n  setTimeout(() =&gt; {\n    expect(articleAPI.create).toHaveBeenCalledOnceWith('title', 'content');\n    expect(article.createResult).toEqual(`failed creating article title - please try again later`);\n    done();\n  });\n});\n</code></pre>\n","showHintText":"Show Hint for `when the API returns an error it should advise the caller of unknown error`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"1B9Y13_qBtZ6VL9n02Bsx"},"iteration":2,"hash":10,"saveVersion":1},{"type":"SpoilerEditor","mode":"edit","content":{"version":"3.0","text":"```js\nit(`should return what was expected and what was received when missing parameters or not string`, () => {\n  // arrange\n  // act\n  article.create('');\n  // assert\n  expect(article.createResult).toEqual(\n    `expected string title and content but received title: \"\" content: \"undefined\"`\n  );\n});\n```","mdHtml":"<pre><code class=\"language-js\">it(`should return what was expected and what was received when missing parameters or not string`, () =&gt; {\n  // arrange\n  // act\n  article.create('');\n  // assert\n  expect(article.createResult).toEqual(\n    `expected string title and content but received title: &quot;&quot; content: &quot;undefined&quot;`\n  );\n});\n</code></pre>\n","showHintText":"Show Hint for `should return what was expected and what was received when missing parameters or not string`","hideHintText":"Hide Hint","showIcon":true,"comp_id":"8CzQCPZYcG7IUGMNTViQz"},"iteration":2,"hash":11,"saveVersion":1}],"summary":{"titleUpdated":true,"description":"- we use Promises in Javascript applications for asynchronous code\n- sometimes the Promise is not exposed out of the method-under-test (fire and forget)\n- such Promises can be tested using the Done function or `async` and `await`","tags":["asynchronous","unit test","Promise"]}}